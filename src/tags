!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATFViewerMain	ATFViewerMain.h	/^	ATFViewerMain():$/;"	f	class:ATFViewerMain
ATFViewerMain	ATFViewerMain.h	/^class ATFViewerMain$/;"	c
ATFViewerMain_H	ATFViewerMain.h	22;"	d
AXEParser	gprof2dot.py	/^class AXEParser(Parser):$/;"	c
Axis	Joystick.h	/^	std::vector<int> Axis;$/;"	m	class:Joystick
AxisCount	Joystick.h	/^	int AxisCount;$/;"	m	class:Joystick
Axis_LeftStick_LeftRight	Joystick.h	/^	Axis_LeftStick_LeftRight = 0,$/;"	e	enum:KeyCode_F310
Axis_LeftStick_UpDown	Joystick.h	/^	Axis_LeftStick_UpDown = 1,$/;"	e	enum:KeyCode_F310
Axis_LeftTrigger_OffOn	Joystick.h	/^	Axis_LeftTrigger_OffOn = 2,$/;"	e	enum:KeyCode_F310
Axis_RightStick_LeftRight	Joystick.h	/^	Axis_RightStick_LeftRight = 3,$/;"	e	enum:KeyCode_F310
Axis_RightStick_UpDown	Joystick.h	/^	Axis_RightStick_UpDown = 4,$/;"	e	enum:KeyCode_F310
Axis_RightTrigger_OffOn	Joystick.h	/^	Axis_RightTrigger_OffOn = 5,$/;"	e	enum:KeyCode_F310
BW_COLORMAP	gprof2dot.py	/^BW_COLORMAP = Theme($/;"	v
BitmapString	BitmapString.h	/^class BitmapString$/;"	c
BitmapString_H	BitmapString.h	20;"	d
Button	Joystick.h	/^	std::vector<bool> Button;$/;"	m	class:Joystick
ButtonCount	Joystick.h	/^	int ButtonCount;$/;"	m	class:Joystick
Button_A	Joystick.h	/^	Button_A = 0,$/;"	e	enum:KeyCode_F310
Button_B	Joystick.h	/^	Button_B = 1,$/;"	e	enum:KeyCode_F310
Button_BACK	Joystick.h	/^	Button_BACK = 6,$/;"	e	enum:KeyCode_F310
Button_LB	Joystick.h	/^	Button_LB = 4,$/;"	e	enum:KeyCode_F310
Button_LeftStick_Push	Joystick.h	/^	Button_LeftStick_Push = 9,$/;"	e	enum:KeyCode_F310
Button_Logicool	Joystick.h	/^	Button_Logicool = 8,$/;"	e	enum:KeyCode_F310
Button_RB	Joystick.h	/^	Button_RB = 5,$/;"	e	enum:KeyCode_F310
Button_RightStick_Push	Joystick.h	/^	Button_RightStick_Push = 10$/;"	e	enum:KeyCode_F310
Button_START	Joystick.h	/^	Button_START = 7,$/;"	e	enum:KeyCode_F310
Button_X	Joystick.h	/^	Button_X = 2,$/;"	e	enum:KeyCode_F310
Button_Y	Joystick.h	/^	Button_Y = 3,$/;"	e	enum:KeyCode_F310
CALLS	gprof2dot.py	/^CALLS = Event("Calls", 0, add, times)$/;"	v
COMMON_FLAGS	makefile	/^COMMON_FLAGS := -pg -g -O0$/;"	m
CUDA_SRCS	makefile	/^CUDA_SRCS := $(shell ls *.cu)$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS := -Wall -lsqlite3 -L\/usr\/lib\/x86_64-linux-gnu -lglut -lGLU -lGL -I\/usr\/include$/;"	m
CXXONLYFLAGS	makefile	/^CXXONLYFLAGS :=  -fopenmp -std=c++11$/;"	m
Call	gprof2dot.py	/^class Call(Object):$/;"	c
CallgrindParser	gprof2dot.py	/^class CallgrindParser(LineParser):$/;"	c
CountCrossing	CountCrossing.h	/^	CountCrossing():$/;"	f	class:CountCrossing
CountCrossing	CountCrossing.h	/^class CountCrossing$/;"	c
CountCrossing_H_	CountCrossing.h	21;"	d
CountCrossing_host_H_	CountCrossing_cuda.h	21;"	d
Cycle	gprof2dot.py	/^class Cycle(Object):$/;"	c
DBAccessor	DBAccessor.h	/^	DBAccessor(const std::string& dbfilename):dbFileName(dbfilename),db(NULL),stmt(NULL)$/;"	f	class:DBAccessor
DBAccessor	DBAccessor.h	/^class DBAccessor$/;"	c
DBAccessor_H_	DBAccessor.h	20;"	d
DEPS	makefile	/^DEPS := $(SRCS:.cpp=.d) $(CUDA_SRCS:.cu=.d)$/;"	m
Device	Joystick.h	/^	const char* Device;$/;"	m	class:Joystick
DeviceSeq	CountCrossing_cuda.h	/^	DeviceSeq(T* const h, int c):dsc(h,c),host(h)$/;"	f	class:DeviceSeq
DeviceSeq	CountCrossing_cuda.h	/^class DeviceSeq$/;"	c
DeviceSeqConst	CountCrossing_cuda.h	/^	DeviceSeqConst(const T* const h, int c):count(c),host(h),device(NULL)$/;"	f	class:DeviceSeqConst
DeviceSeqConst	CountCrossing_cuda.h	/^class DeviceSeqConst$/;"	c
DotWriter	gprof2dot.py	/^class DotWriter:$/;"	c
EstimateSpec	unittest.cpp	/^void EstimateSpec(int hours, EstimateSpecResult& esr)$/;"	f
EstimateSpecResult	unittest.cpp	/^struct EstimateSpecResult$/;"	s	file:
Event	gprof2dot.py	/^class Event(object):$/;"	c
FIXES_H_	Fixes.h	20;"	d
File	Joystick.h	/^	int File;$/;"	m	class:Joystick
Fixes	Fixes.h	/^	Fixes()$/;"	f	class:Fixes
Fixes	Fixes.h	/^class Fixes$/;"	c
Function	gprof2dot.py	/^class Function(Object):$/;"	c
GCS_H_	GCS.h	21;"	d
GRAY_COLORMAP	gprof2dot.py	/^GRAY_COLORMAP = Theme($/;"	v
GprofParser	gprof2dot.py	/^class GprofParser(Parser):$/;"	c
HProfParser	gprof2dot.py	/^class HProfParser(LineParser):$/;"	c
Joystick	Joystick.h	/^	Joystick():$/;"	f	class:Joystick
Joystick	Joystick.h	/^class Joystick$/;"	c
Joystick_H_	Joystick.h	20;"	d
JsonParser	gprof2dot.py	/^class JsonParser(Parser):$/;"	c
KeyCode_F310	Joystick.h	/^enum KeyCode_F310$/;"	g
LineParser	gprof2dot.py	/^class LineParser(Parser):$/;"	c
LongLat	GCS.h	/^struct LongLat$/;"	s
MAP_H_	Map.h	21;"	d
MULTIPLICATION_SIGN	gprof2dot.py	/^MULTIPLICATION_SIGN = unichr(0xd7)$/;"	v
Map	Map.h	/^	Map(const std::string& map_id):$/;"	f	class:Map
Map	Map.h	/^class Map$/;"	c
MapParallelTest	unittest.cpp	/^bool MapParallelTest()$/;"	f
MapParallelTest2	unittest.cpp	/^bool MapParallelTest2()$/;"	f
MapTransform	MapTransform.h	/^	MapTransform():$/;"	f	class:MapTransform
MapTransform	MapTransform.h	/^class MapTransform$/;"	c
MapTransform_H	MapTransform.h	19;"	d
MapVertex	Map.h	/^struct MapVertex$/;"	s
MapVertexIndex	Map.h	/^struct MapVertexIndex$/;"	s
NVCC	makefile	/^NVCC := nvcc$/;"	m
NVCC_FLAGS	makefile	/^NVCC_FLAGS :=  -Xcompiler -Wall -Xcompiler -fopenmp  -arch=compute_13 -code=sm_13,compute_13$/;"	m
NVCC_LINKS	makefile	/^NVCC_LINKS := -lcuda -lcudart$/;"	m
OBJS	makefile	/^OBJS := $(SRCS:.cpp=.o) $(CUDA_SRCS:.cu=.o)$/;"	m
OBJSTARGET	makefile	/^OBJSTARGET := $(filter-out $(TESTTARGET).o, $(OBJS))$/;"	m
OBJSTEST	makefile	/^OBJSTEST := $(filter-out $(TARGET).o, $(OBJS))$/;"	m
Object	gprof2dot.py	/^class Object(object):$/;"	c
OprofileParser	gprof2dot.py	/^class OprofileParser(LineParser):$/;"	c
PI	ATFViewerMain.h	/^	const double PI;$/;"	m	class:ATFViewerMain
PINK_COLORMAP	gprof2dot.py	/^PINK_COLORMAP = Theme($/;"	v
PRINT_COLORMAP	gprof2dot.py	/^PRINT_COLORMAP = Theme($/;"	v
PYTHON_3	gprof2dot.py	/^    PYTHON_3 = False$/;"	v
PYTHON_3	gprof2dot.py	/^    PYTHON_3 = True$/;"	v
ParseError	gprof2dot.py	/^class ParseError(Exception):$/;"	c
Parser	gprof2dot.py	/^class Parser:$/;"	c
Path	Path.h	/^struct Path$/;"	s
PathPoint	Path.h	/^	PathPoint(double lo,double la, int a, long long t, const std::string ar)$/;"	f	struct:PathPoint
PathPoint	Path.h	/^struct PathPoint$/;"	s
Path_H	Path.h	19;"	d
Paths	Paths.h	/^	Paths():currentPaths(&paths), bufferPaths(&pathsBuffer), drawTimeWidth(600)$/;"	f	class:Paths
Paths	Paths.h	/^class Paths$/;"	c
Paths_H	Paths.h	20;"	d
PerfParser	gprof2dot.py	/^class PerfParser(LineParser):$/;"	c
Position	TimeSeparation.h	/^	enum Position$/;"	g	class:TimeSeparation
Profile	gprof2dot.py	/^class Profile(Object):$/;"	c
PstatsParser	gprof2dot.py	/^class PstatsParser:$/;"	c
SAMPLES	gprof2dot.py	/^SAMPLES = Event("Samples", 0, add, times)$/;"	v
SAMPLES2	gprof2dot.py	/^SAMPLES2 = Event("Samples", 0, add, times)$/;"	v
SRCS	makefile	/^SRCS := $(shell ls *.cpp)$/;"	m
Sector	Sectors.h	/^struct Sector$/;"	s
Sectors	Sectors.h	/^	Sectors():sector(),longLat(),displayAll(true),displaySectorIndex(0)$/;"	f	class:Sectors
Sectors	Sectors.h	/^class Sectors$/;"	c
Sectors_H	Sectors.h	20;"	d
SleepyParser	gprof2dot.py	/^class SleepyParser(Parser):$/;"	c
Struct	gprof2dot.py	/^class Struct:$/;"	c
SubSector	Sectors.h	/^struct SubSector$/;"	s
SysprofParser	gprof2dot.py	/^class SysprofParser(XmlParser):$/;"	c
TARGET	makefile	/^TARGET := $(shell basename `dirname \\`pwd\\``)$/;"	m
TEMPERATURE_COLORMAP	gprof2dot.py	/^TEMPERATURE_COLORMAP = Theme($/;"	v
TESTTARGET	makefile	/^TESTTARGET := unittest$/;"	m
TIME	gprof2dot.py	/^TIME = Event("Time", 0.0, add, lambda x: '(' + str(x) + ')')$/;"	v
TIME_RATIO	gprof2dot.py	/^TIME_RATIO = Event("Time ratio", 0.0, add, lambda x: '(' + percentage(x) + ')')$/;"	v
TOTAL_SAMPLES	gprof2dot.py	/^TOTAL_SAMPLES = Event("Samples", 0, add, times)$/;"	v
TOTAL_TIME	gprof2dot.py	/^TOTAL_TIME = Event("Total time", 0.0, fail)$/;"	v
TOTAL_TIME_RATIO	gprof2dot.py	/^TOTAL_TIME_RATIO = Event("Total time ratio", 0.0, fail, percentage)$/;"	v
TestCountCrossing	TestCountCrossing.h	/^class TestCountCrossing$/;"	c
TestThread	unittest.cpp	/^	TestThread(F func)$/;"	f	class:TestThread
TestThread	unittest.cpp	/^class TestThread$/;"	c	file:
TestThreadFunc	unittest.cpp	/^struct TestThreadFunc$/;"	s	file:
TestThread_MemFunc	unittest.cpp	/^	TestThread_MemFunc(F func, T* const ins):f(func),t(ins)$/;"	f	class:TestThread_MemFunc
TestThread_MemFunc	unittest.cpp	/^class TestThread_MemFunc$/;"	c	file:
TestUseThread	unittest.cpp	/^	TestUseThread():t(&TestUseThread::function1, this)$/;"	f	class:TestUseThread
TestUseThread	unittest.cpp	/^class TestUseThread$/;"	c	file:
Theme	gprof2dot.py	/^class Theme:$/;"	c
TimeManager	TimeManager.h	/^class TimeManager$/;"	c
TimeManager_H_	TimeManager.h	19;"	d
TimeSeparation	TimeSeparation.h	/^	TimeSeparation(time_t _min = 0, time_t _max = 10, time_t _width = 100):min(_min), max(_max), width(_width), timeSequence()$/;"	f	class:TimeSeparation
TimeSeparation	TimeSeparation.h	/^class TimeSeparation$/;"	c
Timer	unittest.cpp	/^	Timer():startTime(0.0),endTime(0.0)$/;"	f	class:Timer
Timer	unittest.cpp	/^class Timer$/;"	c	file:
TrackDataManager	TrackDataManager.h	/^class TrackDataManager$/;"	c
TrackDataManager_H_	TrackDataManager.h	19;"	d
UTIL_H_	Util.h	19;"	d
UndefinedEvent	gprof2dot.py	/^class UndefinedEvent(Exception):$/;"	c
Util	Util.h	/^class Util$/;"	c
XPerfParser	gprof2dot.py	/^class XPerfParser(Parser):$/;"	c
XmlParser	gprof2dot.py	/^class XmlParser(Parser):$/;"	c
XmlToken	gprof2dot.py	/^class XmlToken:$/;"	c
XmlTokenMismatch	gprof2dot.py	/^class XmlTokenMismatch(Exception):$/;"	c
XmlTokenizer	gprof2dot.py	/^class XmlTokenizer:$/;"	c
__author__	gprof2dot.py	/^__author__ = "Jose Fonseca et al"$/;"	v
__contains__	gprof2dot.py	/^    def __contains__(self, event):$/;"	m	class:Object	file:
__eq__	gprof2dot.py	/^    def __eq__(self, other):$/;"	m	class:Event	file:
__eq__	gprof2dot.py	/^    def __eq__(self, other):$/;"	m	class:Object	file:
__getattr__	gprof2dot.py	/^    def __getattr__(self, name):$/;"	m	class:Struct	file:
__getitem__	gprof2dot.py	/^    def __getitem__(self, event):$/;"	m	class:Object	file:
__hash__	gprof2dot.py	/^    def __hash__(self):$/;"	m	class:Event	file:
__hash__	gprof2dot.py	/^    def __hash__(self):$/;"	m	class:Object	file:
__init__	gprof2dot.py	/^    def __init__(self):$/;"	m	class:Cycle
__init__	gprof2dot.py	/^    def __init__(self):$/;"	m	class:Parser
__init__	gprof2dot.py	/^    def __init__(self):$/;"	m	class:Profile
__init__	gprof2dot.py	/^    def __init__(self, $/;"	m	class:Theme
__init__	gprof2dot.py	/^    def __init__(self, *filename):$/;"	m	class:PstatsParser
__init__	gprof2dot.py	/^    def __init__(self, attrs = None):$/;"	m	class:Struct
__init__	gprof2dot.py	/^    def __init__(self, callee_id):$/;"	m	class:Call
__init__	gprof2dot.py	/^    def __init__(self, event):$/;"	m	class:UndefinedEvent
__init__	gprof2dot.py	/^    def __init__(self, events=None):$/;"	m	class:Object
__init__	gprof2dot.py	/^    def __init__(self, expected, found):$/;"	m	class:XmlTokenMismatch
__init__	gprof2dot.py	/^    def __init__(self, filename):$/;"	m	class:SleepyParser
__init__	gprof2dot.py	/^    def __init__(self, fp):$/;"	m	class:AXEParser
__init__	gprof2dot.py	/^    def __init__(self, fp):$/;"	m	class:DotWriter
__init__	gprof2dot.py	/^    def __init__(self, fp):$/;"	m	class:GprofParser
__init__	gprof2dot.py	/^    def __init__(self, fp):$/;"	m	class:XmlParser
__init__	gprof2dot.py	/^    def __init__(self, fp, skip_ws = True):$/;"	m	class:XmlTokenizer
__init__	gprof2dot.py	/^    def __init__(self, id, name):$/;"	m	class:Function
__init__	gprof2dot.py	/^    def __init__(self, infile):$/;"	m	class:CallgrindParser
__init__	gprof2dot.py	/^    def __init__(self, infile):$/;"	m	class:HProfParser
__init__	gprof2dot.py	/^    def __init__(self, infile):$/;"	m	class:OprofileParser
__init__	gprof2dot.py	/^    def __init__(self, infile):$/;"	m	class:PerfParser
__init__	gprof2dot.py	/^    def __init__(self, msg, line):$/;"	m	class:ParseError
__init__	gprof2dot.py	/^    def __init__(self, name, null, aggregator, formatter = str):$/;"	m	class:Event
__init__	gprof2dot.py	/^    def __init__(self, stream):$/;"	m	class:JsonParser
__init__	gprof2dot.py	/^    def __init__(self, stream):$/;"	m	class:LineParser
__init__	gprof2dot.py	/^    def __init__(self, stream):$/;"	m	class:SysprofParser
__init__	gprof2dot.py	/^    def __init__(self, stream):$/;"	m	class:XPerfParser
__init__	gprof2dot.py	/^    def __init__(self, type, name_or_data, attrs = None, line = None, column = None):$/;"	m	class:XmlToken
__repr__	gprof2dot.py	/^    def __repr__(self):$/;"	m	class:Function	file:
__repr__	gprof2dot.py	/^    def __repr__(self):$/;"	m	class:Struct	file:
__setattr__	gprof2dot.py	/^    def __setattr__(self, name, value):$/;"	m	class:Struct	file:
__setitem__	gprof2dot.py	/^    def __setitem__(self, event, value):$/;"	m	class:Object	file:
__str__	gprof2dot.py	/^    def __str__(self):$/;"	m	class:ParseError	file:
__str__	gprof2dot.py	/^    def __str__(self):$/;"	m	class:Struct	file:
__str__	gprof2dot.py	/^    def __str__(self):$/;"	m	class:UndefinedEvent	file:
__str__	gprof2dot.py	/^    def __str__(self):$/;"	m	class:XmlToken	file:
__str__	gprof2dot.py	/^    def __str__(self):$/;"	m	class:XmlTokenMismatch	file:
__subpos_re	gprof2dot.py	/^    __subpos_re = r'(0x[0-9a-fA-F]+|\\d+|\\+\\d+|-\\d+|\\*)'$/;"	v	class:CallgrindParser
_angles_re	gprof2dot.py	/^    _angles_re = re.compile(r'<[^<>]*>')$/;"	v	class:Function
_call_ratios_cycle	gprof2dot.py	/^    def _call_ratios_cycle(self, cycle, function, ranks, call_ratios, visited):$/;"	m	class:Profile
_call_re	gprof2dot.py	/^    _call_re = re.compile(r'^calls=\\s*(\\d+)\\s+((\\d+|\\+\\d+|-\\d+|\\*)\\s+)+$')$/;"	v	class:CallgrindParser
_cg_child_re	gprof2dot.py	/^    _cg_child_re = _cg_parent_re$/;"	v	class:AXEParser
_cg_child_re	gprof2dot.py	/^    _cg_child_re = _cg_parent_re$/;"	v	class:GprofParser
_cg_cycle_header_re	gprof2dot.py	/^    _cg_cycle_header_re = re.compile($/;"	v	class:AXEParser
_cg_cycle_header_re	gprof2dot.py	/^    _cg_cycle_header_re = re.compile($/;"	v	class:GprofParser
_cg_cycle_member_re	gprof2dot.py	/^    _cg_cycle_member_re = re.compile($/;"	v	class:AXEParser
_cg_cycle_member_re	gprof2dot.py	/^    _cg_cycle_member_re = re.compile($/;"	v	class:GprofParser
_cg_footer_re	gprof2dot.py	/^    _cg_footer_re = re.compile(r'^Index\\s+Function\\s*$')$/;"	v	class:AXEParser
_cg_header_re	gprof2dot.py	/^    _cg_header_re = re.compile($/;"	v	class:AXEParser
_cg_header_re	gprof2dot.py	/^    _cg_header_re = re.compile($/;"	v	class:GprofParser
_cg_ignore_re	gprof2dot.py	/^    _cg_ignore_re = re.compile($/;"	v	class:GprofParser
_cg_parent_re	gprof2dot.py	/^    _cg_parent_re = re.compile($/;"	v	class:AXEParser
_cg_parent_re	gprof2dot.py	/^    _cg_parent_re = re.compile($/;"	v	class:GprofParser
_cg_primary_re	gprof2dot.py	/^    _cg_primary_re = re.compile($/;"	v	class:AXEParser
_cg_primary_re	gprof2dot.py	/^    _cg_primary_re = re.compile($/;"	v	class:GprofParser
_cg_sep_re	gprof2dot.py	/^    _cg_sep_re = re.compile(r'^--+$')$/;"	v	class:GprofParser
_const_re	gprof2dot.py	/^    _const_re = re.compile(r'\\s+const$')$/;"	v	class:Function
_cost_re	gprof2dot.py	/^    _cost_re = re.compile(r'^' + $/;"	v	class:CallgrindParser
_detail_keys	gprof2dot.py	/^    _detail_keys = set(('cmd', 'pid', 'thread', 'part'))$/;"	v	class:CallgrindParser
_display	ATFViewerMain.h	/^	static void _display(void)$/;"	f	class:ATFViewerMain
_dump_events	gprof2dot.py	/^    def _dump_events(self, events):$/;"	m	class:Profile
_f	unittest.cpp	/^	static void* _f(void* arg)$/;"	f	class:TestThread	file:
_f	unittest.cpp	/^	static void* _f(void* arg)$/;"	f	class:TestThread_MemFunc	file:
_fields_re	gprof2dot.py	/^    _fields_re = {$/;"	v	class:OprofileParser
_float_re	gprof2dot.py	/^    _float_re = re.compile(r'^\\d+\\.\\d+$')$/;"	v	class:AXEParser
_float_re	gprof2dot.py	/^    _float_re = re.compile(r'^\\d+\\.\\d+$')$/;"	v	class:GprofParser
_hue_to_rgb	gprof2dot.py	/^    def _hue_to_rgb(self, m1, m2, h):$/;"	m	class:Theme
_idle	ATFViewerMain.h	/^	static void _idle(void)$/;"	f	class:ATFViewerMain
_int_re	gprof2dot.py	/^    _int_re = re.compile(r'^\\d+$')$/;"	v	class:AXEParser
_int_re	gprof2dot.py	/^    _int_re = re.compile(r'^\\d+$')$/;"	v	class:GprofParser
_integrate_call	gprof2dot.py	/^    def _integrate_call(self, call, outevent, inevent):$/;"	m	class:Profile
_integrate_cycle	gprof2dot.py	/^    def _integrate_cycle(self, cycle, outevent, inevent):$/;"	m	class:Profile
_integrate_cycle_function	gprof2dot.py	/^    def _integrate_cycle_function(self, cycle, function, partial_ratio, partials, ranks, call_ratios, outevent, inevent):$/;"	m	class:Profile
_integrate_function	gprof2dot.py	/^    def _integrate_function(self, function, outevent, inevent):$/;"	m	class:Profile
_joystickTimer	ATFViewerMain.h	/^	static void _joystickTimer(int value)$/;"	f	class:ATFViewerMain
_key_re	gprof2dot.py	/^    _key_re = re.compile(r'^(\\w+):')$/;"	v	class:CallgrindParser
_keyboard	ATFViewerMain.h	/^	static void _keyboard(unsigned char key, int x, int y)$/;"	f	class:ATFViewerMain
_parenthesis_re	gprof2dot.py	/^    _parenthesis_re = re.compile(r'\\([^()]*\\)')$/;"	v	class:Function
_position_map	gprof2dot.py	/^    _position_map = {$/;"	v	class:CallgrindParser
_position_re	gprof2dot.py	/^    _position_re = re.compile(r'^(?P<position>[cj]?(?:ob|fl|fi|fe|fn))=\\s*(?:\\((?P<id>\\d+)\\))?(?:\\s*(?P<name>.+))?')$/;"	v	class:CallgrindParser
_position_table_map	gprof2dot.py	/^    _position_table_map = {$/;"	v	class:CallgrindParser
_rank_cycle_function	gprof2dot.py	/^    def _rank_cycle_function(self, cycle, function, rank, ranks):$/;"	m	class:Profile
_resize	ATFViewerMain.h	/^	static void _resize(int w, int h)$/;"	f	class:ATFViewerMain
_symbol_re	gprof2dot.py	/^    _symbol_re = re.compile($/;"	v	class:SleepyParser
_tarjan	gprof2dot.py	/^    def _tarjan(self, function, order, stack, orders, lowlinks, visited):$/;"	m	class:Profile
add	gprof2dot.py	/^def add(a, b):$/;"	f
addTrackData	unittest.cpp	/^void addTrackData(vector<id_time>& r, DBAccessor& dba)$/;"	f
add_call	gprof2dot.py	/^    def add_call(self, call):$/;"	m	class:Function
add_cycle	gprof2dot.py	/^    def add_cycle(self, cycle):$/;"	m	class:Profile
add_entry	gprof2dot.py	/^    def add_entry(self, callers, function, callees):$/;"	m	class:OprofileParser
add_function	gprof2dot.py	/^    def add_function(self, function):$/;"	m	class:Cycle
add_function	gprof2dot.py	/^    def add_function(self, function):$/;"	m	class:Profile
aggregate	gprof2dot.py	/^    def aggregate(self, event):$/;"	m	class:Profile
aggregate	gprof2dot.py	/^    def aggregate(self, val1, val2):$/;"	m	class:Event
altitude	Path.h	/^	int altitude;$/;"	m	struct:PathPoint
arrival	Path.h	/^	std::string arrival;$/;"	m	struct:PathPoint
atomicFloatAdd	CountCrossing_cuda.h	/^inline void atomicFloatAdd(float *address, float val)$/;"	f
attr	gprof2dot.py	/^    def attr(self, what, **attrs):$/;"	m	class:DotWriter
attr_list	gprof2dot.py	/^    def attr_list(self, attrs):$/;"	m	class:DotWriter
basestring	gprof2dot.py	/^    basestring = str  # No class basestring in Python 3$/;"	v
begin	DBAccessor.h	/^	void begin()$/;"	f	class:DBAccessor
begin_graph	gprof2dot.py	/^    def begin_graph(self):$/;"	m	class:DotWriter
bindDouble	DBAccessor.h	/^	void bindDouble(int i, double d)$/;"	f	class:DBAccessor
bindInt	DBAccessor.h	/^	void bindInt(int i, int d)$/;"	f	class:DBAccessor
bindLongLong	DBAccessor.h	/^	void bindLongLong(int i, long long d)$/;"	f	class:DBAccessor
bindString	DBAccessor.h	/^	void bindString(int i, const std::string& s)$/;"	f	class:DBAccessor
bufferPaths	Paths.h	/^	std::vector<Path>* bufferPaths;$/;"	m	class:Paths
build_profile	gprof2dot.py	/^    def build_profile(self, objects, nodes):$/;"	m	class:SysprofParser
call_ratios	gprof2dot.py	/^    def call_ratios(self, event):$/;"	m	class:Profile
call_re	gprof2dot.py	/^    call_re = re.compile(r'^\\s+(?P<address>[0-9a-fA-F]+)\\s+(?P<symbol>.*)\\s+\\((?P<module>[^)]*)\\)$')$/;"	v	class:PerfParser
camera_phi	ATFViewerMain.h	/^	GLdouble camera_phi;$/;"	m	class:ATFViewerMain
camera_r	ATFViewerMain.h	/^	GLdouble camera_r;$/;"	m	class:ATFViewerMain
camera_target	ATFViewerMain.h	/^	GLdouble camera_target[3];$/;"	m	class:ATFViewerMain
camera_theta	ATFViewerMain.h	/^	GLdouble camera_theta;$/;"	m	class:ATFViewerMain
caption	Sectors.h	/^	std::string caption;$/;"	m	struct:Sector
centerOffsetLat	MapTransform.h	/^	double centerOffsetLat;$/;"	m	class:MapTransform
centerOffsetLong	MapTransform.h	/^	double centerOffsetLong;$/;"	m	class:MapTransform
character_data	gprof2dot.py	/^    def character_data(self, strip = True):$/;"	m	class:XmlParser
color	gprof2dot.py	/^    def color(self, rgb):$/;"	m	class:DotWriter
color	gprof2dot.py	/^    def color(self, weight):$/;"	m	class:Theme
commit	DBAccessor.h	/^	void commit()$/;"	f	class:DBAccessor
comp_path	unittest.cpp	/^bool comp_path(const Path& p0, const Path& p1)$/;"	f
comp_path_time	unittest.cpp	/^bool comp_path_time(const Path& p0, const Path& p1)$/;"	f
compat_iteritems	gprof2dot.py	/^    def compat_iteritems(x): return x.items()  # No iteritems() in Python 3$/;"	f
compat_iteritems	gprof2dot.py	/^    def compat_iteritems(x): return x.iteritems()$/;"	f
compat_itervalues	gprof2dot.py	/^    def compat_itervalues(x): return x.itervalues()$/;"	f
compat_itervalues	gprof2dot.py	/^    def compat_itervalues(x): return x.values()  # No itervalues() in Python 3$/;"	f
compat_keys	gprof2dot.py	/^    def compat_keys(x): return list(x.keys())  # keys() is a generator in Python 3$/;"	f
compat_keys	gprof2dot.py	/^    def compat_keys(x): return x.keys()$/;"	f
consume	gprof2dot.py	/^    def consume(self):$/;"	m	class:LineParser
consume	gprof2dot.py	/^    def consume(self):$/;"	m	class:XmlParser
count	CountCrossing_cuda.h	/^	int count;$/;"	m	class:DeviceSeqConst
countCrossing	cudatestfunc.h	/^void countCrossing$/;"	f
countCrossingByDirection	cudatestfunc.h	/^void countCrossingByDirection$/;"	f
countCrossingByDirectionDevice	CountCrossing_cuda.h	/^void countCrossingByDirectionDevice$/;"	f
countCrossingByDirectionHost	CountCrossing_cuda.h	/^void countCrossingByDirectionHost$/;"	f
countCrossingDevice	CountCrossing_cuda.h	/^void countCrossingDevice$/;"	f
countCrossingDeviceTemp	CountCrossing_cuda.h	/^struct countCrossingDeviceTemp$/;"	s
countCrossingDeviceTemp	CountCrossing_cuda.h	/^struct countCrossingDeviceTemp<D, 1>$/;"	s
countCrossingHost	CountCrossing_cuda.h	/^void countCrossingHost$/;"	f
countCrossingHostTemp	CountCrossing_cuda.h	/^struct countCrossingHostTemp$/;"	s
countCrossingHostTemp	CountCrossing_cuda.h	/^struct countCrossingHostTemp<D, 1>$/;"	s
countCrossingSequence	cudatestfunc.h	/^void countCrossingSequence$/;"	f
countCrossingSequenceDeviceImple	CountCrossing_cuda.h	/^void countCrossingSequenceDeviceImple$/;"	f
countCrossingSequenceDeviceKernel	CountCrossing_cuda.h	/^void countCrossingSequenceDeviceKernel$/;"	f
countCrossingSequenceHostImple	CountCrossing_cuda.h	/^void countCrossingSequenceHostImple$/;"	f
countCrossingTemp	cudatestfunc.h	/^struct countCrossingTemp$/;"	s
countCrossingTemp	cudatestfunc.h	/^struct countCrossingTemp<D, 1>$/;"	s
countCrossingTest_04D2Seqence	unittest.cpp	/^bool countCrossingTest_04D2Seqence()$/;"	f
countCrossingTest_05Class	unittest.cpp	/^bool countCrossingTest_05Class()$/;"	f
countCrossingTest_06D4EstimateSpec	unittest.cpp	/^bool countCrossingTest_06D4EstimateSpec()$/;"	f
counter	CountCrossing.h	/^	std::vector<float> counter;$/;"	m	class:CountCrossing
counterCount	unittest.cpp	/^	int counterCount;$/;"	m	struct:EstimateSpecResult	file:
counter_device	CountCrossing.h	/^	std::vector<float> counter_device;$/;"	m	class:CountCrossing
cudatestfunc_H_	cudatestfunc.h	20;"	d
cudatestfunctest	unittest.cpp	/^void cudatestfunctest()$/;"	f
current	TimeSeparation.h	/^		current,$/;"	e	enum:TimeSeparation::Position
currentIndex	TimeSeparation.h	/^	unsigned int currentIndex;$/;"	m	class:TimeSeparation
currentPaths	Paths.h	/^	std::vector<Path>* currentPaths;$/;"	m	class:Paths
currentTimeInterval	ATFViewerMain.h	/^	int currentTimeInterval;$/;"	m	class:ATFViewerMain
db	DBAccessor.h	/^	sqlite3 *db;$/;"	m	class:DBAccessor
dbFileName	DBAccessor.h	/^	std::string dbFileName;$/;"	m	class:DBAccessor
device	CountCrossing_cuda.h	/^	T* device;$/;"	m	class:DeviceSeqConst
deviceTime	unittest.cpp	/^	double deviceTime;$/;"	m	struct:EstimateSpecResult	file:
disp_X	ATFViewerMain.h	/^	int disp_X;$/;"	m	class:ATFViewerMain
disp_Y	ATFViewerMain.h	/^	int disp_Y;$/;"	m	class:ATFViewerMain
disp_Z	ATFViewerMain.h	/^	int disp_Z;$/;"	m	class:ATFViewerMain
disp_buttonMask	ATFViewerMain.h	/^	unsigned int disp_buttonMask;$/;"	m	class:ATFViewerMain
display	ATFViewerMain.cpp	/^void ATFViewerMain::display(void)$/;"	f	class:ATFViewerMain
display	Fixes.h	/^	void display()$/;"	f	class:Fixes
display	Map.cpp	/^void Map::display(void)$/;"	f	class:Map
display	Paths.cpp	/^int Paths::display(time_t now)$/;"	f	class:Paths
display	Sectors.cpp	/^void Sectors::display(void)$/;"	f	class:Sectors
displayAll	Sectors.h	/^	bool displayAll;$/;"	m	class:Sectors
displaySector	Sectors.cpp	/^void Sectors::displaySector(Sector& sector)$/;"	f	class:Sectors
displaySectorIndex	Sectors.h	/^	unsigned int displaySectorIndex;$/;"	m	class:Sectors
displaySubSector	Sectors.cpp	/^void Sectors::displaySubSector(const std::string& sector_name, SubSector& ss)$/;"	f	class:Sectors
drawPath	Paths.cpp	/^void Paths::drawPath(PathPoint& p, time_t now)$/;"	f	class:Paths
drawPathLine	Paths.cpp	/^void Paths::drawPathLine(Path& p, time_t past_time, time_t now)$/;"	f	class:Paths
drawString	BitmapString.h	/^	static void drawString(const char* str, void* font = GLUT_BITMAP_TIMES_ROMAN_10)$/;"	f	class:BitmapString
drawString	BitmapString.h	/^	static void drawString(double x, double y, const char* str, void* font = GLUT_BITMAP_TIMES_ROMAN_10)$/;"	f	class:BitmapString
drawString	BitmapString.h	/^	static void drawString(double x, double y, double z, const char* str, void* font = GLUT_BITMAP_TIMES_ROMAN_10)$/;"	f	class:BitmapString
drawTimeWidth	Paths.h	/^	const unsigned int drawTimeWidth;$/;"	m	class:Paths
dsc	CountCrossing_cuda.h	/^	DeviceSeqConst<T> dsc;$/;"	m	class:DeviceSeq
dump	gprof2dot.py	/^    def dump(self):$/;"	m	class:Profile
edge	gprof2dot.py	/^    def edge(self, src, dst, **attrs):$/;"	m	class:DotWriter
edge_arrowsize	gprof2dot.py	/^    def edge_arrowsize(self, weight):$/;"	m	class:Theme
edge_color	gprof2dot.py	/^    def edge_color(self, weight):$/;"	m	class:Theme
edge_fontsize	gprof2dot.py	/^    def edge_fontsize(self, weight):$/;"	m	class:Theme
edge_penwidth	gprof2dot.py	/^    def edge_penwidth(self, weight):$/;"	m	class:Theme
element_end	gprof2dot.py	/^    def element_end(self, name):$/;"	m	class:XmlParser
element_start	gprof2dot.py	/^    def element_start(self, name):$/;"	m	class:XmlParser
end	CountCrossing.h	/^	time_t end;$/;"	m	class:CountCrossing
end	unittest.cpp	/^	void end()$/;"	f	class:Timer
endTime	unittest.cpp	/^	double endTime;$/;"	m	class:Timer	file:
end_graph	gprof2dot.py	/^    def end_graph(self):$/;"	m	class:DotWriter
eof	gprof2dot.py	/^    def eof(self):$/;"	m	class:LineParser
escape	gprof2dot.py	/^    def escape(self, s):$/;"	m	class:DotWriter
exec	unittest.cpp	/^	void exec()$/;"	f	class:TestUseThread
execMainLoop	ATFViewerMain.h	/^	void execMainLoop(void)$/;"	f	class:ATFViewerMain
execQuery	DBAccessor.h	/^	std::string execQuery(const std::string& query)$/;"	f	class:DBAccessor
f	unittest.cpp	/^	F f;$/;"	m	class:TestThread	file:
f	unittest.cpp	/^	F f;$/;"	m	class:TestThread_MemFunc	file:
fail	gprof2dot.py	/^def fail(a, b):$/;"	f
find_cycles	gprof2dot.py	/^    def find_cycles(self):$/;"	m	class:Profile
finish_character_data	gprof2dot.py	/^    def finish_character_data(self):$/;"	m	class:XmlTokenizer
fixes	ATFViewerMain.h	/^	Fixes fixes;$/;"	m	class:ATFViewerMain
float2int	gprof2dot.py	/^        def float2int(f):$/;"	f	function:DotWriter.color
fontcolor	gprof2dot.py	/^    fontcolor = "black",$/;"	v
fontsize	gprof2dot.py	/^    def fontsize(self, weight):$/;"	m	class:Theme
format	gprof2dot.py	/^    def format(self, val):$/;"	m	class:Event
formats	gprof2dot.py	/^formats = {$/;"	v
function1	unittest.cpp	/^	void function1()$/;"	f	class:TestUseThread	file:
functype	unittest.cpp	/^	typedef void (TestUseThread::*functype)();$/;"	t	class:TestUseThread	file:
futureMakeBuffer	Paths.h	/^	std::future<void> futureMakeBuffer;$/;"	m	class:Paths
gamma	gprof2dot.py	/^    gamma = 1.0$/;"	v
getAllTrackData	unittest.cpp	/^void getAllTrackData(void)$/;"	f
getAllTrackDataReserve	unittest.cpp	/^void getAllTrackDataReserve(void)$/;"	f
getAxisState	Joystick.h	/^	int getAxisState(int i)$/;"	f	class:Joystick
getButtonState	Joystick.h	/^	bool getButtonState(int i)$/;"	f	class:Joystick
getCellIndexFromPoint	CountCrossing_cuda.h	/^void getCellIndexFromPoint$/;"	f
getCenterOffsetLat	MapTransform.h	/^	GLdouble getCenterOffsetLat(void)$/;"	f	class:MapTransform
getCenterOffsetLong	MapTransform.h	/^	GLdouble getCenterOffsetLong(void)$/;"	f	class:MapTransform
getColumn	TrackDataManager.h	/^	void getColumn(DBAccessor& dba, std::string& id, double& lo, double& la, int& a, long long& t, std::string& ar)$/;"	f	class:TrackDataManager
getColumnDouble	DBAccessor.h	/^	double getColumnDouble(int i)$/;"	f	class:DBAccessor
getColumnInt	DBAccessor.h	/^	int getColumnInt(int i)$/;"	f	class:DBAccessor
getColumnLongLong	DBAccessor.h	/^	long long getColumnLongLong(int i)$/;"	f	class:DBAccessor
getColumnString	DBAccessor.h	/^	std::string getColumnString(int i)$/;"	f	class:DBAccessor
getCount	CountCrossing_cuda.h	/^	int getCount()$/;"	f	class:DeviceSeqConst
getCounter	CountCrossing.h	/^	const std::vector<float>& getCounter()$/;"	f	class:CountCrossing
getCounterDevice	CountCrossing.h	/^	const std::vector<float>& getCounterDevice()$/;"	f	class:CountCrossing
getCounterIndex	CountCrossing_cuda.h	/^int getCounterIndex$/;"	f
getCounterValue	CountCrossing.h	/^	float getCounterValue(int d, int s, int cx, int cy, int cz, int ct)$/;"	f	class:CountCrossing
getCrossingPoint	CountCrossing_cuda.h	/^float*  getCrossingPoint$/;"	f
getCrossingPoint	cudatestfunc.h	/^float*  getCrossingPoint$/;"	f
getDeviceAddress	CountCrossing_cuda.h	/^	T* getDeviceAddress()$/;"	f	class:DeviceSeq
getDeviceAddress	CountCrossing_cuda.h	/^	T* getDeviceAddress()$/;"	f	class:DeviceSeqConst
getEnd	CountCrossing.h	/^	time_t getEnd()$/;"	f	class:CountCrossing
getFeetFromFL	Util.h	/^	static int getFeetFromFL(std::string fl)$/;"	f	class:Util
getFunctionId	gprof2dot.py	/^    def getFunctionId(self, funcName):$/;"	m	class:Profile
getIndexCount	CountCrossing.h	/^	int getIndexCount(int i)$/;"	f	class:CountCrossing
getInsideLongLat	Sectors.cpp	/^LongLat Sectors::getInsideLongLat(LongLat& xi, LongLat& xj, LongLat& xk, double distance)$/;"	f	class:Sectors
getInstance	ATFViewerMain.h	/^	inline static ATFViewerMain& getInstance()$/;"	f	class:ATFViewerMain
getIntervalStatus	TimeSeparation.h	/^	void getIntervalStatus(Position p,time_t& start, time_t& end)$/;"	f	class:TimeSeparation
getLatitudeFromDMS	Util.h	/^	static double getLatitudeFromDMS(std::string lat_dms)$/;"	f	class:Util
getLongitudeFromDMS	Util.h	/^	static double getLongitudeFromDMS(std::string long_dms)$/;"	f	class:Util
getNextIndex	TimeSeparation.h	/^	unsigned int getNextIndex()$/;"	f	class:TimeSeparation
getNextIndex	TimeSeparation.h	/^	unsigned int getNextIndex(unsigned int i)$/;"	f	class:TimeSeparation
getNowPoint	Paths.cpp	/^PathPoint Paths::getNowPoint(PathPoint& from, PathPoint& to, time_t time)$/;"	f	class:Paths
getScale	MapTransform.h	/^	GLdouble getScale(void)$/;"	f	class:MapTransform
getSectors	Sectors.cpp	/^void Sectors::getSectors(DBAccessor& dba)$/;"	f	class:Sectors
getSettings	Map.cpp	/^void Map::getSettings(DBAccessor& dba,std::string& map_id, std::string& texture_file_name)$/;"	f	class:Map
getStart	CountCrossing.h	/^	time_t getStart()$/;"	f	class:CountCrossing
getSubSectorVertex	Sectors.cpp	/^void Sectors::getSubSectorVertex(DBAccessor& dba, Sector& s, int subsector_index)$/;"	f	class:Sectors
getSubSectors	Sectors.cpp	/^void Sectors::getSubSectors(DBAccessor& dba, Sector& s)$/;"	f	class:Sectors
getTime	unittest.cpp	/^	double getTime()$/;"	f	class:Timer
getTotalCellIndex	CountCrossing_cuda.h	/^int getTotalCellIndex$/;"	f
getTotalCellIndex	cudatestfunc.h	/^int getTotalCellIndex$/;"	f
getTrackDataFromDB	TrackDataManager.h	/^	void getTrackDataFromDB(std::vector<Path>& p,$/;"	f	class:TrackDataManager
getTrackDataFromDBParallel	TrackDataManager.h	/^	void getTrackDataFromDBParallel$/;"	f	class:TrackDataManager
getTrackDataFromDBToMap	TrackDataManager.h	/^	void getTrackDataFromDBToMap(std::map<std::string, Path>& p, time_t start,time_t end)$/;"	f	class:TrackDataManager
getTrackDataFromDBToMapParallel	TrackDataManager.h	/^	void getTrackDataFromDBToMapParallel(std::vector<std::map<std::string, Path> >& p, time_t start,time_t end)$/;"	f	class:TrackDataManager
getTrackDataFromDBToMapWithDay	TrackDataManager.h	/^	void getTrackDataFromDBToMapWithDay$/;"	f	class:TrackDataManager
getTrackDataFromDBWithDay	TrackDataManager.h	/^	void getTrackDataFromDBWithDay(std::vector<Path>& paths,$/;"	f	class:TrackDataManager
getVertex	Map.cpp	/^void Map::getVertex(DBAccessor& dba,std::string& map_id)$/;"	f	class:Map
getVertexCount	CountCrossing.h	/^	int getVertexCount()$/;"	f	class:CountCrossing
getVertexIndex	Map.cpp	/^void Map::getVertexIndex(DBAccessor& dba,std::string& map_id)$/;"	f	class:Map
get_call	gprof2dot.py	/^    def get_call(self, callee_id):$/;"	m	class:Function
get_callee	gprof2dot.py	/^    def get_callee(self):$/;"	m	class:CallgrindParser
get_function	gprof2dot.py	/^    def get_function(self):$/;"	m	class:CallgrindParser
get_function	gprof2dot.py	/^    def get_function(self, key):$/;"	m	class:PstatsParser
get_function	gprof2dot.py	/^    def get_function(self, process, symbol):$/;"	m	class:XPerfParser
get_function_name	gprof2dot.py	/^    def get_function_name(self, key):$/;"	m	class:PstatsParser
graph	gprof2dot.py	/^    def graph(self, profile, theme):$/;"	m	class:DotWriter
graph_bgcolor	gprof2dot.py	/^    def graph_bgcolor(self):$/;"	m	class:Theme
graph_fontcolor	gprof2dot.py	/^    def graph_fontcolor(self):$/;"	m	class:Theme
graph_fontname	gprof2dot.py	/^    def graph_fontname(self):$/;"	m	class:Theme
graph_fontsize	gprof2dot.py	/^    def graph_fontsize(self):$/;"	m	class:Theme
handle_character_data	gprof2dot.py	/^    def handle_character_data(self, data):$/;"	m	class:XmlTokenizer
handle_element_end	gprof2dot.py	/^    def handle_element_end(self, name):$/;"	m	class:XmlTokenizer
handle_element_start	gprof2dot.py	/^    def handle_element_start(self, name, attributes):$/;"	m	class:XmlTokenizer
hasNegativeElement	CountCrossing_cuda.h	/^bool hasNegativeElement$/;"	f
host	CountCrossing_cuda.h	/^	T* const host;$/;"	m	class:DeviceSeq
host	CountCrossing_cuda.h	/^	const T* const host;$/;"	m	class:DeviceSeqConst
hostTime	unittest.cpp	/^	double hostTime;$/;"	m	struct:EstimateSpecResult	file:
hsl_to_rgb	gprof2dot.py	/^    def hsl_to_rgb(self, h, s, l):$/;"	m	class:Theme
id	Path.h	/^	std::string id;$/;"	m	struct:Path
id	gprof2dot.py	/^    def id(self, id):$/;"	m	class:DotWriter
id	unittest.cpp	/^	string id;$/;"	m	struct:id_time	file:
id_time	unittest.cpp	/^struct id_time$/;"	s	file:
idle	ATFViewerMain.h	/^	void idle(void)$/;"	f	class:ATFViewerMain
imple	CountCrossing_cuda.h	/^	static void imple$/;"	f	struct:countCrossingDeviceTemp
imple	CountCrossing_cuda.h	/^	static void imple$/;"	f	struct:countCrossingHostTemp
imple	cudatestfunc.h	/^	static void imple$/;"	f	struct:countCrossingTemp
inCurrentInterval	TimeSeparation.h	/^	bool inCurrentInterval(time_t t)$/;"	f	class:TimeSeparation
inNextInterval	TimeSeparation.h	/^	bool inNextInterval(time_t t)$/;"	f	class:TimeSeparation
inTheInterval	TimeSeparation.h	/^	bool inTheInterval(unsigned int i, time_t t)$/;"	f	class:TimeSeparation
includesMaximumAltitude	Sectors.h	/^	bool includesMaximumAltitude;$/;"	m	struct:SubSector
includesMinimumAltitude	Sectors.h	/^	bool includesMinimumAltitude;$/;"	m	struct:SubSector
indexCount	CountCrossing.h	/^	std::vector<int> indexCount;$/;"	m	class:CountCrossing
init	ATFViewerMain.h	/^	void init(void)$/;"	f	class:ATFViewerMain
init	Fixes.cpp	/^void Fixes::init(DBAccessor& dba)$/;"	f	class:Fixes
init	Map.cpp	/^void Map::init(DBAccessor& dba)$/;"	f	class:Map
init	Sectors.h	/^	void init(DBAccessor& dba)$/;"	f	class:Sectors
initPathPoint	Paths.cpp	/^void Paths::initPathPoint(time_t time_min, time_t time_max)$/;"	f	class:Paths
initScene	ATFViewerMain.cpp	/^void ATFViewerMain::initScene(void)$/;"	f	class:ATFViewerMain
initTexture	Map.cpp	/^void Map::initTexture(std::string& texture_file_name)$/;"	f	class:Map
initTime	unittest.cpp	/^	double initTime;$/;"	m	struct:EstimateSpecResult	file:
initTimeSequence	TimeSeparation.h	/^	void initTimeSequence()$/;"	f	class:TimeSeparation
insideLongLatIndex	Sectors.h	/^	std::vector<int> insideLongLatIndex;$/;"	m	struct:SubSector
integrate	gprof2dot.py	/^    def integrate(self, outevent, inevent):$/;"	m	class:Profile
interval	CountCrossing.h	/^	std::vector<float> interval;$/;"	m	class:CountCrossing
isCellIndexOutOfRange	CountCrossing_cuda.h	/^bool isCellIndexOutOfRange$/;"	f
isClockwise	GCS.cpp	/^bool isClockwise(std::vector<int>& longLatIndex, std::vector<LongLat>& longLat)$/;"	f
isEnable	Joystick.h	/^	bool isEnable()$/;"	f	class:Joystick
join	unittest.cpp	/^	void join()$/;"	f	class:TestThread
join	unittest.cpp	/^	void join()$/;"	f	class:TestThread_MemFunc
joystick	ATFViewerMain.h	/^	Joystick joystick;$/;"	m	class:ATFViewerMain
joystickTimer	ATFViewerMain.cpp	/^void ATFViewerMain::joystickTimer(int value)$/;"	f	class:ATFViewerMain
joystickTimerId	ATFViewerMain.h	/^	const int joystickTimerId;$/;"	m	class:ATFViewerMain
keyboard	ATFViewerMain.cpp	/^void ATFViewerMain::keyboard(unsigned char key, int x, int y)$/;"	f	class:ATFViewerMain
latitude	Fixes.h	/^	std::vector<double> latitude;$/;"	m	class:Fixes
latitude	GCS.h	/^	double latitude;$/;"	m	struct:LongLat
latitude	Map.h	/^	double latitude;$/;"	m	struct:MapVertex
latitude	Path.h	/^	double latitude;$/;"	m	struct:PathPoint
longLat	Sectors.h	/^	std::vector<LongLat> longLat;$/;"	m	class:Sectors
longLatIndex	Sectors.h	/^	std::vector<int> longLatIndex;$/;"	m	struct:SubSector
longitude	Fixes.h	/^	std::vector<double> longitude;$/;"	m	class:Fixes
longitude	GCS.h	/^	double longitude;$/;"	m	struct:LongLat
longitude	Map.h	/^	double longitude;$/;"	m	struct:MapVertex
longitude	Path.h	/^	double longitude;$/;"	m	struct:PathPoint
lookahead	gprof2dot.py	/^    def lookahead(self):$/;"	m	class:LineParser
main	ATFViewer.cpp	/^int main(int argc, char const* argv[])$/;"	f
main	gprof2dot.py	/^def main():$/;"	f
main	unittest.cpp	/^int main(int argc, char const* argv[])$/;"	f
makeDBFileName	TrackDataManager.h	/^	void makeDBFileName(time_t day, std::string& dbfilenamestr)$/;"	f	class:TrackDataManager
makePathsBuffer	Paths.cpp	/^void Paths::makePathsBuffer(std::vector<Path>& p, TimeSeparation::Position position)$/;"	f	class:Paths
make_function	gprof2dot.py	/^    def make_function(self, module, filename, name):$/;"	m	class:CallgrindParser
map	ATFViewerMain.h	/^	std::vector<Map> map;$/;"	m	class:ATFViewerMain
mapId	Map.h	/^	std::string mapId;$/;"	m	class:Map
mapTransform	ATFViewerMain.h	/^	MapTransform mapTransform;$/;"	m	class:ATFViewerMain
mapVertex	Map.h	/^	std::vector<MapVertex> mapVertex;$/;"	m	class:Map
mapVertexIndex	Map.h	/^	std::vector<std::vector<MapVertexIndex> > mapVertexIndex;$/;"	m	class:Map
match_element_end	gprof2dot.py	/^    def match_element_end(self, name):$/;"	m	class:XmlParser
match_element_start	gprof2dot.py	/^    def match_element_start(self, name):$/;"	m	class:XmlParser
match_header	gprof2dot.py	/^    def match_header(self):$/;"	m	class:OprofileParser
match_primary	gprof2dot.py	/^    def match_primary(self):$/;"	m	class:OprofileParser
match_secondary	gprof2dot.py	/^    def match_secondary(self):$/;"	m	class:OprofileParser
match_separator	gprof2dot.py	/^    def match_separator(self):$/;"	m	class:OprofileParser
max	TimeSeparation.h	/^	time_t max;$/;"	m	class:TimeSeparation
maxcolor	gprof2dot.py	/^    maxcolor = (0.0, 0.0, 0.0), # black$/;"	v
maxcolor	gprof2dot.py	/^    maxcolor = (0.0, 1.0, 0.5), # satured red$/;"	v
maxfontsize	gprof2dot.py	/^    maxfontsize = 24.0,$/;"	v
maxfontsize	gprof2dot.py	/^    maxfontsize = 30.0,$/;"	v
maximumAltitude	Sectors.h	/^	int maximumAltitude;$/;"	m	struct:SubSector
maxpenwidth	gprof2dot.py	/^    maxpenwidth = 8.0,$/;"	v
memcpyDeviceToHost	CountCrossing_cuda.h	/^	void memcpyDeviceToHost(void)$/;"	f	class:DeviceSeq
memcpyHostToDevice	CountCrossing_cuda.h	/^	void memcpyHostToDevice(void)$/;"	f	class:DeviceSeq
memcpyHostToDevice	CountCrossing_cuda.h	/^	void memcpyHostToDevice(void)$/;"	f	class:DeviceSeqConst
min	TimeSeparation.h	/^	time_t min;$/;"	m	class:TimeSeparation
mincolor	gprof2dot.py	/^    mincolor = (0.0, 0.0, 0.0), # black$/;"	v
mincolor	gprof2dot.py	/^    mincolor = (0.0, 0.0, 0.85), # light gray$/;"	v
mincolor	gprof2dot.py	/^    mincolor = (0.0, 1.0, 0.90), # pink$/;"	v
mincolor	gprof2dot.py	/^    mincolor = (2.0\/3.0, 0.80, 0.25), # dark blue$/;"	v
minfontsize	gprof2dot.py	/^    minfontsize = 18.0,$/;"	v
minfontsize	gprof2dot.py	/^    minfontsize = 8.0,$/;"	v
minimumAltitude	Sectors.h	/^	int minimumAltitude;$/;"	m	struct:SubSector
minpenwidth	gprof2dot.py	/^    minpenwidth = 0.1,$/;"	v
mktimeFromInt	CountCrossing.h	/^	time_t mktimeFromInt(int year,int month,int day,int hour = 0,int min = 0, int sec = 0)$/;"	f	class:CountCrossing
multipleInput	gprof2dot.py	/^    multipleInput = False$/;"	v	class:Parser
multipleInput	gprof2dot.py	/^    multipleInput = True$/;"	v	class:PstatsParser
myfunc	unittest.cpp	/^typedef void (*myfunc)(void);$/;"	t	file:
name	Fixes.h	/^	std::vector<std::string> name;$/;"	m	class:Fixes
naturalJoin	gprof2dot.py	/^def naturalJoin(values):$/;"	f
next	TimeSeparation.h	/^		next$/;"	e	enum:TimeSeparation::Position
next	gprof2dot.py	/^    def next(self):$/;"	m	class:XmlTokenizer
nextDayTime	TimeManager.h	/^	static time_t nextDayTime(time_t t)$/;"	f	class:TimeManager
node	gprof2dot.py	/^    def node(self, node, **attrs):$/;"	m	class:DotWriter
node_bgcolor	gprof2dot.py	/^    def node_bgcolor(self, weight):$/;"	m	class:Theme
node_fgcolor	gprof2dot.py	/^    def node_fgcolor(self, weight):$/;"	m	class:Theme
node_fontsize	gprof2dot.py	/^    def node_fontsize(self, weight):$/;"	m	class:Theme
node_style	gprof2dot.py	/^    def node_style(self):$/;"	m	class:Theme
nodestyle	gprof2dot.py	/^    nodestyle = "solid",$/;"	v
now	ATFViewerMain.h	/^	time_t now;$/;"	m	class:ATFViewerMain
now_index	Path.h	/^	int now_index;$/;"	m	struct:Path
nowstring	unittest.cpp	/^string nowstring()$/;"	f
null	gprof2dot.py	/^    def null(self):$/;"	m	class:Event
openEntry	gprof2dot.py	/^    def openEntry(self, name):$/;"	m	class:SleepyParser
openMPTest	unittest.cpp	/^bool openMPTest()$/;"	f
operator !=	Path.h	/^	bool operator !=(const Path& p) const$/;"	f	struct:Path
operator !=	Path.h	/^	bool operator !=(const PathPoint& p) const$/;"	f	struct:PathPoint
operator !=	Path.h	/^	bool operator !=(const std::string& s) const$/;"	f	struct:Path
operator ()	unittest.cpp	/^	void operator ()()$/;"	f	struct:TestThreadFunc
operator ==	Path.h	/^	bool operator ==(const Path& p) const$/;"	f	struct:Path
operator ==	Path.h	/^	bool operator ==(const PathPoint& p) const$/;"	f	struct:PathPoint
operator ==	Path.h	/^	bool operator ==(const std::string& s) const$/;"	f	struct:Path
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:AXEParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:CallgrindParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:GprofParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:HProfParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:JsonParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:OprofileParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:Parser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:PerfParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:PstatsParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:SleepyParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:SysprofParser
parse	gprof2dot.py	/^    def parse(self):$/;"	m	class:XPerfParser
parse_association_spec	gprof2dot.py	/^    def parse_association_spec(self):$/;"	m	class:CallgrindParser
parse_body_line	gprof2dot.py	/^    def parse_body_line(self):$/;"	m	class:CallgrindParser
parse_call	gprof2dot.py	/^    def parse_call(self):$/;"	m	class:PerfParser
parse_callchain	gprof2dot.py	/^    def parse_callchain(self):$/;"	m	class:PerfParser
parse_callstacks	gprof2dot.py	/^    def parse_callstacks(self):$/;"	m	class:SleepyParser
parse_cg	gprof2dot.py	/^    def parse_cg(self):$/;"	m	class:AXEParser
parse_cg	gprof2dot.py	/^    def parse_cg(self):$/;"	m	class:GprofParser
parse_cg_entry	gprof2dot.py	/^    def parse_cg_entry(self, lines):$/;"	m	class:AXEParser
parse_cg_entry	gprof2dot.py	/^    def parse_cg_entry(self, lines):$/;"	m	class:GprofParser
parse_comment	gprof2dot.py	/^    def parse_comment(self):$/;"	m	class:CallgrindParser
parse_cost_line	gprof2dot.py	/^    def parse_cost_line(self, calls=None):$/;"	m	class:CallgrindParser
parse_cost_line_def	gprof2dot.py	/^    def parse_cost_line_def(self):$/;"	m	class:CallgrindParser
parse_cost_summary	gprof2dot.py	/^    def parse_cost_summary(self):$/;"	m	class:CallgrindParser
parse_cycle_entry	gprof2dot.py	/^    def parse_cycle_entry(self, lines):$/;"	m	class:AXEParser
parse_cycle_entry	gprof2dot.py	/^    def parse_cycle_entry(self, lines):$/;"	m	class:GprofParser
parse_description	gprof2dot.py	/^    def parse_description(self):$/;"	m	class:CallgrindParser
parse_empty	gprof2dot.py	/^    def parse_empty(self):$/;"	m	class:CallgrindParser
parse_entry	gprof2dot.py	/^    def parse_entry(self):$/;"	m	class:OprofileParser
parse_event	gprof2dot.py	/^    def parse_event(self):$/;"	m	class:PerfParser
parse_event_specification	gprof2dot.py	/^    def parse_event_specification(self):$/;"	m	class:CallgrindParser
parse_function_entry	gprof2dot.py	/^    def parse_function_entry(self, lines):$/;"	m	class:AXEParser
parse_function_entry	gprof2dot.py	/^    def parse_function_entry(self, lines):$/;"	m	class:GprofParser
parse_header	gprof2dot.py	/^    def parse_header(self):$/;"	m	class:OprofileParser
parse_header	gprof2dot.py	/^    def parse_header(self, row):$/;"	m	class:XPerfParser
parse_header_line	gprof2dot.py	/^    def parse_header_line(self):$/;"	m	class:CallgrindParser
parse_item	gprof2dot.py	/^    def parse_item(self, name):$/;"	m	class:SysprofParser
parse_items	gprof2dot.py	/^    def parse_items(self, name):$/;"	m	class:SysprofParser
parse_key	gprof2dot.py	/^    def parse_key(self, key):$/;"	m	class:CallgrindParser
parse_keys	gprof2dot.py	/^    def parse_keys(self, keys):$/;"	m	class:CallgrindParser
parse_part	gprof2dot.py	/^    def parse_part(self):$/;"	m	class:CallgrindParser
parse_part_detail	gprof2dot.py	/^    def parse_part_detail(self):$/;"	m	class:CallgrindParser
parse_position_spec	gprof2dot.py	/^    def parse_position_spec(self):$/;"	m	class:CallgrindParser
parse_row	gprof2dot.py	/^    def parse_row(self, row):$/;"	m	class:XPerfParser
parse_samples	gprof2dot.py	/^    def parse_samples(self):$/;"	m	class:HProfParser
parse_subentries	gprof2dot.py	/^    def parse_subentries(self):$/;"	m	class:OprofileParser
parse_subentry	gprof2dot.py	/^    def parse_subentry(self):$/;"	m	class:OprofileParser
parse_symbols	gprof2dot.py	/^    def parse_symbols(self):$/;"	m	class:SleepyParser
parse_trace	gprof2dot.py	/^    def parse_trace(self):$/;"	m	class:HProfParser
parse_traces	gprof2dot.py	/^    def parse_traces(self):$/;"	m	class:HProfParser
parse_value	gprof2dot.py	/^    def parse_value(self, tag):$/;"	m	class:SysprofParser
parse_values	gprof2dot.py	/^    def parse_values(self):$/;"	m	class:SysprofParser
past_time_index	Path.h	/^	int past_time_index;$/;"	m	struct:Path
pathPoint	Path.h	/^	std::vector<PathPoint> pathPoint;$/;"	m	struct:Path
paths	ATFViewerMain.h	/^	Paths paths;$/;"	m	class:ATFViewerMain
paths	Paths.h	/^	std::vector<Path> paths;$/;"	m	class:Paths
pathsBuffer	Paths.h	/^	std::vector<Path> pathsBuffer;$/;"	m	class:Paths
percentage	gprof2dot.py	/^def percentage(p):$/;"	f
pollingInterval	ATFViewerMain.h	/^	const unsigned int pollingInterval;$/;"	m	class:ATFViewerMain
pos	gprof2dot.py	/^    def pos(self):$/;"	m	class:XmlTokenizer
prune	gprof2dot.py	/^    def prune(self, node_thres, edge_thres):$/;"	m	class:Profile
prune_leaf	gprof2dot.py	/^    def prune_leaf(self, leaf):$/;"	m	class:Profile
prune_root	gprof2dot.py	/^    def prune_root(self, root):$/;"	m	class:Profile
ratio	gprof2dot.py	/^    def ratio(self, outevent, inevent):$/;"	m	class:Profile
ratio	gprof2dot.py	/^def ratio(numerator, denominator):$/;"	f
readJoystickEvent	Joystick.h	/^	void readJoystickEvent()$/;"	f	class:Joystick
readline	gprof2dot.py	/^    def readline(self):$/;"	m	class:AXEParser
readline	gprof2dot.py	/^    def readline(self):$/;"	m	class:GprofParser
readline	gprof2dot.py	/^    def readline(self):$/;"	m	class:LineParser
readline	gprof2dot.py	/^    def readline(self):$/;"	m	class:PerfParser
resetStmt	DBAccessor.h	/^	void resetStmt()$/;"	f	class:DBAccessor
resetTime	Paths.cpp	/^void Paths::resetTime(void)$/;"	f	class:Paths
resize	ATFViewerMain.cpp	/^void ATFViewerMain::resize(int w, int h)$/;"	f	class:ATFViewerMain
run	unittest.cpp	/^	void run()$/;"	f	class:TestThread
run	unittest.cpp	/^	void run()$/;"	f	class:TestThread_MemFunc
runMakePathsBuffer	Paths.cpp	/^void Paths::runMakePathsBuffer(std::vector<Path>& p, TimeSeparation::Position position)$/;"	f	class:Paths
scale	MapTransform.h	/^	double scale;$/;"	m	class:MapTransform
sector	Sectors.h	/^	std::vector<Sector> sector;$/;"	m	class:Sectors
sectorName	Sectors.h	/^	std::string sectorName;$/;"	m	struct:Sector
sectors	ATFViewerMain.h	/^	Sectors sectors;$/;"	m	class:ATFViewerMain
selectTrackDataWithDate	unittest.cpp	/^void selectTrackDataWithDate()$/;"	f
selectTrackDataWithTime	unittest.cpp	/^void selectTrackDataWithTime()$/;"	f
setCenterOffsetLat	MapTransform.h	/^	void setCenterOffsetLat(GLdouble c_lat)$/;"	f	class:MapTransform
setCenterOffsetLong	MapTransform.h	/^	void setCenterOffsetLong(GLdouble c_long)$/;"	f	class:MapTransform
setCountCrossingLoopParameters	CountCrossing_cuda.h	/^void setCountCrossingLoopParameters$/;"	f
setEnd	CountCrossing.h	/^	void setEnd(int year,int month,int day,int hour = 0,int min = 0, int sec = 0)$/;"	f	class:CountCrossing
setEnd	CountCrossing.h	/^	void setEnd(time_t e)$/;"	f	class:CountCrossing
setNextInterval	TimeSeparation.h	/^	void setNextInterval()$/;"	f	class:TimeSeparation
setQuery	DBAccessor.h	/^	void setQuery(const std::string& sql)$/;"	f	class:DBAccessor
setQuery	TrackDataManager.h	/^	void setQuery(DBAccessor& dba, time_t start, time_t end, char n = ' ')$/;"	f	class:TrackDataManager
setScale	MapTransform.h	/^	void setScale(GLdouble s)$/;"	f	class:MapTransform
setStart	CountCrossing.h	/^	void setStart(int year,int month,int day,int hour = 0,int min = 0, int sec = 0)$/;"	f	class:CountCrossing
setStart	CountCrossing.h	/^	void setStart(time_t s)$/;"	f	class:CountCrossing
setStartEndTime	unittest.cpp	/^void setStartEndTime(time_t& start, time_t& end)$/;"	f
setTransform	MapTransform.h	/^	void setTransform()$/;"	f	class:MapTransform
show_edge_events	gprof2dot.py	/^    show_edge_events = [TOTAL_TIME_RATIO, CALLS]$/;"	v	class:DotWriter
show_function_events	gprof2dot.py	/^    show_function_events = [TOTAL_TIME_RATIO, TIME_RATIO]$/;"	v	class:DotWriter
skip_separator	gprof2dot.py	/^    def skip_separator(self):$/;"	m	class:OprofileParser
sorted_iteritems	gprof2dot.py	/^def sorted_iteritems(d):$/;"	f
start	CountCrossing.h	/^	time_t start;$/;"	m	class:CountCrossing
start	unittest.cpp	/^	void start()$/;"	f	class:Timer
startIndex	CountCrossing.h	/^	std::vector<int> startIndex;$/;"	m	class:CountCrossing
startTime	unittest.cpp	/^	double startTime;$/;"	m	class:Timer	file:
stdinInput	gprof2dot.py	/^    stdinInput = False$/;"	v	class:PstatsParser
stdinInput	gprof2dot.py	/^    stdinInput = False$/;"	v	class:SleepyParser
stdinInput	gprof2dot.py	/^    stdinInput = True$/;"	v	class:Parser
step	DBAccessor.h	/^	void step()$/;"	f	class:DBAccessor
step_select	DBAccessor.h	/^	int step_select()$/;"	f	class:DBAccessor
stmt	DBAccessor.h	/^	sqlite3_stmt* stmt;$/;"	m	class:DBAccessor
strip	gprof2dot.py	/^    strip = False$/;"	v	class:DotWriter
stripped_name	gprof2dot.py	/^    def stripped_name(self):$/;"	m	class:Function
subSector	Sectors.h	/^	std::vector<SubSector> subSector;$/;"	m	struct:Sector
subSectorCount	Sectors.h	/^	int subSectorCount;$/;"	m	struct:Sector
success	unittest.cpp	/^	bool success;$/;"	m	struct:EstimateSpecResult	file:
switchDisplaySector	Sectors.h	/^	void switchDisplaySector()$/;"	f	class:Sectors
t	unittest.cpp	/^	T* const t;$/;"	m	class:TestThread_MemFunc	file:
t	unittest.cpp	/^	TestThread_MemFunc<functype,TestUseThread> t;$/;"	m	class:TestUseThread	file:
test	unittest.cpp	/^void test(bool test_result, bool& ret)$/;"	f
testPThread	unittest.cpp	/^bool testPThread()$/;"	f
testTrackDataManager	unittest.cpp	/^bool testTrackDataManager()$/;"	f
textureHeight	Map.h	/^	int textureHeight;$/;"	m	class:Map
textureName	Map.h	/^	GLuint textureName[1];$/;"	m	class:Map
textureWidth	Map.h	/^	int textureWidth;$/;"	m	class:Map
themes	gprof2dot.py	/^themes = {$/;"	v
thread	unittest.cpp	/^	pthread_t thread;$/;"	m	class:TestThread	file:
thread	unittest.cpp	/^	pthread_t thread;$/;"	m	class:TestThread_MemFunc	file:
time	Path.h	/^	time_t time;$/;"	m	struct:PathPoint
time	unittest.cpp	/^	long long time;$/;"	m	struct:id_time	file:
timeInterval	ATFViewerMain.h	/^	const int timeInterval;$/;"	m	class:ATFViewerMain
timeMax	ATFViewerMain.h	/^	const time_t timeMax;$/;"	m	class:ATFViewerMain
timeMin	ATFViewerMain.h	/^	const time_t timeMin;$/;"	m	class:ATFViewerMain
timeSeparation	Paths.h	/^	TimeSeparation timeSeparation;$/;"	m	class:Paths
timeSequence	TimeSeparation.h	/^	std::vector< time_t > timeSequence;$/;"	m	class:TimeSeparation
times	gprof2dot.py	/^def times(x):$/;"	f
timestring	unittest.cpp	/^string timestring(time_t t)$/;"	f
today	TimeManager.h	/^	static time_t today(time_t t)$/;"	f	class:TimeManager
tol	gprof2dot.py	/^tol = 2 ** -23$/;"	v
totalMethod	gprof2dot.py	/^totalMethod = 'callratios'$/;"	v
trace_id_re	gprof2dot.py	/^    trace_id_re = re.compile(r'^TRACE (\\d+):$')$/;"	v	class:HProfParser
trace_re	gprof2dot.py	/^    trace_re = re.compile(r'\\t(.*)\\((.*):(.*)\\)')$/;"	v	class:HProfParser
translate	gprof2dot.py	/^    def translate(self, mo):$/;"	m	class:AXEParser
translate	gprof2dot.py	/^    def translate(self, mo):$/;"	m	class:GprofParser
u	Map.h	/^	double u;$/;"	m	struct:MapVertex
unichr	gprof2dot.py	/^    unichr = chr # No unichr in Python 3$/;"	v
unitProvidingService	Sectors.h	/^	std::string unitProvidingService;$/;"	m	struct:Sector
updateNowIndex	Paths.cpp	/^void Paths::updateNowIndex(Path& p, time_t now)$/;"	f	class:Paths
updatePastTimeIndex	Paths.cpp	/^void Paths::updatePastTimeIndex(Path& p, time_t past_time)$/;"	f	class:Paths
update_subentries_dict	gprof2dot.py	/^    def update_subentries_dict(self, totals, partials):$/;"	m	class:OprofileParser
v	Map.h	/^	double v;$/;"	m	struct:MapVertex
validate	gprof2dot.py	/^    def validate(self):$/;"	m	class:Profile
vertex	CountCrossing.h	/^	std::vector<float> vertex;$/;"	m	class:CountCrossing
vertexCount	unittest.cpp	/^	int vertexCount;$/;"	m	struct:EstimateSpecResult	file:
vertexIndex	Map.h	/^	int vertexIndex;$/;"	m	struct:MapVertexIndex
width	TimeSeparation.h	/^	time_t width;$/;"	m	class:TimeSeparation
windowHeight	ATFViewerMain.h	/^	int windowHeight;$/;"	m	class:ATFViewerMain
windowWidth	ATFViewerMain.h	/^	int windowWidth;$/;"	m	class:ATFViewerMain
wrap	gprof2dot.py	/^    wrap = False$/;"	v	class:DotWriter
wrap_function_name	gprof2dot.py	/^    def wrap_function_name(self, name):$/;"	m	class:DotWriter
write	gprof2dot.py	/^    def write(self, s):$/;"	m	class:DotWriter
xrange	gprof2dot.py	/^    xrange = range # No xrange in Python 3$/;"	v
~DBAccessor	DBAccessor.h	/^	~DBAccessor()$/;"	f	class:DBAccessor
~DeviceSeq	CountCrossing_cuda.h	/^	~DeviceSeq()$/;"	f	class:DeviceSeq
~DeviceSeqConst	CountCrossing_cuda.h	/^	~DeviceSeqConst()$/;"	f	class:DeviceSeqConst
~TestUseThread	unittest.cpp	/^	~TestUseThread()$/;"	f	class:TestUseThread
