/*
 * =====================================================================================
 *
 *       Filename:  cudatestfunc.cu
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  2016年05月17日 00時26分44秒
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *   Organization:  
 *
 * =====================================================================================
 */


/*
__host__ __device__ int getIndex(float x, float interval)
{
	return (int)floorf(x / interval);
}

__host__ __device__ int* getIndex(const float* const x, const float* const interval, int* const xi)
{
	xi[0] = getIndex(x[0], interval[0]);
	xi[1] = getIndex(x[1], interval[1]);
	xi[2] = getIndex(x[2], interval[2]);
	xi[3] = getIndex(x[3], interval[3]);

	return xi;
}


__host__ __device__ int sign(int x)
{
	return (x > 0) ? 1 : ( (x < 0) ? -1 : 0 );
}

__host__ __device__ int* getDirection(const int* const from, const int* const to, int* const direction)
{
	direction[0] = sign(to[0] - from[0]);
	direction[1] = sign(to[1] - from[1]);
	direction[2] = sign(to[2] - from[2]);
	direction[3] = sign(to[3] - from[3]);
	return direction;
}


__host__ __device__ bool equals(const int* const x0, const int* const x1)
{
	bool ret = true;
	ret = (x0[0] == x1[0]) ? ret : false;
	ret = (x0[1] == x1[1]) ? ret : false;
	ret = (x0[2] == x1[2]) ? ret : false;
	ret = (x0[3] == x1[3]) ? ret : false;
	return ret;
}

//交点を算出する
__host__ __device__ float* getCrossPoint
	(
		const float* const from,//線分の始点
		const float* const to,//線分の終点
		const int* const p_i,//セルの番号
		const float* const interval,//セルの幅
		const int* const dir_i,//線分の方向
		int i,//交点を求める方向
		float* const cross//算出する交点
	)
{
	//交点を求める平面の座標
	float x = interval[i] * (p_i[i] + ((dir_i[i] + 1) / 2));
	//交点の線分のパラメータ
	float s = (x - from[i]) / (to[i] - from[i]);
	//交点の算出
	cross[0] = (to[0] - from[0]) * s + from[0];
	cross[1] = (to[1] - from[1]) * s + from[1];
	cross[2] = (to[2] - from[2]) * s + from[2];
	cross[3] = (to[3] - from[3]) * s + from[3];
	//i成分については誤差が出ないようにもともと求めていたxを使用する
	cross[i] = x;
	//交点を返却
	return cross;
}

//交点が指定したセルの指定した方向の境界にいるかどうか判定する
__host__ __device__ bool atBound
	(
		const float* const cross,//交点
		const int* const p_i,//セル番号
		const float* const interval,//セルの幅
		int i//方向
	)
{
	bool ret = true;
	for(int j = 0; j < 4;j++)
	{
		if(j != i)
		{
			if((cross[i] < interval[j] * p_i[j]) || (interval[j] * (p_i[j] + 1) <= cross[i]))
			{
				ret = false;
			}
		}
		else
		{
			if((cross[i]  < interval[j] * (p_i[j] - 1)) || (interval[j] * (p_i[j] + 2) <= cross[i]))
			{
				ret = false;
			}
		}
	}
	return ret;
}


//線分が通過するセル境界に対し回数をカウントアップする
__host__ __device__ void countCrossing
	(
		const float* const from,//線分の始点
		const float* const to,//線分の終点
		int* const c,//カウンタ
		int n,//カウンタの個数
		const float* const interval//セルの幅
	)
{

	//fromの属するセル番号を取得
	int from_i[4];
	getIndex(from, interval, from_i);
	//toの属するセル番号を取得
	int to_i[4];
	getIndex(to, interval, to_i);
	//線分の各方向の向き
	int direction_i[4];
	getDirection(from_i, to_i, direction_i);
	
	//どのセルにも進まない線分かチェック
	if((direction_i[0] == 0) && (direction_i[1] == 0) && (direction_i[2] == 0) && (direction_i[3] == 0))
	{
		//同じセルにとどまっている線分なので集計なしで終了
		return;
	}

	//ループ用のセル番号
	int p_i[4] = {from_i[0], from_i[1], from_i[2], from_i[3]};
	
	
	//fromからtoまでに通過するセルを求める
	do
	{
		//次に通過するセル
		int next_i[4] = {p_i[0], p_i[1], p_i[2], p_i[3]};
		//p_iの次に通過するセルnext_iを求める
		for(int i = 0; i < 4; i++)
		{
			//next_iが第i方向かどうかチェック
			if(direction_i[i] == 0)
			{
				//この方向には進まないので別の方向をチェック
				continue;
			}
			//toの位置に達していたらこれ以上は進まないので別の方向をチェック
			if(p_i[i] == to_i[i])
			{
				//この方向には進まないので別の方向をチェック
				continue;
			}
			//i方向と垂直な平面との交点を求める
			float cross[4];
			getCrossPoint(from, to, p_i, interval, direction_i, i, cross);
			//現在のセルp_iの境界上の点であればnext_iを確定してbreakでforを抜ける
			if(atBound(cross, p_i, interval, i))
			{
				next_i[i] += direction_i[i];
				break;
			}
		}
		
		//カウントアップを行う
		//対象のカウンタのインデックス
		int c_i = 0;//TODO カウンタのインデックスを算出する関数を作成する
		for(int i = 0; i < 4; i++)
		{
			int c_dir_i = next_i[i] - p_i[i];
			if(c_dir_i != 0)
			{
				c_i += 2 * i + ((c_dir_i > 0) ? 0 : 1);//向きに応じたカウンタのインデックス
				break;
			}
		}
		atomicAdd(&(c[c_i]),1);//カウンタにatomicに加算する <- __host__向けには使えない！！//TODO 修正する！
		
		//p_iをnext_iに更新
		p_i[0] = next_i[0];
		p_i[1] = next_i[1];
		p_i[2] = next_i[2];
		p_i[3] = next_i[3];
	}
	while(!equals(p_i, to_i));//toのセルに到達したら終了
}

 */

template <int D, int DI>//次元,交点を求める方向
float*  getCrossingPoint
	(
		const float* const start,		//線分の始点
		const float* const end,			//線分の終点
		float x,			//交点を求める平面の座標
		float* const cross		//交点の出力先
	)
{
	//交点の線分のパラメータ
	float s = (x - start[DI]) / (end[DI] - start[DI]);
	//交点の算出
	for(int d = 0; d < D; d++)
	{
		cross[d] = (end[d] - start[d]) * s + start[d];
	}
	//DI成分については誤差が出ないようにもともと求めていたxを使用する
	cross[DI] = DI;
	//交点を返却
	return cross;
}

//セルのインデックス通し番号を算出する
template <int D>
int getTotalCellIndex
	(
		const int* const cellindex,	//カウンタのインデックス
		const int* const startindex,	//カウンタのインデックスの開始番号
		const int* const indexcount		//インデックスの個数
	)
{
	int ci = 0;
	for(int d = D; d >= 0; d--)
	{
		ci *= indexcount[d];
		ci += cellindex[d] - startindex[d];
	}
	return ci;
}


template <int D, int DI>//次元,交点を求める方向
void countCrossingByDirection
	(
		const float* const start,		//線分の始点
		const float* const end,			//線分の終点
		const float* const interval,	//区間の幅
		const int* const startindex,	//カウンタのインデックスの開始番号
		const int* const indexcount,	//インデックスの個数
		float* const  counter			//区間の通過回数のカウンタ
	)
{
	int ns = 0;//始点のセルのインデックス
	int ne = 0;//終点のセルのインデックス
	int is = 0;//ループのインデックスの開始番号
	int ie = 0;//ループのインデックスの終了番号
	int ioffset = 0;//ループのインデックスと交点のインデックスの差
	int counteroffset = 0;//インクリメントするカウンタのインデックス
	
	//始点の座標が終点の座標以下の場合
	if(start[DI] <= end[DI])
	{
		ns = - floorf( - start[DI] / interval[DI] ) - 1;
		ne = - floorf( -   end[DI] / interval[DI] ) - 1;
		is = ns + 1;
		ie = ne + 1;
		ioffset = 0;
		counteroffset = 0;
	}
	//始点の座標が終点の座標より大きい場合
	else
	{
		ns = floorf( start[DI] / interval[DI] );
		ne = floorf(   end[DI] / interval[DI] );
		is = ne;
		ie = ns;
		ioffset = 1;
		counteroffset =1;
	}
	for(int i = is; i < ie; i++)
	{
		//第DI座標が(i+ioffset)*interval[DI]の点を求める
		float p = (i+ioffset)*interval[DI];
		float cross[D];
		
		//交点を算出する
		getCrossingPoint(start,end,p,cross);
		
		int cellindex[D];
		//加算するカウンタのセルのインデックスを算出する
		//第DI成分は交点ではなく指定のインデックスを使用する
		for(int d = 0; d < D; d++)
		{
			cellindex[d] = ( d == DI ) ? ( i ) : ( floorf( cross[d] / interval[d] ) );
		}
		//セルの通し番号
		int ci = getTotalCellIndex<D>(cellindex,startindex,indexcount);
		//1セルあたりのカウンタの個数+パディング(バンクコンフリクト対策)を乗じる
		ci *= 2 * D + 1;
		//セル中のカウンタのインデックスを加算する
		ci += DI + counteroffset;
		//カウンタをインクリメントする
		counter[ci]++;
	}
}

//DI = 0〜D-1 についてcountCrossing()を実行するためにテンプレートの再帰を使用する
template <int D, int DI>//次元,交点を求める方向
struct countCrossingTemp
{
	static void imple
	(
		const float* const start,		//線分の始点
		const float* const end,			//線分の終点
		const float* const interval,	//区間の幅
		const int* const startindex,		//カウンタのインデックスの開始番号
		const int* const indexcount,	//インデックスの個数
		float* const counter		//区間の通過回数のカウンタ
	)
{
	//再帰呼出しを行いDI=0〜DI-2方向について実行する
	countCrossingTemp<D,DI-1>::imple(start,end,interval,startindex,indexcount,counter);
	//DI-1方向について平面との交点を求める
	countCrossingByDirection<D, DI-1>(start,end,interval,startindex,indexcount,counter);
}
};

//テンプレートの再帰がループにならずに終了するようにテンプレートの特殊化を行う
template <int D>
struct countCrossingTemp<D,1>
{
	static void imple
	(
		const float* const start,		//線分の始点
		const float* const end,			//線分の終点
		const float* const interval,	//区間の幅
		const int* const startindex,		//カウンタのインデックスの開始番号
		const int* const indexcount,	//インデックスの個数
		float* const counter		//区間の通過回数のカウンタ
	)
{
	countCrossingByDirection<D,0>(start,end,interval,startindex,indexcount,counter);
}
};

template <int D>//次元
void countCrossing
	(
		const float* const start,		//線分の始点
		const float* const end,			//線分の終点
		const float* const interval,	//区間の幅
		const int* const startindex,		//カウンタのインデックスの開始番号
		const int* const indexcount,	//インデックスの個数
		float* const counter		//区間の通過回数のカウンタ
	)
{
		countCrossingTemp<D,D>::imple(start,end,interval,startindex,indexcount,counter);
}

