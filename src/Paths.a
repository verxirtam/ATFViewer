
Paths.o:     ファイル形式 elf64-x86-64


セクション .text の逆アセンブル:

0000000000000000 <_ZL18__gthread_active_pv>:
# define GTHR_ACTIVE_PROXY	__gthrw_(pthread_cancel)
#endif

static inline int
__gthread_active_p (void)
{
       0:	55                   	push   %rbp
       1:	48 89 e5             	mov    %rsp,%rbp
       4:	e8 00 00 00 00       	callq  9 <_ZL18__gthread_active_pv+0x9>
  static void *const __gthread_active_ptr
    = __extension__ (void *) &GTHR_ACTIVE_PROXY;
  return __gthread_active_ptr != 0;
       9:	b8 00 00 00 00       	mov    $0x0,%eax
       e:	48 85 c0             	test   %rax,%rax
      11:	0f 95 c0             	setne  %al
      14:	0f b6 c0             	movzbl %al,%eax
}
      17:	5d                   	pop    %rbp
      18:	c3                   	retq   

0000000000000019 <_ZL15__gthread_equalmm>:
  return __gthrw_(pthread_detach) (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
      19:	55                   	push   %rbp
      1a:	48 89 e5             	mov    %rsp,%rbp
      1d:	48 83 ec 10          	sub    $0x10,%rsp
      21:	e8 00 00 00 00       	callq  26 <_ZL15__gthread_equalmm+0xd>
      26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  return __gthrw_(pthread_equal) (__t1, __t2);
      2e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
      32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      36:	48 89 d6             	mov    %rdx,%rsi
      39:	48 89 c7             	mov    %rax,%rdi
      3c:	e8 00 00 00 00       	callq  41 <_ZL15__gthread_equalmm+0x28>
}
      41:	c9                   	leaveq 
      42:	c3                   	retq   

0000000000000043 <_ZL14__gthread_oncePiPFvvE>:
  return __gthrw_(sched_yield) ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
      43:	55                   	push   %rbp
      44:	48 89 e5             	mov    %rsp,%rbp
      47:	48 83 ec 10          	sub    $0x10,%rsp
      4b:	e8 00 00 00 00       	callq  50 <_ZL14__gthread_oncePiPFvvE+0xd>
      50:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      54:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  if (__gthread_active_p ())
      58:	e8 a3 ff ff ff       	callq  0 <_ZL18__gthread_active_pv>
      5d:	85 c0                	test   %eax,%eax
      5f:	0f 95 c0             	setne  %al
      62:	84 c0                	test   %al,%al
      64:	74 15                	je     7b <_ZL14__gthread_oncePiPFvvE+0x38>
    return __gthrw_(pthread_once) (__once, __func);
      66:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
      6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      6e:	48 89 d6             	mov    %rdx,%rsi
      71:	48 89 c7             	mov    %rax,%rdi
      74:	e8 00 00 00 00       	callq  79 <_ZL14__gthread_oncePiPFvvE+0x36>
      79:	eb 05                	jmp    80 <_ZL14__gthread_oncePiPFvvE+0x3d>
  else
    return -1;
      7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
      80:	c9                   	leaveq 
      81:	c3                   	retq   

0000000000000082 <_ZL20__gthread_mutex_lockP15pthread_mutex_t>:
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
      82:	55                   	push   %rbp
      83:	48 89 e5             	mov    %rsp,%rbp
      86:	48 83 ec 10          	sub    $0x10,%rsp
      8a:	e8 00 00 00 00       	callq  8f <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0xd>
      8f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if (__gthread_active_p ())
      93:	e8 68 ff ff ff       	callq  0 <_ZL18__gthread_active_pv>
      98:	85 c0                	test   %eax,%eax
      9a:	0f 95 c0             	setne  %al
      9d:	84 c0                	test   %al,%al
      9f:	74 0e                	je     af <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0x2d>
    return __gthrw_(pthread_mutex_lock) (__mutex);
      a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      a5:	48 89 c7             	mov    %rax,%rdi
      a8:	e8 00 00 00 00       	callq  ad <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0x2b>
      ad:	eb 05                	jmp    b4 <_ZL20__gthread_mutex_lockP15pthread_mutex_t+0x32>
  else
    return 0;
      af:	b8 00 00 00 00       	mov    $0x0,%eax
}
      b4:	c9                   	leaveq 
      b5:	c3                   	retq   

00000000000000b6 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t>:
}
#endif

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
      b6:	55                   	push   %rbp
      b7:	48 89 e5             	mov    %rsp,%rbp
      ba:	48 83 ec 10          	sub    $0x10,%rsp
      be:	e8 00 00 00 00       	callq  c3 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0xd>
      c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if (__gthread_active_p ())
      c7:	e8 34 ff ff ff       	callq  0 <_ZL18__gthread_active_pv>
      cc:	85 c0                	test   %eax,%eax
      ce:	0f 95 c0             	setne  %al
      d1:	84 c0                	test   %al,%al
      d3:	74 0e                	je     e3 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0x2d>
    return __gthrw_(pthread_mutex_unlock) (__mutex);
      d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      d9:	48 89 c7             	mov    %rax,%rdi
      dc:	e8 00 00 00 00       	callq  e1 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0x2b>
      e1:	eb 05                	jmp    e8 <_ZL22__gthread_mutex_unlockP15pthread_mutex_t+0x32>
  else
    return 0;
      e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
      e8:	c9                   	leaveq 
      e9:	c3                   	retq   

00000000000000ea <_ZN9__gnu_cxxL18__exchange_and_addEPVii>:
  // __exchange_and_add_dispatch
  // __atomic_add_dispatch
#ifdef _GLIBCXX_ATOMIC_BUILTINS
  static inline _Atomic_word 
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
      ea:	55                   	push   %rbp
      eb:	48 89 e5             	mov    %rsp,%rbp
      ee:	48 83 ec 10          	sub    $0x10,%rsp
      f2:	e8 00 00 00 00       	callq  f7 <_ZN9__gnu_cxxL18__exchange_and_addEPVii+0xd>
      f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      fb:	89 75 f4             	mov    %esi,-0xc(%rbp)
      fe:	8b 55 f4             	mov    -0xc(%rbp),%edx
     101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     105:	f0 0f c1 10          	lock xadd %edx,(%rax)
     109:	89 d0                	mov    %edx,%eax
     10b:	c9                   	leaveq 
     10c:	c3                   	retq   

000000000000010d <_ZN9__gnu_cxxL12__atomic_addEPVii>:

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
     10d:	55                   	push   %rbp
     10e:	48 89 e5             	mov    %rsp,%rbp
     111:	48 83 ec 10          	sub    $0x10,%rsp
     115:	e8 00 00 00 00       	callq  11a <_ZN9__gnu_cxxL12__atomic_addEPVii+0xd>
     11a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     11e:	89 75 f4             	mov    %esi,-0xc(%rbp)
     121:	8b 55 f4             	mov    -0xc(%rbp),%edx
     124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     128:	f0 01 10             	lock add %edx,(%rax)
     12b:	c9                   	leaveq 
     12c:	c3                   	retq   

000000000000012d <_ZN9__gnu_cxxL25__exchange_and_add_singleEPii>:
  __atomic_add(volatile _Atomic_word*, int) throw ();
#endif

  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
     12d:	55                   	push   %rbp
     12e:	48 89 e5             	mov    %rsp,%rbp
     131:	48 83 ec 20          	sub    $0x20,%rsp
     135:	e8 00 00 00 00       	callq  13a <_ZN9__gnu_cxxL25__exchange_and_add_singleEPii+0xd>
     13a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
     13e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
    _Atomic_word __result = *__mem;
     141:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     145:	8b 00                	mov    (%rax),%eax
     147:	89 45 fc             	mov    %eax,-0x4(%rbp)
    *__mem += __val;
     14a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     14e:	8b 10                	mov    (%rax),%edx
     150:	8b 45 e4             	mov    -0x1c(%rbp),%eax
     153:	01 c2                	add    %eax,%edx
     155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     159:	89 10                	mov    %edx,(%rax)
    return __result;
     15b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  }
     15e:	c9                   	leaveq 
     15f:	c3                   	retq   

0000000000000160 <_ZN9__gnu_cxxL19__atomic_add_singleEPii>:

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }
     160:	55                   	push   %rbp
     161:	48 89 e5             	mov    %rsp,%rbp
     164:	48 83 ec 10          	sub    $0x10,%rsp
     168:	e8 00 00 00 00       	callq  16d <_ZN9__gnu_cxxL19__atomic_add_singleEPii+0xd>
     16d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     171:	89 75 f4             	mov    %esi,-0xc(%rbp)
     174:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     178:	8b 10                	mov    (%rax),%edx
     17a:	8b 45 f4             	mov    -0xc(%rbp),%eax
     17d:	01 c2                	add    %eax,%edx
     17f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     183:	89 10                	mov    %edx,(%rax)
     185:	c9                   	leaveq 
     186:	c3                   	retq   

0000000000000187 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii>:

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
     187:	55                   	push   %rbp
     188:	48 89 e5             	mov    %rsp,%rbp
     18b:	48 83 ec 10          	sub    $0x10,%rsp
     18f:	e8 00 00 00 00       	callq  194 <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii+0xd>
     194:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     198:	89 75 f4             	mov    %esi,-0xc(%rbp)
#ifdef __GTHREADS
    if (__gthread_active_p())
     19b:	e8 60 fe ff ff       	callq  0 <_ZL18__gthread_active_pv>
     1a0:	85 c0                	test   %eax,%eax
     1a2:	0f 95 c0             	setne  %al
     1a5:	84 c0                	test   %al,%al
     1a7:	74 13                	je     1bc <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii+0x35>
      return __exchange_and_add(__mem, __val);
     1a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
     1ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     1b0:	89 d6                	mov    %edx,%esi
     1b2:	48 89 c7             	mov    %rax,%rdi
     1b5:	e8 30 ff ff ff       	callq  ea <_ZN9__gnu_cxxL18__exchange_and_addEPVii>
     1ba:	eb 11                	jmp    1cd <_ZN9__gnu_cxxL27__exchange_and_add_dispatchEPii+0x46>
    else
      return __exchange_and_add_single(__mem, __val);
     1bc:	8b 55 f4             	mov    -0xc(%rbp),%edx
     1bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     1c3:	89 d6                	mov    %edx,%esi
     1c5:	48 89 c7             	mov    %rax,%rdi
     1c8:	e8 60 ff ff ff       	callq  12d <_ZN9__gnu_cxxL25__exchange_and_add_singleEPii>
#else
    return __exchange_and_add_single(__mem, __val);
#endif
  }
     1cd:	c9                   	leaveq 
     1ce:	c3                   	retq   

00000000000001cf <_ZN9__gnu_cxxL21__atomic_add_dispatchEPii>:

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
     1cf:	55                   	push   %rbp
     1d0:	48 89 e5             	mov    %rsp,%rbp
     1d3:	48 83 ec 10          	sub    $0x10,%rsp
     1d7:	e8 00 00 00 00       	callq  1dc <_ZN9__gnu_cxxL21__atomic_add_dispatchEPii+0xd>
     1dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     1e0:	89 75 f4             	mov    %esi,-0xc(%rbp)
#ifdef __GTHREADS
    if (__gthread_active_p())
     1e3:	e8 18 fe ff ff       	callq  0 <_ZL18__gthread_active_pv>
     1e8:	85 c0                	test   %eax,%eax
     1ea:	0f 95 c0             	setne  %al
     1ed:	84 c0                	test   %al,%al
     1ef:	74 13                	je     204 <_ZN9__gnu_cxxL21__atomic_add_dispatchEPii+0x35>
      __atomic_add(__mem, __val);
     1f1:	8b 55 f4             	mov    -0xc(%rbp),%edx
     1f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     1f8:	89 d6                	mov    %edx,%esi
     1fa:	48 89 c7             	mov    %rax,%rdi
     1fd:	e8 0b ff ff ff       	callq  10d <_ZN9__gnu_cxxL12__atomic_addEPVii>
     202:	eb 11                	jmp    215 <_ZN9__gnu_cxxL21__atomic_add_dispatchEPii+0x46>
    else
      __atomic_add_single(__mem, __val);
     204:	8b 55 f4             	mov    -0xc(%rbp),%edx
     207:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     20b:	89 d6                	mov    %edx,%esi
     20d:	48 89 c7             	mov    %rax,%rdi
     210:	e8 4b ff ff ff       	callq  160 <_ZN9__gnu_cxxL19__atomic_add_singleEPii>
#else
    __atomic_add_single(__mem, __val);
#endif
  }
     215:	c9                   	leaveq 
     216:	c3                   	retq   
     217:	90                   	nop

0000000000000218 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE>:

using namespace std;


void Paths::makePathsBuffer(std::vector<Path>& p, TimeSeparation::Position position)
{
     218:	55                   	push   %rbp
     219:	48 89 e5             	mov    %rsp,%rbp
     21c:	53                   	push   %rbx
     21d:	48 83 ec 48          	sub    $0x48,%rsp
     221:	e8 00 00 00 00       	callq  226 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xe>
     226:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
     22a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
     22e:	89 55 bc             	mov    %edx,-0x44(%rbp)
	cout << "Paths::makePathsBuffer() start." << endl;
     231:	be 00 00 00 00       	mov    $0x0,%esi
     236:	bf 00 00 00 00       	mov    $0x0,%edi
     23b:	e8 00 00 00 00       	callq  240 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x28>
     240:	be 00 00 00 00       	mov    $0x0,%esi
     245:	48 89 c7             	mov    %rax,%rdi
     248:	e8 00 00 00 00       	callq  24d <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x35>
	
	//古いデータを削除する
	p.clear();
     24d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     251:	48 89 c7             	mov    %rax,%rdi
     254:	e8 00 00 00 00       	callq  259 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x41>
	//DBから取得する開始時刻・終了時刻
	time_t time_start = 0;// = this->timeSeparation - this->drawTimeWidth;
     259:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
     260:	00 
	time_t time_end = 0;//   = timeSeparation[time_separation_index + 1] + this->drawTimeWidth;
     261:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
     268:	00 
	
	//時間の区間の開始・終了時刻を取得する
	this->timeSeparation.getIntervalStatus(position, time_start, time_end);
     269:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     26d:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
     271:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     275:	8b 75 bc             	mov    -0x44(%rbp),%esi
     278:	48 89 c7             	mov    %rax,%rdi
     27b:	e8 00 00 00 00       	callq  280 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x68>
	
	//前後にバッファを持たせる(過去分の起動も表示するため)
	time_start -= drawTimeWidth;
     280:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     284:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     288:	8b 40 78             	mov    0x78(%rax),%eax
     28b:	89 c0                	mov    %eax,%eax
     28d:	48 29 c2             	sub    %rax,%rdx
     290:	48 89 d0             	mov    %rdx,%rax
     293:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	time_end += drawTimeWidth;
     297:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     29b:	8b 40 78             	mov    0x78(%rax),%eax
     29e:	89 c2                	mov    %eax,%edx
     2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     2a4:	48 01 d0             	add    %rdx,%rax
     2a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	
	
	cout << "Paths::makePathsBuffer(): ";
     2ab:	be 00 00 00 00       	mov    $0x0,%esi
     2b0:	bf 00 00 00 00       	mov    $0x0,%edi
     2b5:	e8 00 00 00 00       	callq  2ba <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xa2>
	cout << "time_start = " << time_start;
     2ba:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
     2be:	be 00 00 00 00       	mov    $0x0,%esi
     2c3:	bf 00 00 00 00       	mov    $0x0,%edi
     2c8:	e8 00 00 00 00       	callq  2cd <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xb5>
     2cd:	48 89 de             	mov    %rbx,%rsi
     2d0:	48 89 c7             	mov    %rax,%rdi
     2d3:	e8 00 00 00 00       	callq  2d8 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xc0>
	cout << ", time_end = " << time_end << endl;
     2d8:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
     2dc:	be 00 00 00 00       	mov    $0x0,%esi
     2e1:	bf 00 00 00 00       	mov    $0x0,%edi
     2e6:	e8 00 00 00 00       	callq  2eb <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xd3>
     2eb:	48 89 de             	mov    %rbx,%rsi
     2ee:	48 89 c7             	mov    %rax,%rdi
     2f1:	e8 00 00 00 00       	callq  2f6 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xde>
     2f6:	be 00 00 00 00       	mov    $0x0,%esi
     2fb:	48 89 c7             	mov    %rax,%rdi
     2fe:	e8 00 00 00 00       	callq  303 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xeb>
	
	
	//トラックデータの取得
	TrackDataManager tdm;
	tdm.getTrackDataFromDBParallel(p, time_start, time_end, 6);
     303:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     307:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     30b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
     30f:	48 8d 45 df          	lea    -0x21(%rbp),%rax
     313:	41 b8 06 00 00 00    	mov    $0x6,%r8d
     319:	48 89 c7             	mov    %rax,%rdi
     31c:	e8 00 00 00 00       	callq  321 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x109>
	
	cout << "Paths::makePathsBuffer() end." << endl;
     321:	be 00 00 00 00       	mov    $0x0,%esi
     326:	bf 00 00 00 00       	mov    $0x0,%edi
     32b:	e8 00 00 00 00       	callq  330 <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x118>
     330:	be 00 00 00 00       	mov    $0x0,%esi
     335:	48 89 c7             	mov    %rax,%rdi
     338:	e8 00 00 00 00       	callq  33d <_ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x125>
}
     33d:	48 83 c4 48          	add    $0x48,%rsp
     341:	5b                   	pop    %rbx
     342:	5d                   	pop    %rbp
     343:	c3                   	retq   

0000000000000344 <_ZZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionEENKUlvE_clEv>:
	
	//スレッドで実行するラムダ式
	//this : メンバ変数を実行するのでコピーキャプチャする
	//p : 書き換えるので参照キャプチャする
	//position : 1次変数なのでコピーキャプチャする
	auto _f = [this,&p,position]{this->makePathsBuffer(p, position);};
     344:	55                   	push   %rbp
     345:	48 89 e5             	mov    %rsp,%rbp
     348:	48 83 ec 10          	sub    $0x10,%rsp
     34c:	e8 00 00 00 00       	callq  351 <_ZZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionEENKUlvE_clEv+0xd>
     351:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
     355:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     359:	8b 50 10             	mov    0x10(%rax),%edx
     35c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     360:	48 8b 48 08          	mov    0x8(%rax),%rcx
     364:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     368:	48 8b 00             	mov    (%rax),%rax
     36b:	48 89 ce             	mov    %rcx,%rsi
     36e:	48 89 c7             	mov    %rax,%rdi
     371:	e8 00 00 00 00       	callq  376 <_ZZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionEENKUlvE_clEv+0x32>
     376:	c9                   	leaveq 
     377:	c3                   	retq   

0000000000000378 <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE>:
	
	cout << "Paths::makePathsBuffer() end." << endl;
}

void Paths::runMakePathsBuffer(std::vector<Path>& p, TimeSeparation::Position position)
{
     378:	55                   	push   %rbp
     379:	48 89 e5             	mov    %rsp,%rbp
     37c:	48 83 ec 50          	sub    $0x50,%rsp
     380:	e8 00 00 00 00       	callq  385 <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xd>
     385:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
     389:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
     38d:	89 55 bc             	mov    %edx,-0x44(%rbp)
	cout << "Paths::runMakePathsBuffer() start." << endl;
     390:	be 00 00 00 00       	mov    $0x0,%esi
     395:	bf 00 00 00 00       	mov    $0x0,%edi
     39a:	e8 00 00 00 00       	callq  39f <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x27>
     39f:	be 00 00 00 00       	mov    $0x0,%esi
     3a4:	48 89 c7             	mov    %rax,%rdi
     3a7:	e8 00 00 00 00       	callq  3ac <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x34>
	
	//スレッドで実行するラムダ式
	//this : メンバ変数を実行するのでコピーキャプチャする
	//p : 書き換えるので参照キャプチャする
	//position : 1次変数なのでコピーキャプチャする
	auto _f = [this,&p,position]{this->makePathsBuffer(p, position);};
     3ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     3b0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     3b4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     3b8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
     3bc:	8b 45 bc             	mov    -0x44(%rbp),%eax
     3bf:	89 45 f0             	mov    %eax,-0x10(%rbp)
	//スレッド起動
	futureMakeBuffer = std::async(std::launch::async, _f);
     3c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     3c6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     3ca:	be 01 00 00 00       	mov    $0x1,%esi
     3cf:	48 89 c7             	mov    %rax,%rdi
     3d2:	e8 ae 0b 00 00       	callq  f85 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_>
     3d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     3db:	48 8d 90 80 00 00 00 	lea    0x80(%rax),%rdx
     3e2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     3e6:	48 89 c6             	mov    %rax,%rsi
     3e9:	48 89 d7             	mov    %rdx,%rdi
     3ec:	e8 00 00 00 00       	callq  3f1 <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x79>
     3f1:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     3f5:	48 89 c7             	mov    %rax,%rdi
     3f8:	e8 00 00 00 00       	callq  3fd <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x85>
	
	cout << "Paths::runMakePathsBuffer() end." << endl;
     3fd:	be 00 00 00 00       	mov    $0x0,%esi
     402:	bf 00 00 00 00       	mov    $0x0,%edi
     407:	e8 00 00 00 00       	callq  40c <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x94>
     40c:	be 00 00 00 00       	mov    $0x0,%esi
     411:	48 89 c7             	mov    %rax,%rdi
     414:	e8 00 00 00 00       	callq  419 <_ZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0xa1>
}
     419:	c9                   	leaveq 
     41a:	c3                   	retq   
     41b:	90                   	nop

000000000000041c <_ZN5Paths8drawPathER9PathPointl>:
void Paths::drawPath(PathPoint& p, time_t now)
{
     41c:	55                   	push   %rbp
     41d:	48 89 e5             	mov    %rsp,%rbp
     420:	48 83 ec 50          	sub    $0x50,%rsp
     424:	e8 00 00 00 00       	callq  429 <_ZN5Paths8drawPathER9PathPointl+0xd>
     429:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
     42d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
     431:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	glColor4d(c, 0.5, 1.0 - c, alpha * 0.1);
	glVertex3d(p.longitude, p.latitude, 0.0);
	*/
	
	//目的空港の文字列に応じて配色する
	double alpha = 1.0 - (((double)(now - p.time)) / ((double)drawTimeWidth));
     435:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     439:	48 8b 40 18          	mov    0x18(%rax),%rax
     43d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
     441:	48 29 c2             	sub    %rax,%rdx
     444:	48 89 d0             	mov    %rdx,%rax
     447:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
     44c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     450:	8b 40 78             	mov    0x78(%rax),%eax
     453:	89 c0                	mov    %eax,%eax
     455:	48 85 c0             	test   %rax,%rax
     458:	78 07                	js     461 <_ZN5Paths8drawPathER9PathPointl+0x45>
     45a:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
     45f:	eb 15                	jmp    476 <_ZN5Paths8drawPathER9PathPointl+0x5a>
     461:	48 89 c2             	mov    %rax,%rdx
     464:	48 d1 ea             	shr    %rdx
     467:	83 e0 01             	and    $0x1,%eax
     46a:	48 09 c2             	or     %rax,%rdx
     46d:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
     472:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
     476:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
     47a:	66 0f 28 c1          	movapd %xmm1,%xmm0
     47e:	f2 0f 10 0d 00 00 00 	movsd  0x0(%rip),%xmm1        # 486 <_ZN5Paths8drawPathER9PathPointl+0x6a>
     485:	00 
     486:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
     48a:	66 0f 28 c1          	movapd %xmm1,%xmm0
     48e:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
	
	int h;
	if(p.arrival.size() != 3)
     493:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     497:	48 83 c0 20          	add    $0x20,%rax
     49b:	48 89 c7             	mov    %rax,%rdi
     49e:	e8 00 00 00 00       	callq  4a3 <_ZN5Paths8drawPathER9PathPointl+0x87>
     4a3:	48 83 f8 03          	cmp    $0x3,%rax
     4a7:	0f 95 c0             	setne  %al
     4aa:	84 c0                	test   %al,%al
     4ac:	74 09                	je     4b7 <_ZN5Paths8drawPathER9PathPointl+0x9b>
	{
		h = 0;
     4ae:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
     4b5:	eb 7c                	jmp    533 <_ZN5Paths8drawPathER9PathPointl+0x117>
	}
	else
	{
		int a0 = p.arrival[0] - 65;
     4b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     4bb:	48 83 c0 20          	add    $0x20,%rax
     4bf:	be 00 00 00 00       	mov    $0x0,%esi
     4c4:	48 89 c7             	mov    %rax,%rdi
     4c7:	e8 00 00 00 00       	callq  4cc <_ZN5Paths8drawPathER9PathPointl+0xb0>
     4cc:	0f b6 00             	movzbl (%rax),%eax
     4cf:	0f be c0             	movsbl %al,%eax
     4d2:	83 e8 41             	sub    $0x41,%eax
     4d5:	89 45 d4             	mov    %eax,-0x2c(%rbp)
		int a1 = p.arrival[1] - 65;
     4d8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     4dc:	48 83 c0 20          	add    $0x20,%rax
     4e0:	be 01 00 00 00       	mov    $0x1,%esi
     4e5:	48 89 c7             	mov    %rax,%rdi
     4e8:	e8 00 00 00 00       	callq  4ed <_ZN5Paths8drawPathER9PathPointl+0xd1>
     4ed:	0f b6 00             	movzbl (%rax),%eax
     4f0:	0f be c0             	movsbl %al,%eax
     4f3:	83 e8 41             	sub    $0x41,%eax
     4f6:	89 45 d8             	mov    %eax,-0x28(%rbp)
		int a2 = p.arrival[2] - 65;
     4f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     4fd:	48 83 c0 20          	add    $0x20,%rax
     501:	be 02 00 00 00       	mov    $0x2,%esi
     506:	48 89 c7             	mov    %rax,%rdi
     509:	e8 00 00 00 00       	callq  50e <_ZN5Paths8drawPathER9PathPointl+0xf2>
     50e:	0f b6 00             	movzbl (%rax),%eax
     511:	0f be c0             	movsbl %al,%eax
     514:	83 e8 41             	sub    $0x41,%eax
     517:	89 45 dc             	mov    %eax,-0x24(%rbp)
		h = a2 * 29 * 29 + a1 * 29 + a0;
     51a:	8b 45 dc             	mov    -0x24(%rbp),%eax
     51d:	69 d0 49 03 00 00    	imul   $0x349,%eax,%edx
     523:	8b 45 d8             	mov    -0x28(%rbp),%eax
     526:	6b c0 1d             	imul   $0x1d,%eax,%eax
     529:	01 c2                	add    %eax,%edx
     52b:	8b 45 d4             	mov    -0x2c(%rbp),%eax
     52e:	01 d0                	add    %edx,%eax
     530:	89 45 d0             	mov    %eax,-0x30(%rbp)
	}
	double r = ((double)(h % 251)) / 251.0;
     533:	8b 4d d0             	mov    -0x30(%rbp),%ecx
     536:	ba bf bf 8c 82       	mov    $0x828cbfbf,%edx
     53b:	89 c8                	mov    %ecx,%eax
     53d:	f7 ea                	imul   %edx
     53f:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
     542:	c1 f8 07             	sar    $0x7,%eax
     545:	89 c2                	mov    %eax,%edx
     547:	89 c8                	mov    %ecx,%eax
     549:	c1 f8 1f             	sar    $0x1f,%eax
     54c:	29 c2                	sub    %eax,%edx
     54e:	89 d0                	mov    %edx,%eax
     550:	69 c0 fb 00 00 00    	imul   $0xfb,%eax,%eax
     556:	29 c1                	sub    %eax,%ecx
     558:	89 c8                	mov    %ecx,%eax
     55a:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     55e:	f2 0f 10 0d 00 00 00 	movsd  0x0(%rip),%xmm1        # 566 <_ZN5Paths8drawPathER9PathPointl+0x14a>
     565:	00 
     566:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
     56a:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
	double g = ((double)((h * h) % 251)) / 251.0;
     56f:	8b 45 d0             	mov    -0x30(%rbp),%eax
     572:	0f af 45 d0          	imul   -0x30(%rbp),%eax
     576:	89 c1                	mov    %eax,%ecx
     578:	ba bf bf 8c 82       	mov    $0x828cbfbf,%edx
     57d:	89 c8                	mov    %ecx,%eax
     57f:	f7 ea                	imul   %edx
     581:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
     584:	c1 f8 07             	sar    $0x7,%eax
     587:	89 c2                	mov    %eax,%edx
     589:	89 c8                	mov    %ecx,%eax
     58b:	c1 f8 1f             	sar    $0x1f,%eax
     58e:	29 c2                	sub    %eax,%edx
     590:	89 d0                	mov    %edx,%eax
     592:	69 c0 fb 00 00 00    	imul   $0xfb,%eax,%eax
     598:	29 c1                	sub    %eax,%ecx
     59a:	89 c8                	mov    %ecx,%eax
     59c:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     5a0:	f2 0f 10 0d 00 00 00 	movsd  0x0(%rip),%xmm1        # 5a8 <_ZN5Paths8drawPathER9PathPointl+0x18c>
     5a7:	00 
     5a8:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
     5ac:	f2 0f 11 45 f0       	movsd  %xmm0,-0x10(%rbp)
	double b = ((double)((h * h * h) % 251)) / 251.0;
     5b1:	8b 45 d0             	mov    -0x30(%rbp),%eax
     5b4:	0f af 45 d0          	imul   -0x30(%rbp),%eax
     5b8:	0f af 45 d0          	imul   -0x30(%rbp),%eax
     5bc:	89 c1                	mov    %eax,%ecx
     5be:	ba bf bf 8c 82       	mov    $0x828cbfbf,%edx
     5c3:	89 c8                	mov    %ecx,%eax
     5c5:	f7 ea                	imul   %edx
     5c7:	8d 04 0a             	lea    (%rdx,%rcx,1),%eax
     5ca:	c1 f8 07             	sar    $0x7,%eax
     5cd:	89 c2                	mov    %eax,%edx
     5cf:	89 c8                	mov    %ecx,%eax
     5d1:	c1 f8 1f             	sar    $0x1f,%eax
     5d4:	29 c2                	sub    %eax,%edx
     5d6:	89 d0                	mov    %edx,%eax
     5d8:	69 c0 fb 00 00 00    	imul   $0xfb,%eax,%eax
     5de:	29 c1                	sub    %eax,%ecx
     5e0:	89 c8                	mov    %ecx,%eax
     5e2:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     5e6:	f2 0f 10 0d 00 00 00 	movsd  0x0(%rip),%xmm1        # 5ee <_ZN5Paths8drawPathER9PathPointl+0x1d2>
     5ed:	00 
     5ee:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
     5f2:	f2 0f 11 45 f8       	movsd  %xmm0,-0x8(%rbp)
	else
	{
		r = ((double)p.altitude)/40000.0;
	}
	*/
	glColor4d(r, g, b, alpha * 0.75);
     5f7:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
     5fc:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # 604 <_ZN5Paths8drawPathER9PathPointl+0x1e8>
     603:	00 
     604:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
     608:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
     60c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
     610:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     614:	66 0f 28 d8          	movapd %xmm0,%xmm3
     618:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
     61c:	f2 0f 10 55 b0       	movsd  -0x50(%rbp),%xmm2
     621:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
     625:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
     62a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     62e:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
     633:	e8 00 00 00 00       	callq  638 <_ZN5Paths8drawPathER9PathPointl+0x21c>
	glVertex3d(p.longitude, p.latitude, p.altitude);
     638:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     63c:	8b 40 10             	mov    0x10(%rax),%eax
     63f:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     643:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     647:	48 8b 50 08          	mov    0x8(%rax),%rdx
     64b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     64f:	48 8b 00             	mov    (%rax),%rax
     652:	66 0f 28 d0          	movapd %xmm0,%xmm2
     656:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
     65a:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
     65f:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     663:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
     668:	e8 00 00 00 00       	callq  66d <_ZN5Paths8drawPathER9PathPointl+0x251>
	glColor4d(r, g, b, alpha * 0.1);
     66d:	f2 0f 10 4d e0       	movsd  -0x20(%rbp),%xmm1
     672:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # 67a <_ZN5Paths8drawPathER9PathPointl+0x25e>
     679:	00 
     67a:	f2 0f 59 c1          	mulsd  %xmm1,%xmm0
     67e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
     682:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
     686:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     68a:	66 0f 28 d8          	movapd %xmm0,%xmm3
     68e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
     692:	f2 0f 10 55 b0       	movsd  -0x50(%rbp),%xmm2
     697:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
     69b:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
     6a0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     6a4:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
     6a9:	e8 00 00 00 00       	callq  6ae <_ZN5Paths8drawPathER9PathPointl+0x292>
	glVertex3d(p.longitude, p.latitude, 0.0);
     6ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     6b2:	48 8b 50 08          	mov    0x8(%rax),%rdx
     6b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     6ba:	48 8b 00             	mov    (%rax),%rax
     6bd:	66 0f 57 d2          	xorpd  %xmm2,%xmm2
     6c1:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
     6c5:	f2 0f 10 4d b0       	movsd  -0x50(%rbp),%xmm1
     6ca:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     6ce:	f2 0f 10 45 b0       	movsd  -0x50(%rbp),%xmm0
     6d3:	e8 00 00 00 00       	callq  6d8 <_ZN5Paths8drawPathER9PathPointl+0x2bc>
}
     6d8:	c9                   	leaveq 
     6d9:	c3                   	retq   

00000000000006da <_ZN5Paths11getNowPointER9PathPointS1_l>:
PathPoint Paths::getNowPoint(PathPoint& from, PathPoint& to, time_t time)
{
     6da:	55                   	push   %rbp
     6db:	48 89 e5             	mov    %rsp,%rbp
     6de:	53                   	push   %rbx
     6df:	48 83 ec 58          	sub    $0x58,%rsp
     6e3:	e8 00 00 00 00       	callq  6e8 <_ZN5Paths11getNowPointER9PathPointS1_l+0xe>
     6e8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
     6ec:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
     6f0:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
     6f4:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
     6f8:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	PathPoint ret(0.0, 0.0, 0, 0, from.arrival);
     6fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     700:	48 8d 50 20          	lea    0x20(%rax),%rdx
     704:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     708:	48 89 d6             	mov    %rdx,%rsi
     70b:	48 89 c7             	mov    %rax,%rdi
     70e:	e8 00 00 00 00       	callq  713 <_ZN5Paths11getNowPointER9PathPointS1_l+0x39>
     713:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     717:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     71b:	48 89 d1             	mov    %rdx,%rcx
     71e:	ba 00 00 00 00       	mov    $0x0,%edx
     723:	be 00 00 00 00       	mov    $0x0,%esi
     728:	66 0f 57 c9          	xorpd  %xmm1,%xmm1
     72c:	66 0f 57 c0          	xorpd  %xmm0,%xmm0
     730:	48 89 c7             	mov    %rax,%rdi
     733:	e8 00 00 00 00       	callq  738 <_ZN5Paths11getNowPointER9PathPointS1_l+0x5e>
     738:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     73c:	48 89 c7             	mov    %rax,%rdi
     73f:	e8 00 00 00 00       	callq  744 <_ZN5Paths11getNowPointER9PathPointS1_l+0x6a>
	double ratio_from = 1.0 - ((double)(time - from.time))/((double)(to.time - from.time));
     744:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     748:	48 8b 40 18          	mov    0x18(%rax),%rax
     74c:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
     750:	48 29 c2             	sub    %rax,%rdx
     753:	48 89 d0             	mov    %rdx,%rax
     756:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
     75b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     75f:	48 8b 50 18          	mov    0x18(%rax),%rdx
     763:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     767:	48 8b 40 18          	mov    0x18(%rax),%rax
     76b:	48 29 c2             	sub    %rax,%rdx
     76e:	48 89 d0             	mov    %rdx,%rax
     771:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
     776:	f2 0f 5e c1          	divsd  %xmm1,%xmm0
     77a:	f2 0f 10 0d 00 00 00 	movsd  0x0(%rip),%xmm1        # 782 <_ZN5Paths11getNowPointER9PathPointS1_l+0xa8>
     781:	00 
     782:	f2 0f 5c c8          	subsd  %xmm0,%xmm1
     786:	66 0f 28 c1          	movapd %xmm1,%xmm0
     78a:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
	double ratio_to = 1.0 - ratio_from;
     78f:	f2 0f 10 05 00 00 00 	movsd  0x0(%rip),%xmm0        # 797 <_ZN5Paths11getNowPointER9PathPointS1_l+0xbd>
     796:	00 
     797:	f2 0f 5c 45 e0       	subsd  -0x20(%rbp),%xmm0
     79c:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
	ret.longitude = ratio_from * from.longitude + ratio_to * to.longitude;
     7a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     7a5:	f2 0f 10 00          	movsd  (%rax),%xmm0
     7a9:	66 0f 28 c8          	movapd %xmm0,%xmm1
     7ad:	f2 0f 59 4d e0       	mulsd  -0x20(%rbp),%xmm1
     7b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     7b6:	f2 0f 10 00          	movsd  (%rax),%xmm0
     7ba:	f2 0f 59 45 e8       	mulsd  -0x18(%rbp),%xmm0
     7bf:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
     7c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     7c7:	f2 0f 11 00          	movsd  %xmm0,(%rax)
	ret.latitude = ratio_from * from.latitude + ratio_to * to.latitude;
     7cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     7cf:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
     7d4:	66 0f 28 c8          	movapd %xmm0,%xmm1
     7d8:	f2 0f 59 4d e0       	mulsd  -0x20(%rbp),%xmm1
     7dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     7e1:	f2 0f 10 40 08       	movsd  0x8(%rax),%xmm0
     7e6:	f2 0f 59 45 e8       	mulsd  -0x18(%rbp),%xmm0
     7eb:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
     7ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     7f3:	f2 0f 11 40 08       	movsd  %xmm0,0x8(%rax)
	ret.altitude =(int)( ratio_from * ((double)from.altitude) + ratio_to * ((double)to.altitude));
     7f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     7fc:	8b 40 10             	mov    0x10(%rax),%eax
     7ff:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     803:	66 0f 28 c8          	movapd %xmm0,%xmm1
     807:	f2 0f 59 4d e0       	mulsd  -0x20(%rbp),%xmm1
     80c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     810:	8b 40 10             	mov    0x10(%rax),%eax
     813:	f2 0f 2a c0          	cvtsi2sd %eax,%xmm0
     817:	f2 0f 59 45 e8       	mulsd  -0x18(%rbp),%xmm0
     81c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
     820:	f2 0f 2c d0          	cvttsd2si %xmm0,%edx
     824:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     828:	89 50 10             	mov    %edx,0x10(%rax)
	ret.time = time;
     82b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     82f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
     833:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return ret;
     837:	eb 1a                	jmp    853 <_ZN5Paths11getNowPointER9PathPointS1_l+0x179>
     839:	48 89 c3             	mov    %rax,%rbx
     83c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     840:	48 89 c7             	mov    %rax,%rdi
     843:	e8 00 00 00 00       	callq  848 <_ZN5Paths11getNowPointER9PathPointS1_l+0x16e>
     848:	48 89 d8             	mov    %rbx,%rax
     84b:	48 89 c7             	mov    %rax,%rdi
     84e:	e8 00 00 00 00       	callq  853 <_ZN5Paths11getNowPointER9PathPointS1_l+0x179>
}
     853:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     857:	48 83 c4 58          	add    $0x58,%rsp
     85b:	5b                   	pop    %rbx
     85c:	5d                   	pop    %rbp
     85d:	c3                   	retq   

000000000000085e <_ZN5Paths13initPathPointEll>:

void Paths::initPathPoint(time_t time_min, time_t time_max)
{
     85e:	55                   	push   %rbp
     85f:	48 89 e5             	mov    %rsp,%rbp
     862:	48 83 ec 60          	sub    $0x60,%rsp
     866:	e8 00 00 00 00       	callq  86b <_ZN5Paths13initPathPointEll+0xd>
     86b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
     86f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
     873:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
	//timeSeparationの初期化
	this->timeSeparation = TimeSeparation(time_min, time_max, 2 * 60 * 60);
     877:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
     87b:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
     87f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     883:	b9 20 1c 00 00       	mov    $0x1c20,%ecx
     888:	48 89 c7             	mov    %rax,%rdi
     88b:	e8 00 00 00 00       	callq  890 <_ZN5Paths13initPathPointEll+0x32>
     890:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     894:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     898:	48 89 d6             	mov    %rdx,%rsi
     89b:	48 89 c7             	mov    %rax,%rdi
     89e:	e8 00 00 00 00       	callq  8a3 <_ZN5Paths13initPathPointEll+0x45>
     8a3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     8a7:	48 89 c7             	mov    %rax,%rdi
     8aa:	e8 00 00 00 00       	callq  8af <_ZN5Paths13initPathPointEll+0x51>
	
	
	//バッファの取得を別スレッドで実行
	//メインスレッドと合わせて同時取得する
	this->runMakePathsBuffer(*bufferPaths, TimeSeparation::Position::next);
     8af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     8b3:	48 8b 48 70          	mov    0x70(%rax),%rcx
     8b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     8bb:	ba 01 00 00 00       	mov    $0x1,%edx
     8c0:	48 89 ce             	mov    %rcx,%rsi
     8c3:	48 89 c7             	mov    %rax,%rdi
     8c6:	e8 00 00 00 00       	callq  8cb <_ZN5Paths13initPathPointEll+0x6d>
	//メインスレッドで直近で使用するトラックデータを取得
	this->makePathsBuffer(*currentPaths, TimeSeparation::Position::current);
     8cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     8cf:	48 8b 48 68          	mov    0x68(%rax),%rcx
     8d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
     8d7:	ba 00 00 00 00       	mov    $0x0,%edx
     8dc:	48 89 ce             	mov    %rcx,%rsi
     8df:	48 89 c7             	mov    %rax,%rdi
     8e2:	e8 00 00 00 00       	callq  8e7 <_ZN5Paths13initPathPointEll+0x89>
	
	
	
	//TrackDataManager tdm;
	//tdm.getTrackDataFromDBParallel(paths,time_min,time_max);
}
     8e7:	c9                   	leaveq 
     8e8:	c3                   	retq   
     8e9:	90                   	nop

00000000000008ea <_ZN5Paths9resetTimeEv>:

void Paths::resetTime(void)
{
     8ea:	55                   	push   %rbp
     8eb:	48 89 e5             	mov    %rsp,%rbp
     8ee:	48 83 ec 40          	sub    $0x40,%rsp
     8f2:	e8 00 00 00 00       	callq  8f7 <_ZN5Paths9resetTimeEv+0xd>
     8f7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	for(auto&& p: *currentPaths)
     8fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     8ff:	48 8b 40 68          	mov    0x68(%rax),%rax
     903:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
     907:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     90b:	48 89 c7             	mov    %rax,%rdi
     90e:	e8 00 00 00 00       	callq  913 <_ZN5Paths9resetTimeEv+0x29>
     913:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     917:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
     91b:	48 89 c7             	mov    %rax,%rdi
     91e:	e8 00 00 00 00       	callq  923 <_ZN5Paths9resetTimeEv+0x39>
     923:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     927:	eb 32                	jmp    95b <_ZN5Paths9resetTimeEv+0x71>
     929:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     92d:	48 89 c7             	mov    %rax,%rdi
     930:	e8 00 00 00 00       	callq  935 <_ZN5Paths9resetTimeEv+0x4b>
     935:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	{
		p.past_time_index = 0;
     939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     93d:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
		p.now_index = 0;
     944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     948:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%rax)
	//tdm.getTrackDataFromDBParallel(paths,time_min,time_max);
}

void Paths::resetTime(void)
{
	for(auto&& p: *currentPaths)
     94f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     953:	48 89 c7             	mov    %rax,%rdi
     956:	e8 00 00 00 00       	callq  95b <_ZN5Paths9resetTimeEv+0x71>
     95b:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
     95f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     963:	48 89 d6             	mov    %rdx,%rsi
     966:	48 89 c7             	mov    %rax,%rdi
     969:	e8 00 00 00 00       	callq  96e <_ZN5Paths9resetTimeEv+0x84>
     96e:	84 c0                	test   %al,%al
     970:	75 b7                	jne    929 <_ZN5Paths9resetTimeEv+0x3f>
	{
		p.past_time_index = 0;
		p.now_index = 0;
	}
}
     972:	c9                   	leaveq 
     973:	c3                   	retq   

0000000000000974 <_ZN5Paths19updatePastTimeIndexER4Pathl>:

void Paths::updatePastTimeIndex(Path& p, time_t past_time)
{
     974:	55                   	push   %rbp
     975:	48 89 e5             	mov    %rsp,%rbp
     978:	48 83 ec 30          	sub    $0x30,%rsp
     97c:	e8 00 00 00 00       	callq  981 <_ZN5Paths19updatePastTimeIndexER4Pathl+0xd>
     981:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
     985:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
     989:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int path_size = p.pathPoint.size();
     98d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     991:	48 83 c0 08          	add    $0x8,%rax
     995:	48 89 c7             	mov    %rax,%rdi
     998:	e8 00 00 00 00       	callq  99d <_ZN5Paths19updatePastTimeIndexER4Pathl+0x29>
     99d:	89 45 fc             	mov    %eax,-0x4(%rbp)
	//past_time_indexを更新する
	//past_time_index = Min{ i | past_time < p[i].time}
	for(int i = p.past_time_index; i < path_size; i++)
     9a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     9a4:	8b 40 20             	mov    0x20(%rax),%eax
     9a7:	89 45 f8             	mov    %eax,-0x8(%rbp)
     9aa:	eb 37                	jmp    9e3 <_ZN5Paths19updatePastTimeIndexER4Pathl+0x6f>
	{
		if(past_time < p.pathPoint[i].time)
     9ac:	8b 45 f8             	mov    -0x8(%rbp),%eax
     9af:	48 98                	cltq   
     9b1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     9b5:	48 83 c2 08          	add    $0x8,%rdx
     9b9:	48 89 c6             	mov    %rax,%rsi
     9bc:	48 89 d7             	mov    %rdx,%rdi
     9bf:	e8 00 00 00 00       	callq  9c4 <_ZN5Paths19updatePastTimeIndexER4Pathl+0x50>
     9c4:	48 8b 40 18          	mov    0x18(%rax),%rax
     9c8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
     9cc:	0f 9f c0             	setg   %al
     9cf:	84 c0                	test   %al,%al
     9d1:	74 0c                	je     9df <_ZN5Paths19updatePastTimeIndexER4Pathl+0x6b>
		{
			p.past_time_index = i;
     9d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     9d7:	8b 55 f8             	mov    -0x8(%rbp),%edx
     9da:	89 50 20             	mov    %edx,0x20(%rax)
			break;
     9dd:	eb 0c                	jmp    9eb <_ZN5Paths19updatePastTimeIndexER4Pathl+0x77>
void Paths::updatePastTimeIndex(Path& p, time_t past_time)
{
	int path_size = p.pathPoint.size();
	//past_time_indexを更新する
	//past_time_index = Min{ i | past_time < p[i].time}
	for(int i = p.past_time_index; i < path_size; i++)
     9df:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
     9e3:	8b 45 f8             	mov    -0x8(%rbp),%eax
     9e6:	3b 45 fc             	cmp    -0x4(%rbp),%eax
     9e9:	7c c1                	jl     9ac <_ZN5Paths19updatePastTimeIndexER4Pathl+0x38>
			p.past_time_index = i;
			break;
		}
	}
	//past_timeが軌道のどの時刻よりも大きい場合はpath_sizeを設定する
	if(p.pathPoint[path_size-1].time <= past_time)
     9eb:	8b 45 fc             	mov    -0x4(%rbp),%eax
     9ee:	83 e8 01             	sub    $0x1,%eax
     9f1:	48 98                	cltq   
     9f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     9f7:	48 83 c2 08          	add    $0x8,%rdx
     9fb:	48 89 c6             	mov    %rax,%rsi
     9fe:	48 89 d7             	mov    %rdx,%rdi
     a01:	e8 00 00 00 00       	callq  a06 <_ZN5Paths19updatePastTimeIndexER4Pathl+0x92>
     a06:	48 8b 40 18          	mov    0x18(%rax),%rax
     a0a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
     a0e:	0f 9e c0             	setle  %al
     a11:	84 c0                	test   %al,%al
     a13:	74 0a                	je     a1f <_ZN5Paths19updatePastTimeIndexER4Pathl+0xab>
	{
		p.past_time_index = path_size;
     a15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     a19:	8b 55 fc             	mov    -0x4(%rbp),%edx
     a1c:	89 50 20             	mov    %edx,0x20(%rax)
	}
}
     a1f:	c9                   	leaveq 
     a20:	c3                   	retq   
     a21:	90                   	nop

0000000000000a22 <_ZN5Paths14updateNowIndexER4Pathl>:

void Paths::updateNowIndex(Path& p, time_t now)
{
     a22:	55                   	push   %rbp
     a23:	48 89 e5             	mov    %rsp,%rbp
     a26:	48 83 ec 30          	sub    $0x30,%rsp
     a2a:	e8 00 00 00 00       	callq  a2f <_ZN5Paths14updateNowIndexER4Pathl+0xd>
     a2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
     a33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
     a37:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int path_size = p.pathPoint.size();
     a3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     a3f:	48 83 c0 08          	add    $0x8,%rax
     a43:	48 89 c7             	mov    %rax,%rdi
     a46:	e8 00 00 00 00       	callq  a4b <_ZN5Paths14updateNowIndexER4Pathl+0x29>
     a4b:	89 45 fc             	mov    %eax,-0x4(%rbp)
	
	//now_indexを更新する
	//now_index[n] = Min{ i | now < paths[n][i].time}
	for(int i = p.now_index; i < path_size; i++)
     a4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     a52:	8b 40 24             	mov    0x24(%rax),%eax
     a55:	89 45 f8             	mov    %eax,-0x8(%rbp)
     a58:	eb 37                	jmp    a91 <_ZN5Paths14updateNowIndexER4Pathl+0x6f>
	{
		if(now < p.pathPoint[i].time)
     a5a:	8b 45 f8             	mov    -0x8(%rbp),%eax
     a5d:	48 98                	cltq   
     a5f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     a63:	48 83 c2 08          	add    $0x8,%rdx
     a67:	48 89 c6             	mov    %rax,%rsi
     a6a:	48 89 d7             	mov    %rdx,%rdi
     a6d:	e8 00 00 00 00       	callq  a72 <_ZN5Paths14updateNowIndexER4Pathl+0x50>
     a72:	48 8b 40 18          	mov    0x18(%rax),%rax
     a76:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
     a7a:	0f 9f c0             	setg   %al
     a7d:	84 c0                	test   %al,%al
     a7f:	74 0c                	je     a8d <_ZN5Paths14updateNowIndexER4Pathl+0x6b>
		{
			p.now_index = i;
     a81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     a85:	8b 55 f8             	mov    -0x8(%rbp),%edx
     a88:	89 50 24             	mov    %edx,0x24(%rax)
			break;
     a8b:	eb 0c                	jmp    a99 <_ZN5Paths14updateNowIndexER4Pathl+0x77>
{
	int path_size = p.pathPoint.size();
	
	//now_indexを更新する
	//now_index[n] = Min{ i | now < paths[n][i].time}
	for(int i = p.now_index; i < path_size; i++)
     a8d:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
     a91:	8b 45 f8             	mov    -0x8(%rbp),%eax
     a94:	3b 45 fc             	cmp    -0x4(%rbp),%eax
     a97:	7c c1                	jl     a5a <_ZN5Paths14updateNowIndexER4Pathl+0x38>
			p.now_index = i;
			break;
		}
	}
	//nowが軌道のどの時刻よりも大きい場合はpath_sizeを設定する
	if(p.pathPoint[path_size-1].time <= now)
     a99:	8b 45 fc             	mov    -0x4(%rbp),%eax
     a9c:	83 e8 01             	sub    $0x1,%eax
     a9f:	48 98                	cltq   
     aa1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
     aa5:	48 83 c2 08          	add    $0x8,%rdx
     aa9:	48 89 c6             	mov    %rax,%rsi
     aac:	48 89 d7             	mov    %rdx,%rdi
     aaf:	e8 00 00 00 00       	callq  ab4 <_ZN5Paths14updateNowIndexER4Pathl+0x92>
     ab4:	48 8b 40 18          	mov    0x18(%rax),%rax
     ab8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
     abc:	0f 9e c0             	setle  %al
     abf:	84 c0                	test   %al,%al
     ac1:	74 0a                	je     acd <_ZN5Paths14updateNowIndexER4Pathl+0xab>
	{
		p.now_index = path_size;
     ac3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     ac7:	8b 55 fc             	mov    -0x4(%rbp),%edx
     aca:	89 50 24             	mov    %edx,0x24(%rax)
	}
}
     acd:	c9                   	leaveq 
     ace:	c3                   	retq   
     acf:	90                   	nop

0000000000000ad0 <_ZN5Paths12drawPathLineER4Pathll>:

void Paths::drawPathLine(Path& p, time_t past_time, time_t now)
{
     ad0:	55                   	push   %rbp
     ad1:	48 89 e5             	mov    %rsp,%rbp
     ad4:	53                   	push   %rbx
     ad5:	48 83 ec 68          	sub    $0x68,%rsp
     ad9:	e8 00 00 00 00       	callq  ade <_ZN5Paths12drawPathLineER4Pathll+0xe>
     ade:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
     ae2:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
     ae6:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
     aea:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
	int path_size = p.pathPoint.size();
     aee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     af2:	48 83 c0 08          	add    $0x8,%rax
     af6:	48 89 c7             	mov    %rax,%rdi
     af9:	e8 00 00 00 00       	callq  afe <_ZN5Paths12drawPathLineER4Pathll+0x2e>
     afe:	89 45 b4             	mov    %eax,-0x4c(%rbp)
	//past_pointを描画する
	glBegin(GL_TRIANGLE_STRIP);
     b01:	bf 05 00 00 00       	mov    $0x5,%edi
     b06:	e8 00 00 00 00       	callq  b0b <_ZN5Paths12drawPathLineER4Pathll+0x3b>
	//past_time_indexがpの両端のときは対象外の時刻なので描画しない
	if((p.past_time_index != 0) && (p.past_time_index != path_size))
     b0b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     b0f:	8b 40 20             	mov    0x20(%rax),%eax
     b12:	85 c0                	test   %eax,%eax
     b14:	0f 84 90 00 00 00    	je     baa <_ZN5Paths12drawPathLineER4Pathll+0xda>
     b1a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     b1e:	8b 40 20             	mov    0x20(%rax),%eax
     b21:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
     b24:	0f 84 80 00 00 00    	je     baa <_ZN5Paths12drawPathLineER4Pathll+0xda>
	{
		int i = p.past_time_index;
     b2a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     b2e:	8b 40 20             	mov    0x20(%rax),%eax
     b31:	89 45 b8             	mov    %eax,-0x48(%rbp)
		PathPoint past_point = getNowPoint(p.pathPoint[i-1], p.pathPoint[i], past_time);
     b34:	8b 45 b8             	mov    -0x48(%rbp),%eax
     b37:	48 98                	cltq   
     b39:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
     b3d:	48 83 c2 08          	add    $0x8,%rdx
     b41:	48 89 c6             	mov    %rax,%rsi
     b44:	48 89 d7             	mov    %rdx,%rdi
     b47:	e8 00 00 00 00       	callq  b4c <_ZN5Paths12drawPathLineER4Pathll+0x7c>
     b4c:	48 89 c3             	mov    %rax,%rbx
     b4f:	8b 45 b8             	mov    -0x48(%rbp),%eax
     b52:	83 e8 01             	sub    $0x1,%eax
     b55:	48 98                	cltq   
     b57:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
     b5b:	48 83 c2 08          	add    $0x8,%rdx
     b5f:	48 89 c6             	mov    %rax,%rsi
     b62:	48 89 d7             	mov    %rdx,%rdi
     b65:	e8 00 00 00 00       	callq  b6a <_ZN5Paths12drawPathLineER4Pathll+0x9a>
     b6a:	48 89 c2             	mov    %rax,%rdx
     b6d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     b71:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
     b75:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
     b79:	49 89 c8             	mov    %rcx,%r8
     b7c:	48 89 d9             	mov    %rbx,%rcx
     b7f:	48 89 c7             	mov    %rax,%rdi
     b82:	e8 00 00 00 00       	callq  b87 <_ZN5Paths12drawPathLineER4Pathll+0xb7>
		drawPath(past_point,now);
     b87:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
     b8b:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     b8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     b93:	48 89 ce             	mov    %rcx,%rsi
     b96:	48 89 c7             	mov    %rax,%rdi
     b99:	e8 00 00 00 00       	callq  b9e <_ZN5Paths12drawPathLineER4Pathll+0xce>
     b9e:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     ba2:	48 89 c7             	mov    %rax,%rdi
     ba5:	e8 00 00 00 00       	callq  baa <_ZN5Paths12drawPathLineER4Pathll+0xda>
	}
	//past_time_index <= i < now_indexとなるiのpath[n][i]を描画する
	//path_sizeに達したら描画を終了する
	for(int i = p.past_time_index; i < p.now_index; i++)
     baa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     bae:	8b 40 20             	mov    0x20(%rax),%eax
     bb1:	89 45 b0             	mov    %eax,-0x50(%rbp)
     bb4:	eb 32                	jmp    be8 <_ZN5Paths12drawPathLineER4Pathll+0x118>
	{
		//軌道を描画する
		drawPath(p.pathPoint[i],now);
     bb6:	8b 45 b0             	mov    -0x50(%rbp),%eax
     bb9:	48 98                	cltq   
     bbb:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
     bbf:	48 83 c2 08          	add    $0x8,%rdx
     bc3:	48 89 c6             	mov    %rax,%rsi
     bc6:	48 89 d7             	mov    %rdx,%rdi
     bc9:	e8 00 00 00 00       	callq  bce <_ZN5Paths12drawPathLineER4Pathll+0xfe>
     bce:	48 89 c1             	mov    %rax,%rcx
     bd1:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
     bd5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     bd9:	48 89 ce             	mov    %rcx,%rsi
     bdc:	48 89 c7             	mov    %rax,%rdi
     bdf:	e8 00 00 00 00       	callq  be4 <_ZN5Paths12drawPathLineER4Pathll+0x114>
		PathPoint past_point = getNowPoint(p.pathPoint[i-1], p.pathPoint[i], past_time);
		drawPath(past_point,now);
	}
	//past_time_index <= i < now_indexとなるiのpath[n][i]を描画する
	//path_sizeに達したら描画を終了する
	for(int i = p.past_time_index; i < p.now_index; i++)
     be4:	83 45 b0 01          	addl   $0x1,-0x50(%rbp)
     be8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     bec:	8b 40 24             	mov    0x24(%rax),%eax
     bef:	3b 45 b0             	cmp    -0x50(%rbp),%eax
     bf2:	7f c2                	jg     bb6 <_ZN5Paths12drawPathLineER4Pathll+0xe6>
		//軌道を描画する
		drawPath(p.pathPoint[i],now);
	}
	//now_indexがpaths[n]の両端のときは対象外の時刻なので描画しない
	//now_pointを描画する
	if((p.now_index != 0) && (p.now_index != path_size))
     bf4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     bf8:	8b 40 24             	mov    0x24(%rax),%eax
     bfb:	85 c0                	test   %eax,%eax
     bfd:	0f 84 90 00 00 00    	je     c93 <_ZN5Paths12drawPathLineER4Pathll+0x1c3>
     c03:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     c07:	8b 40 24             	mov    0x24(%rax),%eax
     c0a:	3b 45 b4             	cmp    -0x4c(%rbp),%eax
     c0d:	0f 84 80 00 00 00    	je     c93 <_ZN5Paths12drawPathLineER4Pathll+0x1c3>
	{
		int i = p.now_index;
     c13:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
     c17:	8b 40 24             	mov    0x24(%rax),%eax
     c1a:	89 45 bc             	mov    %eax,-0x44(%rbp)
		PathPoint now_point = getNowPoint(p.pathPoint[i-1],p.pathPoint[i],now);
     c1d:	8b 45 bc             	mov    -0x44(%rbp),%eax
     c20:	48 98                	cltq   
     c22:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
     c26:	48 83 c2 08          	add    $0x8,%rdx
     c2a:	48 89 c6             	mov    %rax,%rsi
     c2d:	48 89 d7             	mov    %rdx,%rdi
     c30:	e8 00 00 00 00       	callq  c35 <_ZN5Paths12drawPathLineER4Pathll+0x165>
     c35:	48 89 c3             	mov    %rax,%rbx
     c38:	8b 45 bc             	mov    -0x44(%rbp),%eax
     c3b:	83 e8 01             	sub    $0x1,%eax
     c3e:	48 98                	cltq   
     c40:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
     c44:	48 83 c2 08          	add    $0x8,%rdx
     c48:	48 89 c6             	mov    %rax,%rsi
     c4b:	48 89 d7             	mov    %rdx,%rdi
     c4e:	e8 00 00 00 00       	callq  c53 <_ZN5Paths12drawPathLineER4Pathll+0x183>
     c53:	48 89 c2             	mov    %rax,%rdx
     c56:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     c5a:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
     c5e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
     c62:	49 89 c8             	mov    %rcx,%r8
     c65:	48 89 d9             	mov    %rbx,%rcx
     c68:	48 89 c7             	mov    %rax,%rdi
     c6b:	e8 00 00 00 00       	callq  c70 <_ZN5Paths12drawPathLineER4Pathll+0x1a0>
		drawPath(now_point,now);
     c70:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
     c74:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     c78:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
     c7c:	48 89 ce             	mov    %rcx,%rsi
     c7f:	48 89 c7             	mov    %rax,%rdi
     c82:	e8 00 00 00 00       	callq  c87 <_ZN5Paths12drawPathLineER4Pathll+0x1b7>
     c87:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     c8b:	48 89 c7             	mov    %rax,%rdi
     c8e:	e8 00 00 00 00       	callq  c93 <_ZN5Paths12drawPathLineER4Pathll+0x1c3>
	}
	glEnd();
     c93:	e8 00 00 00 00       	callq  c98 <_ZN5Paths12drawPathLineER4Pathll+0x1c8>
     c98:	eb 34                	jmp    cce <_ZN5Paths12drawPathLineER4Pathll+0x1fe>
     c9a:	48 89 c3             	mov    %rax,%rbx
	//past_time_indexがpの両端のときは対象外の時刻なので描画しない
	if((p.past_time_index != 0) && (p.past_time_index != path_size))
	{
		int i = p.past_time_index;
		PathPoint past_point = getNowPoint(p.pathPoint[i-1], p.pathPoint[i], past_time);
		drawPath(past_point,now);
     c9d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     ca1:	48 89 c7             	mov    %rax,%rdi
     ca4:	e8 00 00 00 00       	callq  ca9 <_ZN5Paths12drawPathLineER4Pathll+0x1d9>
     ca9:	48 89 d8             	mov    %rbx,%rax
     cac:	48 89 c7             	mov    %rax,%rdi
     caf:	e8 00 00 00 00       	callq  cb4 <_ZN5Paths12drawPathLineER4Pathll+0x1e4>
     cb4:	48 89 c3             	mov    %rax,%rbx
	//now_pointを描画する
	if((p.now_index != 0) && (p.now_index != path_size))
	{
		int i = p.now_index;
		PathPoint now_point = getNowPoint(p.pathPoint[i-1],p.pathPoint[i],now);
		drawPath(now_point,now);
     cb7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     cbb:	48 89 c7             	mov    %rax,%rdi
     cbe:	e8 00 00 00 00       	callq  cc3 <_ZN5Paths12drawPathLineER4Pathll+0x1f3>
     cc3:	48 89 d8             	mov    %rbx,%rax
     cc6:	48 89 c7             	mov    %rax,%rdi
     cc9:	e8 00 00 00 00       	callq  cce <_ZN5Paths12drawPathLineER4Pathll+0x1fe>
	}
	glEnd();
}
     cce:	48 83 c4 68          	add    $0x68,%rsp
     cd2:	5b                   	pop    %rbx
     cd3:	5d                   	pop    %rbp
     cd4:	c3                   	retq   
     cd5:	90                   	nop

0000000000000cd6 <_ZN5Paths7displayEl>:

int Paths::display(time_t now)
{
     cd6:	55                   	push   %rbp
     cd7:	48 89 e5             	mov    %rsp,%rbp
     cda:	53                   	push   %rbx
     cdb:	48 83 ec 78          	sub    $0x78,%rsp
     cdf:	e8 00 00 00 00       	callq  ce4 <_ZN5Paths7displayEl+0xe>
     ce4:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
     ce8:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	
	if(timeSeparation.inNextInterval(now))
     cec:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     cf0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
     cf4:	48 89 d6             	mov    %rdx,%rsi
     cf7:	48 89 c7             	mov    %rax,%rdi
     cfa:	e8 00 00 00 00       	callq  cff <_ZN5Paths7displayEl+0x29>
     cff:	84 c0                	test   %al,%al
     d01:	0f 84 fc 00 00 00    	je     e03 <_ZN5Paths7displayEl+0x12d>
	{
		//別スレッドでのデータ取得の完了を待つ
		futureMakeBuffer.wait();
     d07:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     d0b:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
     d0f:	48 89 c7             	mov    %rax,%rdi
     d12:	e8 00 00 00 00       	callq  d17 <_ZN5Paths7displayEl+0x41>
		cout << "futureMakeBuffer.wait() finish." << endl;
     d17:	be 00 00 00 00       	mov    $0x0,%esi
     d1c:	bf 00 00 00 00       	mov    $0x0,%edi
     d21:	e8 00 00 00 00       	callq  d26 <_ZN5Paths7displayEl+0x50>
     d26:	be 00 00 00 00       	mov    $0x0,%esi
     d2b:	48 89 c7             	mov    %rax,%rdi
     d2e:	e8 00 00 00 00       	callq  d33 <_ZN5Paths7displayEl+0x5d>
		
		cout << "(*currentPaths).size() = " << (*currentPaths).size() << endl;
     d33:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     d37:	48 8b 40 68          	mov    0x68(%rax),%rax
     d3b:	48 89 c7             	mov    %rax,%rdi
     d3e:	e8 00 00 00 00       	callq  d43 <_ZN5Paths7displayEl+0x6d>
     d43:	48 89 c3             	mov    %rax,%rbx
     d46:	be 00 00 00 00       	mov    $0x0,%esi
     d4b:	bf 00 00 00 00       	mov    $0x0,%edi
     d50:	e8 00 00 00 00       	callq  d55 <_ZN5Paths7displayEl+0x7f>
     d55:	48 89 de             	mov    %rbx,%rsi
     d58:	48 89 c7             	mov    %rax,%rdi
     d5b:	e8 00 00 00 00       	callq  d60 <_ZN5Paths7displayEl+0x8a>
     d60:	be 00 00 00 00       	mov    $0x0,%esi
     d65:	48 89 c7             	mov    %rax,%rdi
     d68:	e8 00 00 00 00       	callq  d6d <_ZN5Paths7displayEl+0x97>
		cout << " (*bufferPaths).size() = " <<  (*bufferPaths).size() << endl;
     d6d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     d71:	48 8b 40 70          	mov    0x70(%rax),%rax
     d75:	48 89 c7             	mov    %rax,%rdi
     d78:	e8 00 00 00 00       	callq  d7d <_ZN5Paths7displayEl+0xa7>
     d7d:	48 89 c3             	mov    %rax,%rbx
     d80:	be 00 00 00 00       	mov    $0x0,%esi
     d85:	bf 00 00 00 00       	mov    $0x0,%edi
     d8a:	e8 00 00 00 00       	callq  d8f <_ZN5Paths7displayEl+0xb9>
     d8f:	48 89 de             	mov    %rbx,%rsi
     d92:	48 89 c7             	mov    %rax,%rdi
     d95:	e8 00 00 00 00       	callq  d9a <_ZN5Paths7displayEl+0xc4>
     d9a:	be 00 00 00 00       	mov    $0x0,%esi
     d9f:	48 89 c7             	mov    %rax,%rdi
     da2:	e8 00 00 00 00       	callq  da7 <_ZN5Paths7displayEl+0xd1>
		
		//バッファの入れ替え
		vector<Path>* dummy = bufferPaths;
     da7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     dab:	48 8b 40 70          	mov    0x70(%rax),%rax
     daf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		bufferPaths = currentPaths;
     db3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     db7:	48 8b 50 68          	mov    0x68(%rax),%rdx
     dbb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     dbf:	48 89 50 70          	mov    %rdx,0x70(%rax)
		currentPaths = dummy;
     dc3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     dc7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
     dcb:	48 89 50 68          	mov    %rdx,0x68(%rax)
		
		//now_indexとpast_time_indexの初期化
		this->resetTime();
     dcf:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     dd3:	48 89 c7             	mov    %rax,%rdi
     dd6:	e8 00 00 00 00       	callq  ddb <_ZN5Paths7displayEl+0x105>
		//区間を1つ進める
		timeSeparation.setNextInterval();
     ddb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     ddf:	48 89 c7             	mov    %rax,%rdi
     de2:	e8 00 00 00 00       	callq  de7 <_ZN5Paths7displayEl+0x111>
		
		//別スレッドで次の区間のトラックデータ取得開始
		this->runMakePathsBuffer(*bufferPaths, TimeSeparation::Position::next);
     de7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     deb:	48 8b 48 70          	mov    0x70(%rax),%rcx
     def:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     df3:	ba 01 00 00 00       	mov    $0x1,%edx
     df8:	48 89 ce             	mov    %rcx,%rsi
     dfb:	48 89 c7             	mov    %rax,%rdi
     dfe:	e8 00 00 00 00       	callq  e03 <_ZN5Paths7displayEl+0x12d>
	
	//航空機の軌道っぽいものを描く
	//隠面消去を無効にする
	//アルファブレンドで奥の透明オブジェクトが描画されないことがあるため
	//また、軌道の手前に描かれるオブジェクトがないため最後に描画すれば前後関係は崩れない
	glDisable(GL_DEPTH_TEST);
     e03:	bf 71 0b 00 00       	mov    $0xb71,%edi
     e08:	e8 00 00 00 00       	callq  e0d <_ZN5Paths7displayEl+0x137>
	//アルファブレンド有効化
	glEnable(GL_BLEND);
     e0d:	bf e2 0b 00 00       	mov    $0xbe2,%edi
     e12:	e8 00 00 00 00       	callq  e17 <_ZN5Paths7displayEl+0x141>
	//アルファブレンドの方法を指定
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
     e17:	be 03 03 00 00       	mov    $0x303,%esi
     e1c:	bf 02 03 00 00       	mov    $0x302,%edi
     e21:	e8 00 00 00 00       	callq  e26 <_ZN5Paths7displayEl+0x150>
	//描画を始める時刻
	time_t past_time = now - drawTimeWidth;
     e26:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     e2a:	8b 40 78             	mov    0x78(%rax),%eax
     e2d:	89 c0                	mov    %eax,%eax
     e2f:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
     e33:	48 29 c2             	sub    %rax,%rdx
     e36:	48 89 d0             	mov    %rdx,%rax
     e39:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	
	//描画した航空機数
	int ret = 0;
     e3d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
	
	//航空機毎に軌道を描画する
	for (auto&& p: *currentPaths)
     e44:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     e48:	48 8b 40 68          	mov    0x68(%rax),%rax
     e4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
     e50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     e54:	48 89 c7             	mov    %rax,%rdi
     e57:	e8 00 00 00 00       	callq  e5c <_ZN5Paths7displayEl+0x186>
     e5c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
     e60:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
     e64:	48 89 c7             	mov    %rax,%rdi
     e67:	e8 00 00 00 00       	callq  e6c <_ZN5Paths7displayEl+0x196>
     e6c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     e70:	e9 c0 00 00 00       	jmpq   f35 <_ZN5Paths7displayEl+0x25f>
     e75:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     e79:	48 89 c7             	mov    %rax,%rdi
     e7c:	e8 00 00 00 00       	callq  e81 <_ZN5Paths7displayEl+0x1ab>
     e81:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	{
		
		//past_timeより過去の軌道は描かない
		if (p.pathPoint.rbegin()->time < past_time )
     e85:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e89:	48 8d 50 08          	lea    0x8(%rax),%rdx
     e8d:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     e91:	48 89 d6             	mov    %rdx,%rsi
     e94:	48 89 c7             	mov    %rax,%rdi
     e97:	e8 00 00 00 00       	callq  e9c <_ZN5Paths7displayEl+0x1c6>
     e9c:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
     ea0:	48 89 c7             	mov    %rax,%rdi
     ea3:	e8 00 00 00 00       	callq  ea8 <_ZN5Paths7displayEl+0x1d2>
     ea8:	48 8b 40 18          	mov    0x18(%rax),%rax
     eac:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
     eb0:	0f 9c c0             	setl   %al
     eb3:	84 c0                	test   %al,%al
     eb5:	74 02                	je     eb9 <_ZN5Paths7displayEl+0x1e3>
		{
			continue;
     eb7:	eb 70                	jmp    f29 <_ZN5Paths7displayEl+0x253>
		}
		
		//未来の軌道は描かない
		if (p.pathPoint[0].time > now )
     eb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     ebd:	48 83 c0 08          	add    $0x8,%rax
     ec1:	be 00 00 00 00       	mov    $0x0,%esi
     ec6:	48 89 c7             	mov    %rax,%rdi
     ec9:	e8 00 00 00 00       	callq  ece <_ZN5Paths7displayEl+0x1f8>
     ece:	48 8b 40 18          	mov    0x18(%rax),%rax
     ed2:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
     ed6:	0f 9f c0             	setg   %al
     ed9:	84 c0                	test   %al,%al
     edb:	74 02                	je     edf <_ZN5Paths7displayEl+0x209>
		{
			continue;
     edd:	eb 4a                	jmp    f29 <_ZN5Paths7displayEl+0x253>
		}
		
		//past_time_indexを更新する
		this->updatePastTimeIndex(p, past_time);
     edf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
     ee3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     ee7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     eeb:	48 89 ce             	mov    %rcx,%rsi
     eee:	48 89 c7             	mov    %rax,%rdi
     ef1:	e8 00 00 00 00       	callq  ef6 <_ZN5Paths7displayEl+0x220>
		
		//now_indexを更新する
		this->updateNowIndex(p, now);
     ef6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
     efa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
     efe:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     f02:	48 89 ce             	mov    %rcx,%rsi
     f05:	48 89 c7             	mov    %rax,%rdi
     f08:	e8 00 00 00 00       	callq  f0d <_ZN5Paths7displayEl+0x237>
		
		//航空機の軌道に垂線をおろした帯状の図形を描画する
		this->drawPathLine(p, past_time, now);
     f0d:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
     f11:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
     f15:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
     f19:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     f1d:	48 89 c7             	mov    %rax,%rdi
     f20:	e8 00 00 00 00       	callq  f25 <_ZN5Paths7displayEl+0x24f>
		
		//描画した機数をカウント
		ret++;
     f25:	83 45 9c 01          	addl   $0x1,-0x64(%rbp)
	
	//描画した航空機数
	int ret = 0;
	
	//航空機毎に軌道を描画する
	for (auto&& p: *currentPaths)
     f29:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f2d:	48 89 c7             	mov    %rax,%rdi
     f30:	e8 00 00 00 00       	callq  f35 <_ZN5Paths7displayEl+0x25f>
     f35:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
     f39:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
     f3d:	48 89 d6             	mov    %rdx,%rsi
     f40:	48 89 c7             	mov    %rax,%rdi
     f43:	e8 00 00 00 00       	callq  f48 <_ZN5Paths7displayEl+0x272>
     f48:	84 c0                	test   %al,%al
     f4a:	0f 85 25 ff ff ff    	jne    e75 <_ZN5Paths7displayEl+0x19f>
		
		//描画した機数をカウント
		ret++;
	}
	//アルファブレンド無効化
	glDisable(GL_BLEND);
     f50:	bf e2 0b 00 00       	mov    $0xbe2,%edi
     f55:	e8 00 00 00 00       	callq  f5a <_ZN5Paths7displayEl+0x284>
	//デプスバッファ有効化
	glEnable(GL_DEPTH_TEST);
     f5a:	bf 71 0b 00 00       	mov    $0xb71,%edi
     f5f:	e8 00 00 00 00       	callq  f64 <_ZN5Paths7displayEl+0x28e>
	//航空機の軌道の描画完了
	
	return ret;
     f64:	8b 45 9c             	mov    -0x64(%rbp),%eax
}
     f67:	48 83 c4 78          	add    $0x78,%rsp
     f6b:	5b                   	pop    %rbx
     f6c:	5d                   	pop    %rbp
     f6d:	c3                   	retq   

0000000000000f6e <_ZSt7forwardIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceISA_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     f6e:	55                   	push   %rbp
     f6f:	48 89 e5             	mov    %rsp,%rbp
     f72:	48 83 ec 08          	sub    $0x8,%rsp
     f76:	e8 00 00 00 00       	callq  f7b <_ZSt7forwardIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceISA_E4typeE+0xd>
     f7b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
     f7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
     f83:	c9                   	leaveq 
     f84:	c3                   	retq   

0000000000000f85 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_>:


  /// async
  template<typename _Fn, typename... _Args>
    future<typename result_of<_Fn(_Args...)>::type>
    async(launch __policy, _Fn&& __fn, _Args&&... __args)
     f85:	55                   	push   %rbp
     f86:	48 89 e5             	mov    %rsp,%rbp
     f89:	53                   	push   %rbx
     f8a:	48 83 ec 78          	sub    $0x78,%rsp
     f8e:	e8 00 00 00 00       	callq  f93 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xe>
     f93:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
     f97:	89 75 94             	mov    %esi,-0x6c(%rbp)
     f9a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
    {
      typedef typename result_of<_Fn(_Args...)>::type result_type;
      std::shared_ptr<__future_base::_State_base> __state;
     f9e:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
     fa5:	00 
     fa6:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
     fad:	00 
      if ((__policy & (launch::async|launch::deferred)) == launch::async)
     fae:	be 02 00 00 00       	mov    $0x2,%esi
     fb3:	bf 01 00 00 00       	mov    $0x1,%edi
     fb8:	e8 00 00 00 00       	callq  fbd <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x38>
     fbd:	89 c2                	mov    %eax,%edx
     fbf:	8b 45 94             	mov    -0x6c(%rbp),%eax
     fc2:	89 d6                	mov    %edx,%esi
     fc4:	89 c7                	mov    %eax,%edi
     fc6:	e8 00 00 00 00       	callq  fcb <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x46>
     fcb:	83 f8 01             	cmp    $0x1,%eax
     fce:	0f 94 c0             	sete   %al
     fd1:	84 c0                	test   %al,%al
     fd3:	74 52                	je     1027 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xa2>
	{
	  __state = __future_base::_S_make_async_state(std::__bind_simple(
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
     fd5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
     fd9:	48 89 c7             	mov    %rax,%rdi
     fdc:	e8 8d ff ff ff       	callq  f6e <_ZSt7forwardIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceISA_E4typeE>
     fe1:	48 89 c2             	mov    %rax,%rdx
    {
      typedef typename result_of<_Fn(_Args...)>::type result_type;
      std::shared_ptr<__future_base::_State_base> __state;
      if ((__policy & (launch::async|launch::deferred)) == launch::async)
	{
	  __state = __future_base::_S_make_async_state(std::__bind_simple(
     fe4:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
     fe8:	48 89 d6             	mov    %rdx,%rsi
     feb:	48 89 c7             	mov    %rax,%rdi
     fee:	e8 13 02 00 00       	callq  1206 <_ZSt13__bind_simpleIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSB_DpOSC_>
     ff3:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
     ff7:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
     ffb:	48 89 d6             	mov    %rdx,%rsi
     ffe:	48 89 c7             	mov    %rax,%rdi
    1001:	e8 9c 02 00 00       	callq  12a2 <_ZNSt13__future_base19_S_make_async_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_>
    1006:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    100a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    100e:	48 89 d6             	mov    %rdx,%rsi
    1011:	48 89 c7             	mov    %rax,%rdi
    1014:	e8 00 00 00 00       	callq  1019 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x94>
    1019:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
    101d:	48 89 c7             	mov    %rax,%rdi
    1020:	e8 00 00 00 00       	callq  1025 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xa0>
    1025:	eb 50                	jmp    1077 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xf2>
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
	}
      else
	{
	  __state = __future_base::_S_make_deferred_state(std::__bind_simple(
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
    1027:	48 8b 45 88          	mov    -0x78(%rbp),%rax
    102b:	48 89 c7             	mov    %rax,%rdi
    102e:	e8 3b ff ff ff       	callq  f6e <_ZSt7forwardIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceISA_E4typeE>
    1033:	48 89 c2             	mov    %rax,%rdx
	  __state = __future_base::_S_make_async_state(std::__bind_simple(
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
	}
      else
	{
	  __state = __future_base::_S_make_deferred_state(std::__bind_simple(
    1036:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    103a:	48 89 d6             	mov    %rdx,%rsi
    103d:	48 89 c7             	mov    %rax,%rdi
    1040:	e8 c1 01 00 00       	callq  1206 <_ZSt13__bind_simpleIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSB_DpOSC_>
    1045:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    1049:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    104d:	48 89 d6             	mov    %rdx,%rsi
    1050:	48 89 c7             	mov    %rax,%rdi
    1053:	e8 e6 02 00 00       	callq  133e <_ZNSt13__future_base22_S_make_deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_>
    1058:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    105c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    1060:	48 89 d6             	mov    %rdx,%rsi
    1063:	48 89 c7             	mov    %rax,%rdi
    1066:	e8 00 00 00 00       	callq  106b <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xe6>
    106b:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    106f:	48 89 c7             	mov    %rax,%rdi
    1072:	e8 00 00 00 00       	callq  1077 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0xf2>
              std::forward<_Fn>(__fn), std::forward<_Args>(__args)...));
	}
      return future<result_type>(__state);
    1077:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
    107b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    107f:	48 89 d6             	mov    %rdx,%rsi
    1082:	48 89 c7             	mov    %rax,%rdi
    1085:	e8 00 00 00 00       	callq  108a <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x105>
    108a:	90                   	nop
    108b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    108f:	48 89 c7             	mov    %rax,%rdi
    1092:	e8 00 00 00 00       	callq  1097 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x112>
    1097:	eb 1a                	jmp    10b3 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x12e>
    1099:	48 89 c3             	mov    %rax,%rbx
    109c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    10a0:	48 89 c7             	mov    %rax,%rdi
    10a3:	e8 00 00 00 00       	callq  10a8 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x123>
    10a8:	48 89 d8             	mov    %rbx,%rax
    10ab:	48 89 c7             	mov    %rax,%rdi
    10ae:	e8 00 00 00 00       	callq  10b3 <_ZSt5asyncIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEESt6futureINSt9result_ofIFT_DpT0_EE4typeEESt6launchOSC_DpOSD_+0x12e>
    }
    10b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    10b7:	48 83 c4 78          	add    $0x78,%rsp
    10bb:	5b                   	pop    %rbx
    10bc:	5d                   	pop    %rbp
    10bd:	c3                   	retq   

00000000000010be <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_tailERS9_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
    10be:	55                   	push   %rbp
    10bf:	48 89 e5             	mov    %rsp,%rbp
    10c2:	48 83 ec 08          	sub    $0x8,%rsp
    10c6:	e8 00 00 00 00       	callq  10cb <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_tailERS9_+0xd>
    10cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    10cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    10d3:	c9                   	leaveq 
    10d4:	c3                   	retq   

00000000000010d5 <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EE7_M_headERS9_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    10d5:	55                   	push   %rbp
    10d6:	48 89 e5             	mov    %rsp,%rbp
    10d9:	48 83 ec 08          	sub    $0x8,%rsp
    10dd:	e8 00 00 00 00       	callq  10e2 <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EE7_M_headERS9_+0xd>
    10e2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    10e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    10ea:	c9                   	leaveq 
    10eb:	c3                   	retq   

00000000000010ec <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_headERS9_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    10ec:	55                   	push   %rbp
    10ed:	48 89 e5             	mov    %rsp,%rbp
    10f0:	48 83 ec 08          	sub    $0x8,%rsp
    10f4:	e8 00 00 00 00       	callq  10f9 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_headERS9_+0xd>
    10f9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    10fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1101:	48 89 c7             	mov    %rax,%rdi
    1104:	e8 cc ff ff ff       	callq  10d5 <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EE7_M_headERS9_>
    1109:	c9                   	leaveq 
    110a:	c3                   	retq   

000000000000110b <_ZSt7forwardIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceIS9_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    110b:	55                   	push   %rbp
    110c:	48 89 e5             	mov    %rsp,%rbp
    110f:	48 83 ec 08          	sub    $0x8,%rsp
    1113:	e8 00 00 00 00       	callq  1118 <_ZSt7forwardIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceIS9_E4typeE+0xd>
    1118:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    111c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1120:	c9                   	leaveq 
    1121:	c3                   	retq   

0000000000001122 <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2IS8_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
    1122:	55                   	push   %rbp
    1123:	48 89 e5             	mov    %rsp,%rbp
    1126:	48 83 ec 10          	sub    $0x10,%rsp
    112a:	e8 00 00 00 00       	callq  112f <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2IS8_EEOT_+0xd>
    112f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1133:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    1137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    113b:	48 89 c7             	mov    %rax,%rdi
    113e:	e8 c8 ff ff ff       	callq  110b <_ZSt7forwardIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceIS9_E4typeE>
    1143:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    1147:	48 8b 08             	mov    (%rax),%rcx
    114a:	48 89 0a             	mov    %rcx,(%rdx)
    114d:	48 8b 48 08          	mov    0x8(%rax),%rcx
    1151:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
    1155:	48 8b 40 10          	mov    0x10(%rax),%rax
    1159:	48 89 42 10          	mov    %rax,0x10(%rdx)
    115d:	c9                   	leaveq 
    115e:	c3                   	retq   
    115f:	90                   	nop

0000000000001160 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2EOS9_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
    1160:	55                   	push   %rbp
    1161:	48 89 e5             	mov    %rsp,%rbp
    1164:	48 83 ec 10          	sub    $0x10,%rsp
    1168:	e8 00 00 00 00       	callq  116d <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2EOS9_+0xd>
    116d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1171:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
    1175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1179:	48 89 c7             	mov    %rax,%rdi
    117c:	e8 3d ff ff ff       	callq  10be <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_tailERS9_>
    1181:	48 89 c7             	mov    %rax,%rdi
    1184:	e8 00 00 00 00       	callq  1189 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2EOS9_+0x29>
	_Base(std::forward<_Head>(_M_head(__in))) { }
    1189:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    118d:	48 89 c7             	mov    %rax,%rdi
    1190:	e8 57 ff ff ff       	callq  10ec <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_headERS9_>
    1195:	48 89 c7             	mov    %rax,%rdi
    1198:	e8 6e ff ff ff       	callq  110b <_ZSt7forwardIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceIS9_E4typeE>
    119d:	48 89 c2             	mov    %rax,%rdx
    11a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    11a4:	48 89 d6             	mov    %rdx,%rsi
    11a7:	48 89 c7             	mov    %rax,%rdi
    11aa:	e8 73 ff ff ff       	callq  1122 <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2IS8_EEOT_>
    11af:	c9                   	leaveq 
    11b0:	c3                   	retq   
    11b1:	90                   	nop

00000000000011b2 <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1EOS9_>:
        constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default; 
    11b2:	55                   	push   %rbp
    11b3:	48 89 e5             	mov    %rsp,%rbp
    11b6:	48 83 ec 10          	sub    $0x10,%rsp
    11ba:	e8 00 00 00 00       	callq  11bf <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1EOS9_+0xd>
    11bf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    11c3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    11c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    11cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    11cf:	48 89 d6             	mov    %rdx,%rsi
    11d2:	48 89 c7             	mov    %rax,%rdi
    11d5:	e8 86 ff ff ff       	callq  1160 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2EOS9_>
    11da:	c9                   	leaveq 
    11db:	c3                   	retq   

00000000000011dc <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1EOSA_>:
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;
    11dc:	55                   	push   %rbp
    11dd:	48 89 e5             	mov    %rsp,%rbp
    11e0:	48 83 ec 10          	sub    $0x10,%rsp
    11e4:	e8 00 00 00 00       	callq  11e9 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1EOSA_+0xd>
    11e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    11ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    11f1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    11f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    11f9:	48 89 d6             	mov    %rdx,%rsi
    11fc:	48 89 c7             	mov    %rax,%rdi
    11ff:	e8 ae ff ff ff       	callq  11b2 <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1EOS9_>
    1204:	c9                   	leaveq 
    1205:	c3                   	retq   

0000000000001206 <_ZSt13__bind_simpleIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSB_DpOSC_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
    1206:	55                   	push   %rbp
    1207:	48 89 e5             	mov    %rsp,%rbp
    120a:	48 83 ec 10          	sub    $0x10,%rsp
    120e:	e8 00 00 00 00       	callq  1213 <_ZSt13__bind_simpleIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSB_DpOSC_+0xd>
    1213:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1217:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
    121b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    121f:	48 89 c7             	mov    %rax,%rdi
    1222:	e8 47 fd ff ff       	callq  f6e <_ZSt7forwardIRZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceISA_E4typeE>
    1227:	48 89 c7             	mov    %rax,%rdi
    122a:	e8 67 01 00 00       	callq  1396 <_ZNSt26_Maybe_wrap_member_pointerIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_E9__do_wrapERKS8_>
    122f:	48 89 c2             	mov    %rax,%rdx
          std::forward<_Args>(__args)...);
    1232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1236:	48 89 d6             	mov    %rdx,%rsi
    1239:	48 89 c7             	mov    %rax,%rdi
    123c:	e8 03 02 00 00       	callq  1444 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1IIEvEERKS8_DpOT_>
    }
    1241:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1245:	c9                   	leaveq 
    1246:	c3                   	retq   

0000000000001247 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1247:	55                   	push   %rbp
    1248:	48 89 e5             	mov    %rsp,%rbp
    124b:	48 83 ec 08          	sub    $0x8,%rsp
    124f:	e8 00 00 00 00       	callq  1254 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_+0xd>
    1254:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1258:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    125c:	c9                   	leaveq 
    125d:	c3                   	retq   

000000000000125e <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
    125e:	55                   	push   %rbp
    125f:	48 89 e5             	mov    %rsp,%rbp
    1262:	48 83 ec 10          	sub    $0x10,%rsp
    1266:	e8 00 00 00 00       	callq  126b <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0xd>
    126b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    126f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1273:	48 83 c0 08          	add    $0x8,%rax
    1277:	48 89 c7             	mov    %rax,%rdi
    127a:	e8 00 00 00 00       	callq  127f <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0x21>
    127f:	c9                   	leaveq 
    1280:	c3                   	retq   
    1281:	90                   	nop

0000000000001282 <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    1282:	55                   	push   %rbp
    1283:	48 89 e5             	mov    %rsp,%rbp
    1286:	48 83 ec 10          	sub    $0x10,%rsp
    128a:	e8 00 00 00 00       	callq  128f <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev+0xd>
    128f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1293:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1297:	48 89 c7             	mov    %rax,%rdi
    129a:	e8 bf ff ff ff       	callq  125e <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev>
    129f:	c9                   	leaveq 
    12a0:	c3                   	retq   
    12a1:	90                   	nop

00000000000012a2 <_ZNSt13__future_base19_S_make_async_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_>:
      return std::make_shared<__state_type>(std::move(__fn));
    }

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_async_state(_BoundFn&& __fn)
    12a2:	55                   	push   %rbp
    12a3:	48 89 e5             	mov    %rsp,%rbp
    12a6:	48 83 ec 20          	sub    $0x20,%rsp
    12aa:	e8 00 00 00 00       	callq  12af <_ZNSt13__future_base19_S_make_async_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_+0xd>
    12af:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    12b3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Async_state_impl<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    12b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    12bb:	48 89 c7             	mov    %rax,%rdi
    12be:	e8 84 ff ff ff       	callq  1247 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_>
    12c3:	48 89 c2             	mov    %rax,%rdx
    12c6:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    12ca:	48 89 d6             	mov    %rdx,%rsi
    12cd:	48 89 c7             	mov    %rax,%rdi
    12d0:	e8 b0 01 00 00       	callq  1485 <_ZSt11make_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_>
    12d5:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    12d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    12dd:	48 89 d6             	mov    %rdx,%rsi
    12e0:	48 89 c7             	mov    %rax,%rdi
    12e3:	e8 2e 02 00 00       	callq  1516 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E>
    12e8:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    12ec:	48 89 c7             	mov    %rax,%rdi
    12ef:	e8 8e ff ff ff       	callq  1282 <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    }
    12f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    12f8:	c9                   	leaveq 
    12f9:	c3                   	retq   

00000000000012fa <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev>:
    12fa:	55                   	push   %rbp
    12fb:	48 89 e5             	mov    %rsp,%rbp
    12fe:	48 83 ec 10          	sub    $0x10,%rsp
    1302:	e8 00 00 00 00       	callq  1307 <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0xd>
    1307:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    130b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    130f:	48 83 c0 08          	add    $0x8,%rax
    1313:	48 89 c7             	mov    %rax,%rdi
    1316:	e8 00 00 00 00       	callq  131b <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0x21>
    131b:	c9                   	leaveq 
    131c:	c3                   	retq   
    131d:	90                   	nop

000000000000131e <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>:
    131e:	55                   	push   %rbp
    131f:	48 89 e5             	mov    %rsp,%rbp
    1322:	48 83 ec 10          	sub    $0x10,%rsp
    1326:	e8 00 00 00 00       	callq  132b <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev+0xd>
    132b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    132f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1333:	48 89 c7             	mov    %rax,%rdi
    1336:	e8 bf ff ff ff       	callq  12fa <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EED2Ev>
    133b:	c9                   	leaveq 
    133c:	c3                   	retq   
    133d:	90                   	nop

000000000000133e <_ZNSt13__future_base22_S_make_deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_>:
      _BoundFn _M_fn;
    };

  template<typename _BoundFn>
    inline std::shared_ptr<__future_base::_State_base>
    __future_base::_S_make_deferred_state(_BoundFn&& __fn)
    133e:	55                   	push   %rbp
    133f:	48 89 e5             	mov    %rsp,%rbp
    1342:	48 83 ec 20          	sub    $0x20,%rsp
    1346:	e8 00 00 00 00       	callq  134b <_ZNSt13__future_base22_S_make_deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEESt10shared_ptrINS_11_State_baseEEOT_+0xd>
    134b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    134f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      typedef typename remove_reference<_BoundFn>::type __fn_type;
      typedef _Deferred_state<__fn_type> __state_type;
      return std::make_shared<__state_type>(std::move(__fn));
    1353:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    1357:	48 89 c7             	mov    %rax,%rdi
    135a:	e8 e8 fe ff ff       	callq  1247 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_>
    135f:	48 89 c2             	mov    %rax,%rdx
    1362:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    1366:	48 89 d6             	mov    %rdx,%rsi
    1369:	48 89 c7             	mov    %rax,%rdi
    136c:	e8 da 01 00 00       	callq  154b <_ZSt11make_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_>
    1371:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
    1375:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1379:	48 89 d6             	mov    %rdx,%rsi
    137c:	48 89 c7             	mov    %rax,%rdi
    137f:	e8 58 02 00 00       	callq  15dc <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E>
    1384:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    1388:	48 89 c7             	mov    %rax,%rdi
    138b:	e8 8e ff ff ff       	callq  131e <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    }
    1390:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1394:	c9                   	leaveq 
    1395:	c3                   	retq   

0000000000001396 <_ZNSt26_Maybe_wrap_member_pointerIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_E9__do_wrapERKS8_>:
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
    1396:	55                   	push   %rbp
    1397:	48 89 e5             	mov    %rsp,%rbp
    139a:	48 83 ec 08          	sub    $0x8,%rsp
    139e:	e8 00 00 00 00       	callq  13a3 <_ZNSt26_Maybe_wrap_member_pointerIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_E9__do_wrapERKS8_+0xd>
    13a3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __x; }
    13a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    13ab:	c9                   	leaveq 
    13ac:	c3                   	retq   
    13ad:	90                   	nop

00000000000013ae <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2ERKS8_>:
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
    13ae:	55                   	push   %rbp
    13af:	48 89 e5             	mov    %rsp,%rbp
    13b2:	48 83 ec 10          	sub    $0x10,%rsp
    13b6:	e8 00 00 00 00       	callq  13bb <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2ERKS8_+0xd>
    13bb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    13bf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_head_impl(__h) { }
    13c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    13c7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    13cb:	48 8b 0a             	mov    (%rdx),%rcx
    13ce:	48 89 08             	mov    %rcx,(%rax)
    13d1:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
    13d5:	48 89 48 08          	mov    %rcx,0x8(%rax)
    13d9:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    13dd:	48 89 50 10          	mov    %rdx,0x10(%rax)
    13e1:	c9                   	leaveq 
    13e2:	c3                   	retq   
    13e3:	90                   	nop

00000000000013e4 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2ERKS8_>:

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit 
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
    13e4:	55                   	push   %rbp
    13e5:	48 89 e5             	mov    %rsp,%rbp
    13e8:	48 83 ec 10          	sub    $0x10,%rsp
    13ec:	e8 00 00 00 00       	callq  13f1 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2ERKS8_+0xd>
    13f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    13f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Inherited(__tail...), _Base(__head) { }
    13f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    13fd:	48 89 c7             	mov    %rax,%rdi
    1400:	e8 00 00 00 00       	callq  1405 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2ERKS8_+0x21>
    1405:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1409:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    140d:	48 89 d6             	mov    %rdx,%rsi
    1410:	48 89 c7             	mov    %rax,%rdi
    1413:	e8 96 ff ff ff       	callq  13ae <_ZNSt10_Head_baseILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_Lb0EEC2ERKS8_>
    1418:	c9                   	leaveq 
    1419:	c3                   	retq   

000000000000141a <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1ERKS8_>:
    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
    141a:	55                   	push   %rbp
    141b:	48 89 e5             	mov    %rsp,%rbp
    141e:	48 83 ec 10          	sub    $0x10,%rsp
    1422:	e8 00 00 00 00       	callq  1427 <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1ERKS8_+0xd>
    1427:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    142b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Inherited(__elements...) { }
    142f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1433:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1437:	48 89 d6             	mov    %rdx,%rsi
    143a:	48 89 c7             	mov    %rax,%rdi
    143d:	e8 a2 ff ff ff       	callq  13e4 <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC2ERKS8_>
    1442:	c9                   	leaveq 
    1443:	c3                   	retq   

0000000000001444 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1IIEvEERKS8_DpOT_>:
      typedef typename result_of<_Callable(_Args...)>::type result_type;

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(const _Callable& __callable, _Args2&&... __args)
    1444:	55                   	push   %rbp
    1445:	48 89 e5             	mov    %rsp,%rbp
    1448:	48 83 ec 10          	sub    $0x10,%rsp
    144c:	e8 00 00 00 00       	callq  1451 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1IIEvEERKS8_DpOT_+0xd>
    1451:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1455:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        : _M_bound(__callable, std::forward<_Args2>(__args)...)
    1459:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    145d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1461:	48 89 d6             	mov    %rdx,%rsi
    1464:	48 89 c7             	mov    %rax,%rdi
    1467:	e8 ae ff ff ff       	callq  141a <_ZNSt5tupleIIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EEC1ERKS8_>
        { }
    146c:	c9                   	leaveq 
    146d:	c3                   	retq   

000000000000146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    146e:	55                   	push   %rbp
    146f:	48 89 e5             	mov    %rsp,%rbp
    1472:	48 83 ec 08          	sub    $0x8,%rsp
    1476:	e8 00 00 00 00       	callq  147b <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE+0xd>
    147b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    147f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1483:	c9                   	leaveq 
    1484:	c3                   	retq   

0000000000001485 <_ZSt11make_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    1485:	55                   	push   %rbp
    1486:	48 89 e5             	mov    %rsp,%rbp
    1489:	53                   	push   %rbx
    148a:	48 83 ec 28          	sub    $0x28,%rsp
    148e:	e8 00 00 00 00       	callq  1493 <_ZSt11make_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0xe>
    1493:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1497:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
    149b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    149f:	48 89 c7             	mov    %rax,%rdi
    14a2:	e8 c7 ff ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    14a7:	48 89 c3             	mov    %rax,%rbx
    14aa:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    14ae:	48 89 c7             	mov    %rax,%rdi
    14b1:	e8 5c 01 00 00       	callq  1612 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev>
    14b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    14ba:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
    14be:	48 89 da             	mov    %rbx,%rdx
    14c1:	48 89 ce             	mov    %rcx,%rsi
    14c4:	48 89 c7             	mov    %rax,%rdi
    14c7:	e8 85 01 00 00       	callq  1651 <_ZSt15allocate_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_>
    14cc:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    14d0:	48 89 c7             	mov    %rax,%rdi
    14d3:	e8 5a 01 00 00       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    14d8:	eb 1a                	jmp    14f4 <_ZSt11make_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0x6f>
    14da:	48 89 c3             	mov    %rax,%rbx
    14dd:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    14e1:	48 89 c7             	mov    %rax,%rdi
    14e4:	e8 49 01 00 00       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    14e9:	48 89 d8             	mov    %rbx,%rax
    14ec:	48 89 c7             	mov    %rax,%rdi
    14ef:	e8 00 00 00 00       	callq  14f4 <_ZSt11make_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0x6f>
    }
    14f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    14f8:	48 83 c4 28          	add    $0x28,%rsp
    14fc:	5b                   	pop    %rbx
    14fd:	5d                   	pop    %rbp
    14fe:	c3                   	retq   

00000000000014ff <_ZSt4moveIRSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    14ff:	55                   	push   %rbp
    1500:	48 89 e5             	mov    %rsp,%rbp
    1503:	48 83 ec 08          	sub    $0x8,%rsp
    1507:	e8 00 00 00 00       	callq  150c <_ZSt4moveIRSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_+0xd>
    150c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1510:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1514:	c9                   	leaveq 
    1515:	c3                   	retq   

0000000000001516 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E>:
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
    1516:	55                   	push   %rbp
    1517:	48 89 e5             	mov    %rsp,%rbp
    151a:	48 83 ec 10          	sub    $0x10,%rsp
    151e:	e8 00 00 00 00       	callq  1523 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E+0xd>
    1523:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1527:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: __shared_ptr<_Tp>(std::move(__r)) { }
    152b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    152f:	48 89 c7             	mov    %rax,%rdi
    1532:	e8 c8 ff ff ff       	callq  14ff <_ZSt4moveIRSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>
    1537:	48 89 c2             	mov    %rax,%rdx
    153a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    153e:	48 89 d6             	mov    %rdx,%rsi
    1541:	48 89 c7             	mov    %rax,%rdi
    1544:	e8 53 01 00 00       	callq  169c <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE>
    1549:	c9                   	leaveq 
    154a:	c3                   	retq   

000000000000154b <_ZSt11make_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    154b:	55                   	push   %rbp
    154c:	48 89 e5             	mov    %rsp,%rbp
    154f:	53                   	push   %rbx
    1550:	48 83 ec 28          	sub    $0x28,%rsp
    1554:	e8 00 00 00 00       	callq  1559 <_ZSt11make_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0xe>
    1559:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    155d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
    1561:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1565:	48 89 c7             	mov    %rax,%rdi
    1568:	e8 01 ff ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    156d:	48 89 c3             	mov    %rax,%rbx
    1570:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    1574:	48 89 c7             	mov    %rax,%rdi
    1577:	e8 7c 01 00 00       	callq  16f8 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev>
    157c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1580:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
    1584:	48 89 da             	mov    %rbx,%rdx
    1587:	48 89 ce             	mov    %rcx,%rsi
    158a:	48 89 c7             	mov    %rax,%rdi
    158d:	e8 a5 01 00 00       	callq  1737 <_ZSt15allocate_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_>
    1592:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    1596:	48 89 c7             	mov    %rax,%rdi
    1599:	e8 7a 01 00 00       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    159e:	eb 1a                	jmp    15ba <_ZSt11make_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0x6f>
    15a0:	48 89 c3             	mov    %rax,%rbx
    15a3:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    15a7:	48 89 c7             	mov    %rax,%rdi
    15aa:	e8 69 01 00 00       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    15af:	48 89 d8             	mov    %rbx,%rax
    15b2:	48 89 c7             	mov    %rax,%rdi
    15b5:	e8 00 00 00 00       	callq  15ba <_ZSt11make_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEISD_EESt10shared_ptrIT_EDpOT0_+0x6f>
    }
    15ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    15be:	48 83 c4 28          	add    $0x28,%rsp
    15c2:	5b                   	pop    %rbx
    15c3:	5d                   	pop    %rbp
    15c4:	c3                   	retq   

00000000000015c5 <_ZSt4moveIRSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    15c5:	55                   	push   %rbp
    15c6:	48 89 e5             	mov    %rsp,%rbp
    15c9:	48 83 ec 08          	sub    $0x8,%rsp
    15cd:	e8 00 00 00 00       	callq  15d2 <_ZSt4moveIRSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_+0xd>
    15d2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    15d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    15da:	c9                   	leaveq 
    15db:	c3                   	retq   

00000000000015dc <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E>:
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
    15dc:	55                   	push   %rbp
    15dd:	48 89 e5             	mov    %rsp,%rbp
    15e0:	48 83 ec 10          	sub    $0x10,%rsp
    15e4:	e8 00 00 00 00       	callq  15e9 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_E+0xd>
    15e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    15ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: __shared_ptr<_Tp>(std::move(__r)) { }
    15f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    15f5:	48 89 c7             	mov    %rax,%rdi
    15f8:	e8 c8 ff ff ff       	callq  15c5 <_ZSt4moveIRSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>
    15fd:	48 89 c2             	mov    %rax,%rdx
    1600:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1604:	48 89 d6             	mov    %rdx,%rsi
    1607:	48 89 c7             	mov    %rax,%rdi
    160a:	e8 73 01 00 00       	callq  1782 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE>
    160f:	c9                   	leaveq 
    1610:	c3                   	retq   
    1611:	90                   	nop

0000000000001612 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
    1612:	55                   	push   %rbp
    1613:	48 89 e5             	mov    %rsp,%rbp
    1616:	48 83 ec 10          	sub    $0x10,%rsp
    161a:	e8 00 00 00 00       	callq  161f <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev+0xd>
    161f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1623:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1627:	48 89 c7             	mov    %rax,%rdi
    162a:	e8 af 01 00 00       	callq  17de <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev>
    162f:	c9                   	leaveq 
    1630:	c3                   	retq   
    1631:	90                   	nop

0000000000001632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    1632:	55                   	push   %rbp
    1633:	48 89 e5             	mov    %rsp,%rbp
    1636:	48 83 ec 10          	sub    $0x10,%rsp
    163a:	e8 00 00 00 00       	callq  163f <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev+0xd>
    163f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1643:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1647:	48 89 c7             	mov    %rax,%rdi
    164a:	e8 a3 01 00 00       	callq  17f2 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev>
    164f:	c9                   	leaveq 
    1650:	c3                   	retq   

0000000000001651 <_ZSt15allocate_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_>:
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    1651:	55                   	push   %rbp
    1652:	48 89 e5             	mov    %rsp,%rbp
    1655:	53                   	push   %rbx
    1656:	48 83 ec 38          	sub    $0x38,%rsp
    165a:	e8 00 00 00 00       	callq  165f <_ZSt15allocate_sharedINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_+0xe>
    165f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1663:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    1667:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
			     std::forward<_Args>(__args)...);
    166b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    166f:	48 89 c7             	mov    %rax,%rdi
    1672:	e8 f7 fd ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1677:	48 89 c2             	mov    %rax,%rdx
    167a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    167e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1682:	88 1c 24             	mov    %bl,(%rsp)
    1685:	48 89 ce             	mov    %rcx,%rsi
    1688:	48 89 c7             	mov    %rax,%rdi
    168b:	e8 76 01 00 00       	callq  1806 <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
    1690:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1694:	48 83 c4 38          	add    $0x38,%rsp
    1698:	5b                   	pop    %rbx
    1699:	5d                   	pop    %rbp
    169a:	c3                   	retq   
    169b:	90                   	nop

000000000000169c <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE>:
	__r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
    169c:	55                   	push   %rbp
    169d:	48 89 e5             	mov    %rsp,%rbp
    16a0:	48 83 ec 10          	sub    $0x10,%rsp
    16a4:	e8 00 00 00 00       	callq  16a9 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0xd>
    16a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    16ad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_ptr(__r._M_ptr), _M_refcount()
    16b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16b5:	48 8b 10             	mov    (%rax),%rdx
    16b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    16bc:	48 89 10             	mov    %rdx,(%rax)
    16bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    16c3:	48 83 c0 08          	add    $0x8,%rax
    16c7:	48 89 c7             	mov    %rax,%rdi
    16ca:	e8 00 00 00 00       	callq  16cf <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0x33>
	{
	  _M_refcount._M_swap(__r._M_refcount);
    16cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16d3:	48 8d 50 08          	lea    0x8(%rax),%rdx
    16d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    16db:	48 83 c0 08          	add    $0x8,%rax
    16df:	48 89 d6             	mov    %rdx,%rsi
    16e2:	48 89 c7             	mov    %rax,%rdi
    16e5:	e8 00 00 00 00       	callq  16ea <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0x4e>
	  __r._M_ptr = 0;
    16ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    16ee:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
    16f5:	c9                   	leaveq 
    16f6:	c3                   	retq   
    16f7:	90                   	nop

00000000000016f8 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
    16f8:	55                   	push   %rbp
    16f9:	48 89 e5             	mov    %rsp,%rbp
    16fc:	48 83 ec 10          	sub    $0x10,%rsp
    1700:	e8 00 00 00 00       	callq  1705 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1Ev+0xd>
    1705:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    170d:	48 89 c7             	mov    %rax,%rdi
    1710:	e8 37 01 00 00       	callq  184c <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev>
    1715:	c9                   	leaveq 
    1716:	c3                   	retq   
    1717:	90                   	nop

0000000000001718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    1718:	55                   	push   %rbp
    1719:	48 89 e5             	mov    %rsp,%rbp
    171c:	48 83 ec 10          	sub    $0x10,%rsp
    1720:	e8 00 00 00 00       	callq  1725 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev+0xd>
    1725:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1729:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    172d:	48 89 c7             	mov    %rax,%rdi
    1730:	e8 2b 01 00 00       	callq  1860 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev>
    1735:	c9                   	leaveq 
    1736:	c3                   	retq   

0000000000001737 <_ZSt15allocate_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_>:
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    1737:	55                   	push   %rbp
    1738:	48 89 e5             	mov    %rsp,%rbp
    173b:	53                   	push   %rbx
    173c:	48 83 ec 38          	sub    $0x38,%rsp
    1740:	e8 00 00 00 00       	callq  1745 <_ZSt15allocate_sharedINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_EISD_EESt10shared_ptrIT_ERKT0_DpOT1_+0xe>
    1745:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1749:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    174d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
			     std::forward<_Args>(__args)...);
    1751:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1755:	48 89 c7             	mov    %rax,%rdi
    1758:	e8 11 fd ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    175d:	48 89 c2             	mov    %rax,%rdx
    1760:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    1764:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1768:	88 1c 24             	mov    %bl,(%rsp)
    176b:	48 89 ce             	mov    %rcx,%rsi
    176e:	48 89 c7             	mov    %rax,%rdi
    1771:	e8 fe 00 00 00       	callq  1874 <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
    1776:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    177a:	48 83 c4 38          	add    $0x38,%rsp
    177e:	5b                   	pop    %rbx
    177f:	5d                   	pop    %rbp
    1780:	c3                   	retq   
    1781:	90                   	nop

0000000000001782 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE>:
	__r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
    1782:	55                   	push   %rbp
    1783:	48 89 e5             	mov    %rsp,%rbp
    1786:	48 83 ec 10          	sub    $0x10,%rsp
    178a:	e8 00 00 00 00       	callq  178f <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0xd>
    178f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1793:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_ptr(__r._M_ptr), _M_refcount()
    1797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    179b:	48 8b 10             	mov    (%rax),%rdx
    179e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    17a2:	48 89 10             	mov    %rdx,(%rax)
    17a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    17a9:	48 83 c0 08          	add    $0x8,%rax
    17ad:	48 89 c7             	mov    %rax,%rdi
    17b0:	e8 00 00 00 00       	callq  17b5 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0x33>
	{
	  _M_refcount._M_swap(__r._M_refcount);
    17b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    17b9:	48 8d 50 08          	lea    0x8(%rax),%rdx
    17bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    17c1:	48 83 c0 08          	add    $0x8,%rax
    17c5:	48 89 d6             	mov    %rdx,%rsi
    17c8:	48 89 c7             	mov    %rax,%rdi
    17cb:	e8 00 00 00 00       	callq  17d0 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEEvEEOS_IT_LS3_2EE+0x4e>
	  __r._M_ptr = 0;
    17d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    17d4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
    17db:	c9                   	leaveq 
    17dc:	c3                   	retq   
    17dd:	90                   	nop

00000000000017de <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    17de:	55                   	push   %rbp
    17df:	48 89 e5             	mov    %rsp,%rbp
    17e2:	48 83 ec 08          	sub    $0x8,%rsp
    17e6:	e8 00 00 00 00       	callq  17eb <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev+0xd>
    17eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    17ef:	c9                   	leaveq 
    17f0:	c3                   	retq   
    17f1:	90                   	nop

00000000000017f2 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    17f2:	55                   	push   %rbp
    17f3:	48 89 e5             	mov    %rsp,%rbp
    17f6:	48 83 ec 08          	sub    $0x8,%rsp
    17fa:	e8 00 00 00 00       	callq  17ff <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev+0xd>
    17ff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1803:	c9                   	leaveq 
    1804:	c3                   	retq   
    1805:	90                   	nop

0000000000001806 <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	}

    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    1806:	55                   	push   %rbp
    1807:	48 89 e5             	mov    %rsp,%rbp
    180a:	53                   	push   %rbx
    180b:	48 83 ec 28          	sub    $0x28,%rsp
    180f:	e8 00 00 00 00       	callq  1814 <_ZNSt10shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    1814:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1818:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    181c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
    1820:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1824:	48 89 c7             	mov    %rax,%rdi
    1827:	e8 42 fc ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    182c:	48 89 c2             	mov    %rax,%rdx
    182f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1833:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    1837:	88 1c 24             	mov    %bl,(%rsp)
    183a:	48 89 ce             	mov    %rcx,%rsi
    183d:	48 89 c7             	mov    %rax,%rdi
    1840:	e8 75 00 00 00       	callq  18ba <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
    1845:	48 83 c4 28          	add    $0x28,%rsp
    1849:	5b                   	pop    %rbx
    184a:	5d                   	pop    %rbp
    184b:	c3                   	retq   

000000000000184c <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    184c:	55                   	push   %rbp
    184d:	48 89 e5             	mov    %rsp,%rbp
    1850:	48 83 ec 08          	sub    $0x8,%rsp
    1854:	e8 00 00 00 00       	callq  1859 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2Ev+0xd>
    1859:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    185d:	c9                   	leaveq 
    185e:	c3                   	retq   
    185f:	90                   	nop

0000000000001860 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1860:	55                   	push   %rbp
    1861:	48 89 e5             	mov    %rsp,%rbp
    1864:	48 83 ec 08          	sub    $0x8,%rsp
    1868:	e8 00 00 00 00       	callq  186d <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED2Ev+0xd>
    186d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1871:	c9                   	leaveq 
    1872:	c3                   	retq   
    1873:	90                   	nop

0000000000001874 <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	}

    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    1874:	55                   	push   %rbp
    1875:	48 89 e5             	mov    %rsp,%rbp
    1878:	53                   	push   %rbx
    1879:	48 83 ec 28          	sub    $0x28,%rsp
    187d:	e8 00 00 00 00       	callq  1882 <_ZNSt10shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    1882:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1886:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    188a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
    188e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1892:	48 89 c7             	mov    %rax,%rdi
    1895:	e8 d4 fb ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    189a:	48 89 c2             	mov    %rax,%rdx
    189d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    18a1:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    18a5:	88 1c 24             	mov    %bl,(%rsp)
    18a8:	48 89 ce             	mov    %rcx,%rsi
    18ab:	48 89 c7             	mov    %rax,%rdi
    18ae:	e8 ab 00 00 00       	callq  195e <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
    18b3:	48 83 c4 28          	add    $0x28,%rsp
    18b7:	5b                   	pop    %rbx
    18b8:	5d                   	pop    %rbp
    18b9:	c3                   	retq   

00000000000018ba <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:

#ifdef __GXX_RTTI
    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    18ba:	55                   	push   %rbp
    18bb:	48 89 e5             	mov    %rsp,%rbp
    18be:	53                   	push   %rbx
    18bf:	48 83 ec 38          	sub    $0x38,%rsp
    18c3:	e8 00 00 00 00       	callq  18c8 <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    18c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    18cc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    18d0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		     _Args&&... __args)
	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
				std::forward<_Args>(__args)...)
    18d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    18d8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    18df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    18e3:	48 89 c7             	mov    %rax,%rdi
    18e6:	e8 83 fb ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    18eb:	48 89 c2             	mov    %rax,%rdx
    18ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    18f2:	48 8d 78 08          	lea    0x8(%rax),%rdi
    18f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    18fa:	88 1c 24             	mov    %bl,(%rsp)
    18fd:	48 89 d1             	mov    %rdx,%rcx
    1900:	48 89 c2             	mov    %rax,%rdx
    1903:	be 00 00 00 00       	mov    $0x0,%esi
    1908:	e8 23 01 00 00       	callq  1a30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>
	{
	  // _M_ptr needs to point to the newly constructed object.
	  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.
	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
    190d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1911:	48 83 c0 08          	add    $0x8,%rax
    1915:	be 00 00 00 00       	mov    $0x0,%esi
    191a:	48 89 c7             	mov    %rax,%rdi
    191d:	e8 00 00 00 00       	callq  1922 <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x68>
    1922:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_ptr = static_cast<_Tp*>(__p);
    1926:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    192a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    192e:	48 89 10             	mov    %rdx,(%rax)
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
    1931:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1935:	48 8b 10             	mov    (%rax),%rdx
    1938:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    193c:	48 8b 00             	mov    (%rax),%rax
    193f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    1943:	48 83 c1 08          	add    $0x8,%rcx
    1947:	48 89 c6             	mov    %rax,%rsi
    194a:	48 89 cf             	mov    %rcx,%rdi
    194d:	b8 00 00 00 00       	mov    $0x0,%eax
    1952:	e8 00 00 00 00       	callq  1957 <_ZNSt12__shared_ptrINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x9d>
	}
    1957:	48 83 c4 38          	add    $0x38,%rsp
    195b:	5b                   	pop    %rbx
    195c:	5d                   	pop    %rbp
    195d:	c3                   	retq   

000000000000195e <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:

#ifdef __GXX_RTTI
    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    195e:	55                   	push   %rbp
    195f:	48 89 e5             	mov    %rsp,%rbp
    1962:	53                   	push   %rbx
    1963:	48 83 ec 38          	sub    $0x38,%rsp
    1967:	e8 00 00 00 00       	callq  196c <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    196c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1970:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    1974:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		     _Args&&... __args)
	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
				std::forward<_Args>(__args)...)
    1978:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    197c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    1983:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1987:	48 89 c7             	mov    %rax,%rdi
    198a:	e8 df fa ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    198f:	48 89 c2             	mov    %rax,%rdx
    1992:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1996:	48 8d 78 08          	lea    0x8(%rax),%rdi
    199a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    199e:	88 1c 24             	mov    %bl,(%rsp)
    19a1:	48 89 d1             	mov    %rdx,%rcx
    19a4:	48 89 c2             	mov    %rax,%rdx
    19a7:	be 00 00 00 00       	mov    $0x0,%esi
    19ac:	e8 99 01 00 00       	callq  1b4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>
	{
	  // _M_ptr needs to point to the newly constructed object.
	  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.
	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
    19b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    19b5:	48 83 c0 08          	add    $0x8,%rax
    19b9:	be 00 00 00 00       	mov    $0x0,%esi
    19be:	48 89 c7             	mov    %rax,%rdi
    19c1:	e8 00 00 00 00       	callq  19c6 <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x68>
    19c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_ptr = static_cast<_Tp*>(__p);
    19ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    19ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    19d2:	48 89 10             	mov    %rdx,(%rax)
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
    19d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    19d9:	48 8b 10             	mov    (%rax),%rdx
    19dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    19e0:	48 8b 00             	mov    (%rax),%rax
    19e3:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    19e7:	48 83 c1 08          	add    $0x8,%rcx
    19eb:	48 89 c6             	mov    %rax,%rsi
    19ee:	48 89 cf             	mov    %rcx,%rdi
    19f1:	b8 00 00 00 00       	mov    $0x0,%eax
    19f6:	e8 00 00 00 00       	callq  19fb <_ZNSt12__shared_ptrINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISE_EISD_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x9d>
	}
    19fb:	48 83 c4 38          	add    $0x38,%rsp
    19ff:	5b                   	pop    %rbx
    1a00:	5d                   	pop    %rbp
    1a01:	c3                   	retq   

0000000000001a02 <_ZSt4moveIRKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1a02:	55                   	push   %rbp
    1a03:	48 89 e5             	mov    %rsp,%rbp
    1a06:	48 83 ec 08          	sub    $0x8,%rsp
    1a0a:	e8 00 00 00 00       	callq  1a0f <_ZSt4moveIRKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_+0xd>
    1a0f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1a13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1a17:	c9                   	leaveq 
    1a18:	c3                   	retq   

0000000000001a19 <_ZSt7forwardIKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    1a19:	55                   	push   %rbp
    1a1a:	48 89 e5             	mov    %rsp,%rbp
    1a1d:	48 83 ec 08          	sub    $0x8,%rsp
    1a21:	e8 00 00 00 00       	callq  1a26 <_ZSt7forwardIKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE+0xd>
    1a26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    1a2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1a2e:	c9                   	leaveq 
    1a2f:	c3                   	retq   

0000000000001a30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>:
	      __throw_exception_again;
	    }
	}

      template<typename _Tp, typename _Alloc, typename... _Args>
	__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
    1a30:	55                   	push   %rbp
    1a31:	48 89 e5             	mov    %rsp,%rbp
    1a34:	53                   	push   %rbx
    1a35:	48 83 ec 38          	sub    $0x38,%rsp
    1a39:	e8 00 00 00 00       	callq  1a3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe>
    1a3e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1a42:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    1a46:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    1a4a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
		       _Args&&... __args)
	: _M_pi(0)
    1a4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1a52:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	{
	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
    1a59:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    1a5d:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1a61:	48 89 d6             	mov    %rdx,%rsi
    1a64:	48 89 c7             	mov    %rax,%rdi
    1a67:	e8 ca 01 00 00       	callq  1c36 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
    1a6c:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1a70:	be 01 00 00 00       	mov    $0x1,%esi
    1a75:	48 89 c7             	mov    %rax,%rdi
    1a78:	e8 fc 01 00 00       	callq  1c79 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m>
    1a7d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
    1a81:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1a85:	48 89 c7             	mov    %rax,%rdi
    1a88:	e8 e1 f9 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1a8d:	48 89 c3             	mov    %rax,%rbx
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
    1a90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1a94:	48 89 c7             	mov    %rax,%rdi
    1a97:	e8 66 ff ff ff       	callq  1a02 <_ZSt4moveIRKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>
    1a9c:	48 89 c2             	mov    %rax,%rdx
    1a9f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    1aa3:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1aa7:	48 89 d9             	mov    %rbx,%rcx
    1aaa:	48 89 c7             	mov    %rax,%rdi
    1aad:	e8 f6 01 00 00       	callq  1ca8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_>
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
    1ab2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1ab6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1aba:	48 89 10             	mov    %rdx,(%rax)
	    }
	  __catch(...)
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
	      __throw_exception_again;
	    }
    1abd:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1ac1:	48 89 c7             	mov    %rax,%rdi
    1ac4:	e8 91 01 00 00       	callq  1c5a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    1ac9:	eb 49                	jmp    1b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
    1acb:	48 89 c3             	mov    %rax,%rbx
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
	    }
	  __catch(...)
    1ace:	e8 00 00 00 00       	callq  1ad3 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xa3>
    1ad3:	eb 28                	jmp    1afd <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xcd>
    1ad5:	48 89 c7             	mov    %rax,%rdi
    1ad8:	e8 00 00 00 00       	callq  1add <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xad>
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
    1add:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1ae1:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1ae5:	ba 01 00 00 00       	mov    $0x1,%edx
    1aea:	48 89 ce             	mov    %rcx,%rsi
    1aed:	48 89 c7             	mov    %rax,%rdi
    1af0:	e8 09 02 00 00       	callq  1cfe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>
	      __throw_exception_again;
    1af5:	e8 00 00 00 00       	callq  1afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xca>
    1afa:	48 89 c3             	mov    %rax,%rbx
	    }
    1afd:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1b01:	48 89 c7             	mov    %rax,%rdi
    1b04:	e8 51 01 00 00       	callq  1c5a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    1b09:	48 89 d8             	mov    %rbx,%rax
    1b0c:	48 89 c7             	mov    %rax,%rdi
    1b0f:	e8 00 00 00 00       	callq  1b14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
	}
    1b14:	48 83 c4 38          	add    $0x38,%rsp
    1b18:	5b                   	pop    %rbx
    1b19:	5d                   	pop    %rbp
    1b1a:	c3                   	retq   

0000000000001b1b <_ZSt4moveIRKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    1b1b:	55                   	push   %rbp
    1b1c:	48 89 e5             	mov    %rsp,%rbp
    1b1f:	48 83 ec 08          	sub    $0x8,%rsp
    1b23:	e8 00 00 00 00       	callq  1b28 <_ZSt4moveIRKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_+0xd>
    1b28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    1b2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1b30:	c9                   	leaveq 
    1b31:	c3                   	retq   

0000000000001b32 <_ZSt7forwardIKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    1b32:	55                   	push   %rbp
    1b33:	48 89 e5             	mov    %rsp,%rbp
    1b36:	48 83 ec 08          	sub    $0x8,%rsp
    1b3a:	e8 00 00 00 00       	callq  1b3f <_ZSt7forwardIKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE+0xd>
    1b3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    1b43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1b47:	c9                   	leaveq 
    1b48:	c3                   	retq   
    1b49:	90                   	nop

0000000000001b4a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>:
	      __throw_exception_again;
	    }
	}

      template<typename _Tp, typename _Alloc, typename... _Args>
	__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
    1b4a:	55                   	push   %rbp
    1b4b:	48 89 e5             	mov    %rsp,%rbp
    1b4e:	53                   	push   %rbx
    1b4f:	48 83 ec 38          	sub    $0x38,%rsp
    1b53:	e8 00 00 00 00       	callq  1b58 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe>
    1b58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    1b5c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    1b60:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    1b64:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
		       _Args&&... __args)
	: _M_pi(0)
    1b68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1b6c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	{
	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
    1b73:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    1b77:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1b7b:	48 89 d6             	mov    %rdx,%rsi
    1b7e:	48 89 c7             	mov    %rax,%rdi
    1b81:	e8 aa 01 00 00       	callq  1d30 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
    1b86:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1b8a:	be 01 00 00 00       	mov    $0x1,%esi
    1b8f:	48 89 c7             	mov    %rax,%rdi
    1b92:	e8 dc 01 00 00       	callq  1d73 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m>
    1b97:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
    1b9b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    1b9f:	48 89 c7             	mov    %rax,%rdi
    1ba2:	e8 c7 f8 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1ba7:	48 89 c3             	mov    %rax,%rbx
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
    1baa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    1bae:	48 89 c7             	mov    %rax,%rdi
    1bb1:	e8 65 ff ff ff       	callq  1b1b <_ZSt4moveIRKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEONSt16remove_referenceIT_E4typeEOSJ_>
    1bb6:	48 89 c2             	mov    %rax,%rdx
    1bb9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    1bbd:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1bc1:	48 89 d9             	mov    %rbx,%rcx
    1bc4:	48 89 c7             	mov    %rax,%rdi
    1bc7:	e8 d6 01 00 00       	callq  1da2 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_>
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
    1bcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1bd0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1bd4:	48 89 10             	mov    %rdx,(%rax)
	    }
	  __catch(...)
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
	      __throw_exception_again;
	    }
    1bd7:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1bdb:	48 89 c7             	mov    %rax,%rdi
    1bde:	e8 71 01 00 00       	callq  1d54 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    1be3:	eb 49                	jmp    1c2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
    1be5:	48 89 c3             	mov    %rax,%rbx
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
	    }
	  __catch(...)
    1be8:	e8 00 00 00 00       	callq  1bed <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xa3>
    1bed:	eb 28                	jmp    1c17 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xcd>
    1bef:	48 89 c7             	mov    %rax,%rdi
    1bf2:	e8 00 00 00 00       	callq  1bf7 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xad>
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
    1bf7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    1bfb:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1bff:	ba 01 00 00 00       	mov    $0x1,%edx
    1c04:	48 89 ce             	mov    %rcx,%rsi
    1c07:	48 89 c7             	mov    %rax,%rdi
    1c0a:	e8 e9 01 00 00       	callq  1df8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>
	      __throw_exception_again;
    1c0f:	e8 00 00 00 00       	callq  1c14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xca>
    1c14:	48 89 c3             	mov    %rax,%rbx
	    }
    1c17:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    1c1b:	48 89 c7             	mov    %rax,%rdi
    1c1e:	e8 31 01 00 00       	callq  1d54 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    1c23:	48 89 d8             	mov    %rbx,%rax
    1c26:	48 89 c7             	mov    %rax,%rdi
    1c29:	e8 00 00 00 00       	callq  1c2e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISI_EISH_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
	}
    1c2e:	48 83 c4 38          	add    $0x38,%rsp
    1c32:	5b                   	pop    %rbx
    1c33:	5d                   	pop    %rbp
    1c34:	c3                   	retq   
    1c35:	90                   	nop

0000000000001c36 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
    1c36:	55                   	push   %rbp
    1c37:	48 89 e5             	mov    %rsp,%rbp
    1c3a:	48 83 ec 10          	sub    $0x10,%rsp
    1c3e:	e8 00 00 00 00       	callq  1c43 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E+0xd>
    1c43:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1c47:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1c4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1c4f:	48 89 c7             	mov    %rax,%rdi
    1c52:	e8 d3 01 00 00       	callq  1e2a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev>
    1c57:	c9                   	leaveq 
    1c58:	c3                   	retq   
    1c59:	90                   	nop

0000000000001c5a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>:

      ~allocator() throw() { }
    1c5a:	55                   	push   %rbp
    1c5b:	48 89 e5             	mov    %rsp,%rbp
    1c5e:	48 83 ec 10          	sub    $0x10,%rsp
    1c62:	e8 00 00 00 00       	callq  1c67 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev+0xd>
    1c67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1c6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1c6f:	48 89 c7             	mov    %rax,%rdi
    1c72:	e8 c7 01 00 00       	callq  1e3e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev>
    1c77:	c9                   	leaveq 
    1c78:	c3                   	retq   

0000000000001c79 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(_Alloc& __a, size_type __n)
    1c79:	55                   	push   %rbp
    1c7a:	48 89 e5             	mov    %rsp,%rbp
    1c7d:	48 83 ec 10          	sub    $0x10,%rsp
    1c81:	e8 00 00 00 00       	callq  1c86 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m+0xd>
    1c86:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1c8a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    1c8e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    1c92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1c96:	ba 00 00 00 00       	mov    $0x0,%edx
    1c9b:	48 89 ce             	mov    %rcx,%rsi
    1c9e:	48 89 c7             	mov    %rax,%rdi
    1ca1:	e8 ac 01 00 00       	callq  1e52 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv>
    1ca6:	c9                   	leaveq 
    1ca7:	c3                   	retq   

0000000000001ca8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    1ca8:	55                   	push   %rbp
    1ca9:	48 89 e5             	mov    %rsp,%rbp
    1cac:	53                   	push   %rbx
    1cad:	48 83 ec 28          	sub    $0x28,%rsp
    1cb1:	e8 00 00 00 00       	callq  1cb6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_+0xe>
    1cb6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1cba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1cbe:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1cc2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    1cc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1cca:	48 89 c7             	mov    %rax,%rdi
    1ccd:	e8 9c f7 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1cd2:	48 89 c3             	mov    %rax,%rbx
    1cd5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1cd9:	48 89 c7             	mov    %rax,%rdi
    1cdc:	e8 38 fd ff ff       	callq  1a19 <_ZSt7forwardIKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    1ce1:	48 89 c2             	mov    %rax,%rdx
    1ce4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    1ce8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1cec:	48 89 d9             	mov    %rbx,%rcx
    1cef:	48 89 c7             	mov    %rax,%rdi
    1cf2:	e8 a5 01 00 00       	callq  1e9c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_>
    1cf7:	48 83 c4 28          	add    $0x28,%rsp
    1cfb:	5b                   	pop    %rbx
    1cfc:	5d                   	pop    %rbp
    1cfd:	c3                   	retq   

0000000000001cfe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>:
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    1cfe:	55                   	push   %rbp
    1cff:	48 89 e5             	mov    %rsp,%rbp
    1d02:	48 83 ec 20          	sub    $0x20,%rsp
    1d06:	e8 00 00 00 00       	callq  1d0b <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m+0xd>
    1d0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1d0f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1d13:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    1d17:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1d1b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    1d1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1d23:	48 89 ce             	mov    %rcx,%rsi
    1d26:	48 89 c7             	mov    %rax,%rdi
    1d29:	e8 c4 01 00 00       	callq  1ef2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m>
    1d2e:	c9                   	leaveq 
    1d2f:	c3                   	retq   

0000000000001d30 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
    1d30:	55                   	push   %rbp
    1d31:	48 89 e5             	mov    %rsp,%rbp
    1d34:	48 83 ec 10          	sub    $0x10,%rsp
    1d38:	e8 00 00 00 00       	callq  1d3d <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E+0xd>
    1d3d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1d41:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1d45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1d49:	48 89 c7             	mov    %rax,%rdi
    1d4c:	e8 c9 01 00 00       	callq  1f1a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev>
    1d51:	c9                   	leaveq 
    1d52:	c3                   	retq   
    1d53:	90                   	nop

0000000000001d54 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>:

      ~allocator() throw() { }
    1d54:	55                   	push   %rbp
    1d55:	48 89 e5             	mov    %rsp,%rbp
    1d58:	48 83 ec 10          	sub    $0x10,%rsp
    1d5c:	e8 00 00 00 00       	callq  1d61 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev+0xd>
    1d61:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1d65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1d69:	48 89 c7             	mov    %rax,%rdi
    1d6c:	e8 bd 01 00 00       	callq  1f2e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev>
    1d71:	c9                   	leaveq 
    1d72:	c3                   	retq   

0000000000001d73 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(_Alloc& __a, size_type __n)
    1d73:	55                   	push   %rbp
    1d74:	48 89 e5             	mov    %rsp,%rbp
    1d77:	48 83 ec 10          	sub    $0x10,%rsp
    1d7b:	e8 00 00 00 00       	callq  1d80 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSK_m+0xd>
    1d80:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1d84:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    1d88:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    1d8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1d90:	ba 00 00 00 00       	mov    $0x0,%edx
    1d95:	48 89 ce             	mov    %rcx,%rsi
    1d98:	48 89 c7             	mov    %rax,%rdi
    1d9b:	e8 a2 01 00 00       	callq  1f42 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv>
    1da0:	c9                   	leaveq 
    1da1:	c3                   	retq   

0000000000001da2 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    1da2:	55                   	push   %rbp
    1da3:	48 89 e5             	mov    %rsp,%rbp
    1da6:	53                   	push   %rbx
    1da7:	48 83 ec 28          	sub    $0x28,%rsp
    1dab:	e8 00 00 00 00       	callq  1db0 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISJ_IKSG_SE_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSK_PT_DpOSO_+0xe>
    1db0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1db4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1db8:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1dbc:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    1dc0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1dc4:	48 89 c7             	mov    %rax,%rdi
    1dc7:	e8 a2 f6 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1dcc:	48 89 c3             	mov    %rax,%rbx
    1dcf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1dd3:	48 89 c7             	mov    %rax,%rdi
    1dd6:	e8 57 fd ff ff       	callq  1b32 <_ZSt7forwardIKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    1ddb:	48 89 c2             	mov    %rax,%rdx
    1dde:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    1de2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1de6:	48 89 d9             	mov    %rbx,%rcx
    1de9:	48 89 c7             	mov    %rax,%rdi
    1dec:	e8 a9 01 00 00       	callq  1f9a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_>
    1df1:	48 83 c4 28          	add    $0x28,%rsp
    1df5:	5b                   	pop    %rbx
    1df6:	5d                   	pop    %rbp
    1df7:	c3                   	retq   

0000000000001df8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>:
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    1df8:	55                   	push   %rbp
    1df9:	48 89 e5             	mov    %rsp,%rbp
    1dfc:	48 83 ec 20          	sub    $0x20,%rsp
    1e00:	e8 00 00 00 00       	callq  1e05 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m+0xd>
    1e05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e09:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1e0d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    1e11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    1e15:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    1e19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e1d:	48 89 ce             	mov    %rcx,%rsi
    1e20:	48 89 c7             	mov    %rax,%rdi
    1e23:	e8 c8 01 00 00       	callq  1ff0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m>
    1e28:	c9                   	leaveq 
    1e29:	c3                   	retq   

0000000000001e2a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1e2a:	55                   	push   %rbp
    1e2b:	48 89 e5             	mov    %rsp,%rbp
    1e2e:	48 83 ec 08          	sub    $0x8,%rsp
    1e32:	e8 00 00 00 00       	callq  1e37 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev+0xd>
    1e37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e3b:	c9                   	leaveq 
    1e3c:	c3                   	retq   
    1e3d:	90                   	nop

0000000000001e3e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1e3e:	55                   	push   %rbp
    1e3f:	48 89 e5             	mov    %rsp,%rbp
    1e42:	48 83 ec 08          	sub    $0x8,%rsp
    1e46:	e8 00 00 00 00       	callq  1e4b <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev+0xd>
    1e4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e4f:	c9                   	leaveq 
    1e50:	c3                   	retq   
    1e51:	90                   	nop

0000000000001e52 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    1e52:	55                   	push   %rbp
    1e53:	48 89 e5             	mov    %rsp,%rbp
    1e56:	48 83 ec 20          	sub    $0x20,%rsp
    1e5a:	e8 00 00 00 00       	callq  1e5f <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0xd>
    1e5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1e63:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1e67:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
    1e6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1e6f:	48 89 c7             	mov    %rax,%rdi
    1e72:	e8 a1 01 00 00       	callq  2018 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv>
    1e77:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    1e7b:	0f 92 c0             	setb   %al
    1e7e:	84 c0                	test   %al,%al
    1e80:	74 05                	je     1e87 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
    1e82:	e8 00 00 00 00       	callq  1e87 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    1e87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1e8b:	48 69 c0 b8 00 00 00 	imul   $0xb8,%rax,%rax
    1e92:	48 89 c7             	mov    %rax,%rdi
    1e95:	e8 00 00 00 00       	callq  1e9a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x48>
      }
    1e9a:	c9                   	leaveq 
    1e9b:	c3                   	retq   

0000000000001e9c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    1e9c:	55                   	push   %rbp
    1e9d:	48 89 e5             	mov    %rsp,%rbp
    1ea0:	53                   	push   %rbx
    1ea1:	48 83 ec 28          	sub    $0x28,%rsp
    1ea5:	e8 00 00 00 00       	callq  1eaa <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_+0xe>
    1eaa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1eae:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1eb2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1eb6:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    1eba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1ebe:	48 89 c7             	mov    %rax,%rdi
    1ec1:	e8 a8 f5 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1ec6:	48 89 c3             	mov    %rax,%rbx
    1ec9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1ecd:	48 89 c7             	mov    %rax,%rdi
    1ed0:	e8 44 fb ff ff       	callq  1a19 <_ZSt7forwardIKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    1ed5:	48 89 c2             	mov    %rax,%rdx
    1ed8:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    1edc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1ee0:	48 89 d9             	mov    %rbx,%rcx
    1ee3:	48 89 c7             	mov    %rax,%rdi
    1ee6:	e8 4b 01 00 00       	callq  2036 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_>
    1eeb:	48 83 c4 28          	add    $0x28,%rsp
    1eef:	5b                   	pop    %rbx
    1ef0:	5d                   	pop    %rbp
    1ef1:	c3                   	retq   

0000000000001ef2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    1ef2:	55                   	push   %rbp
    1ef3:	48 89 e5             	mov    %rsp,%rbp
    1ef6:	48 83 ec 20          	sub    $0x20,%rsp
    1efa:	e8 00 00 00 00       	callq  1eff <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m+0xd>
    1eff:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1f03:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1f07:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
    1f0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    1f0f:	48 89 c7             	mov    %rax,%rdi
    1f12:	e8 00 00 00 00       	callq  1f17 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m+0x25>
    1f17:	c9                   	leaveq 
    1f18:	c3                   	retq   
    1f19:	90                   	nop

0000000000001f1a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1f1a:	55                   	push   %rbp
    1f1b:	48 89 e5             	mov    %rsp,%rbp
    1f1e:	48 83 ec 08          	sub    $0x8,%rsp
    1f22:	e8 00 00 00 00       	callq  1f27 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEEC2Ev+0xd>
    1f27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1f2b:	c9                   	leaveq 
    1f2c:	c3                   	retq   
    1f2d:	90                   	nop

0000000000001f2e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1f2e:	55                   	push   %rbp
    1f2f:	48 89 e5             	mov    %rsp,%rbp
    1f32:	48 83 ec 08          	sub    $0x8,%rsp
    1f36:	e8 00 00 00 00       	callq  1f3b <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEED2Ev+0xd>
    1f3b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1f3f:	c9                   	leaveq 
    1f40:	c3                   	retq   
    1f41:	90                   	nop

0000000000001f42 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    1f42:	55                   	push   %rbp
    1f43:	48 89 e5             	mov    %rsp,%rbp
    1f46:	48 83 ec 20          	sub    $0x20,%rsp
    1f4a:	e8 00 00 00 00       	callq  1f4f <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0xd>
    1f4f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    1f53:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    1f57:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
    1f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    1f5f:	48 89 c7             	mov    %rax,%rdi
    1f62:	e8 8f 01 00 00       	callq  20f6 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv>
    1f67:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    1f6b:	0f 92 c0             	setb   %al
    1f6e:	84 c0                	test   %al,%al
    1f70:	74 05                	je     1f77 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
    1f72:	e8 00 00 00 00       	callq  1f77 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    1f77:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    1f7b:	48 89 d0             	mov    %rdx,%rax
    1f7e:	48 c1 e0 02          	shl    $0x2,%rax
    1f82:	48 01 d0             	add    %rdx,%rax
    1f85:	48 c1 e0 02          	shl    $0x2,%rax
    1f89:	48 01 d0             	add    %rdx,%rax
    1f8c:	48 c1 e0 03          	shl    $0x3,%rax
    1f90:	48 89 c7             	mov    %rax,%rdi
    1f93:	e8 00 00 00 00       	callq  1f98 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x56>
      }
    1f98:	c9                   	leaveq 
    1f99:	c3                   	retq   

0000000000001f9a <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    1f9a:	55                   	push   %rbp
    1f9b:	48 89 e5             	mov    %rsp,%rbp
    1f9e:	53                   	push   %rbx
    1f9f:	48 83 ec 28          	sub    $0x28,%rsp
    1fa3:	e8 00 00 00 00       	callq  1fa8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISJ_IKSG_SE_EEENSt9enable_ifIXsrNSL_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSK_PSQ_DpOSR_+0xe>
    1fa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    1fac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1fb0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    1fb4:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    1fb8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    1fbc:	48 89 c7             	mov    %rax,%rdi
    1fbf:	e8 aa f4 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    1fc4:	48 89 c3             	mov    %rax,%rbx
    1fc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    1fcb:	48 89 c7             	mov    %rax,%rdi
    1fce:	e8 5f fb ff ff       	callq  1b32 <_ZSt7forwardIKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    1fd3:	48 89 c2             	mov    %rax,%rdx
    1fd6:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    1fda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    1fde:	48 89 d9             	mov    %rbx,%rcx
    1fe1:	48 89 c7             	mov    %rax,%rdi
    1fe4:	e8 2b 01 00 00       	callq  2114 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_>
    1fe9:	48 83 c4 28          	add    $0x28,%rsp
    1fed:	5b                   	pop    %rbx
    1fee:	5d                   	pop    %rbp
    1fef:	c3                   	retq   

0000000000001ff0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    1ff0:	55                   	push   %rbp
    1ff1:	48 89 e5             	mov    %rsp,%rbp
    1ff4:	48 83 ec 20          	sub    $0x20,%rsp
    1ff8:	e8 00 00 00 00       	callq  1ffd <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m+0xd>
    1ffd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2001:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2005:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
    2009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    200d:	48 89 c7             	mov    %rax,%rdi
    2010:	e8 00 00 00 00       	callq  2015 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE10deallocateEPSJ_m+0x25>
    2015:	c9                   	leaveq 
    2016:	c3                   	retq   
    2017:	90                   	nop

0000000000002018 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    2018:	55                   	push   %rbp
    2019:	48 89 e5             	mov    %rsp,%rbp
    201c:	48 83 ec 08          	sub    $0x8,%rsp
    2020:	e8 00 00 00 00       	callq  2025 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv+0xd>
    2025:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
    2029:	48 b8 42 16 b2 90 85 	movabs $0x1642c8590b21642,%rax
    2030:	2c 64 01 
    2033:	c9                   	leaveq 
    2034:	c3                   	retq   
    2035:	90                   	nop

0000000000002036 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    2036:	55                   	push   %rbp
    2037:	48 89 e5             	mov    %rsp,%rbp
    203a:	41 56                	push   %r14
    203c:	41 55                	push   %r13
    203e:	41 54                	push   %r12
    2040:	53                   	push   %rbx
    2041:	48 83 ec 30          	sub    $0x30,%rsp
    2045:	e8 00 00 00 00       	callq  204a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x14>
    204a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    204e:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    2052:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    2056:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    205a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    205e:	48 89 c7             	mov    %rax,%rdi
    2061:	e8 b3 f9 ff ff       	callq  1a19 <_ZSt7forwardIKSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    2066:	48 89 c2             	mov    %rax,%rdx
    2069:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    206d:	48 89 d6             	mov    %rdx,%rsi
    2070:	48 89 c7             	mov    %rax,%rdi
    2073:	e8 5c 01 00 00       	callq  21d4 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    2078:	4c 8d 6d df          	lea    -0x21(%rbp),%r13
    207c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    2080:	48 89 c7             	mov    %rax,%rdi
    2083:	e8 e6 f3 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    2088:	49 89 c6             	mov    %rax,%r14
    208b:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    208f:	4c 89 e6             	mov    %r12,%rsi
    2092:	bf b8 00 00 00       	mov    $0xb8,%edi
    2097:	e8 00 00 00 00       	callq  209c <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x66>
    209c:	48 89 c3             	mov    %rax,%rbx
    209f:	48 85 db             	test   %rbx,%rbx
    20a2:	74 0e                	je     20b2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x7c>
    20a4:	4c 89 f2             	mov    %r14,%rdx
    20a7:	4c 89 ee             	mov    %r13,%rsi
    20aa:	48 89 df             	mov    %rbx,%rdi
    20ad:	e8 6c 01 00 00       	callq  221e <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_>
    20b2:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    20b6:	48 89 c7             	mov    %rax,%rdi
    20b9:	e8 74 f5 ff ff       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    20be:	eb 28                	jmp    20e8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0xb2>
    20c0:	49 89 c5             	mov    %rax,%r13
    20c3:	4c 89 e6             	mov    %r12,%rsi
    20c6:	48 89 df             	mov    %rbx,%rdi
    20c9:	e8 00 00 00 00       	callq  20ce <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x98>
    20ce:	4c 89 eb             	mov    %r13,%rbx
    20d1:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    20d5:	48 89 c7             	mov    %rax,%rdi
    20d8:	e8 55 f5 ff ff       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    20dd:	48 89 d8             	mov    %rbx,%rax
    20e0:	48 89 c7             	mov    %rax,%rdi
    20e3:	e8 00 00 00 00       	callq  20e8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0xb2>
    20e8:	48 83 c4 30          	add    $0x30,%rsp
    20ec:	5b                   	pop    %rbx
    20ed:	41 5c                	pop    %r12
    20ef:	41 5d                	pop    %r13
    20f1:	41 5e                	pop    %r14
    20f3:	5d                   	pop    %rbp
    20f4:	c3                   	retq   
    20f5:	90                   	nop

00000000000020f6 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    20f6:	55                   	push   %rbp
    20f7:	48 89 e5             	mov    %rsp,%rbp
    20fa:	48 83 ec 08          	sub    $0x8,%rsp
    20fe:	e8 00 00 00 00       	callq  2103 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE8max_sizeEv+0xd>
    2103:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
    2107:	48 b8 86 61 18 86 61 	movabs $0x186186186186186,%rax
    210e:	18 86 01 
    2111:	c9                   	leaveq 
    2112:	c3                   	retq   
    2113:	90                   	nop

0000000000002114 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    2114:	55                   	push   %rbp
    2115:	48 89 e5             	mov    %rsp,%rbp
    2118:	41 56                	push   %r14
    211a:	41 55                	push   %r13
    211c:	41 54                	push   %r12
    211e:	53                   	push   %rbx
    211f:	48 83 ec 30          	sub    $0x30,%rsp
    2123:	e8 00 00 00 00       	callq  2128 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x14>
    2128:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    212c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    2130:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    2134:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    2138:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    213c:	48 89 c7             	mov    %rax,%rdi
    213f:	e8 ee f9 ff ff       	callq  1b32 <_ZSt7forwardIKSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEEOT_RNSt16remove_referenceISH_E4typeE>
    2144:	48 89 c2             	mov    %rax,%rdx
    2147:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    214b:	48 89 d6             	mov    %rdx,%rsi
    214e:	48 89 c7             	mov    %rax,%rdi
    2151:	e8 98 01 00 00       	callq  22ee <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    2156:	4c 8d 6d df          	lea    -0x21(%rbp),%r13
    215a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    215e:	48 89 c7             	mov    %rax,%rdi
    2161:	e8 08 f3 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    2166:	49 89 c6             	mov    %rax,%r14
    2169:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    216d:	4c 89 e6             	mov    %r12,%rsi
    2170:	bf a8 00 00 00       	mov    $0xa8,%edi
    2175:	e8 00 00 00 00       	callq  217a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x66>
    217a:	48 89 c3             	mov    %rax,%rbx
    217d:	48 85 db             	test   %rbx,%rbx
    2180:	74 0e                	je     2190 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x7c>
    2182:	4c 89 f2             	mov    %r14,%rdx
    2185:	4c 89 ee             	mov    %r13,%rsi
    2188:	48 89 df             	mov    %rbx,%rdi
    218b:	e8 a8 01 00 00       	callq  2338 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_>
    2190:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    2194:	48 89 c7             	mov    %rax,%rdi
    2197:	e8 7c f5 ff ff       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    219c:	eb 28                	jmp    21c6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0xb2>
    219e:	49 89 c5             	mov    %rax,%r13
    21a1:	4c 89 e6             	mov    %r12,%rsi
    21a4:	48 89 df             	mov    %rbx,%rdi
    21a7:	e8 00 00 00 00       	callq  21ac <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0x98>
    21ac:	4c 89 eb             	mov    %r13,%rbx
    21af:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    21b3:	48 89 c7             	mov    %rax,%rdi
    21b6:	e8 5d f5 ff ff       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    21bb:	48 89 d8             	mov    %rbx,%rax
    21be:	48 89 c7             	mov    %rax,%rdi
    21c1:	e8 00 00 00 00       	callq  21c6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE9constructISJ_IKSH_SF_EEEvPT_DpOT0_+0xb2>
    21c6:	48 83 c4 30          	add    $0x30,%rsp
    21ca:	5b                   	pop    %rbx
    21cb:	41 5c                	pop    %r12
    21cd:	41 5d                	pop    %r13
    21cf:	41 5e                	pop    %r14
    21d1:	5d                   	pop    %rbp
    21d2:	c3                   	retq   
    21d3:	90                   	nop

00000000000021d4 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    21d4:	55                   	push   %rbp
    21d5:	48 89 e5             	mov    %rsp,%rbp
    21d8:	48 83 ec 10          	sub    $0x10,%rsp
    21dc:	e8 00 00 00 00       	callq  21e1 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_+0xd>
    21e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    21e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    21e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    21ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    21f1:	48 89 d6             	mov    %rdx,%rsi
    21f4:	48 89 c7             	mov    %rax,%rdi
    21f7:	e8 0c 02 00 00       	callq  2408 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_>
    21fc:	c9                   	leaveq 
    21fd:	c3                   	retq   

00000000000021fe <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>:
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      // Helper class that stores the pointer and also acts as an allocator.
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
    21fe:	55                   	push   %rbp
    21ff:	48 89 e5             	mov    %rsp,%rbp
    2202:	48 83 ec 10          	sub    $0x10,%rsp
    2206:	e8 00 00 00 00       	callq  220b <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev+0xd>
    220b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    220f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2213:	48 89 c7             	mov    %rax,%rdi
    2216:	e8 17 f4 ff ff       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    221b:	c9                   	leaveq 
    221c:	c3                   	retq   
    221d:	90                   	nop

000000000000221e <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_>:
	_Tp* _M_ptr;
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
    221e:	55                   	push   %rbp
    221f:	48 89 e5             	mov    %rsp,%rbp
    2222:	53                   	push   %rbx
    2223:	48 83 ec 38          	sub    $0x38,%rsp
    2227:	e8 00 00 00 00       	callq  222c <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xe>
    222c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    2230:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    2234:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: _M_impl(__a)
    2238:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    223c:	48 89 c7             	mov    %rax,%rdi
    223f:	e8 00 00 00 00       	callq  2244 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0x26>
    2244:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2248:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    224f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    2253:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    2257:	48 89 d6             	mov    %rdx,%rsi
    225a:	48 89 c7             	mov    %rax,%rdi
    225d:	e8 72 ff ff ff       	callq  21d4 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    2262:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2266:	48 8d 50 10          	lea    0x10(%rax),%rdx
    226a:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    226e:	48 89 c6             	mov    %rax,%rsi
    2271:	48 89 d7             	mov    %rdx,%rdi
    2274:	e8 a7 01 00 00       	callq  2420 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_>
    2279:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    227d:	48 89 c7             	mov    %rax,%rdi
    2280:	e8 ad f3 ff ff       	callq  1632 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
    2285:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2289:	48 8d 50 18          	lea    0x18(%rax),%rdx
    228d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2291:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
    2295:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2299:	48 89 c7             	mov    %rax,%rdi
    229c:	e8 cd f1 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    22a1:	48 89 c2             	mov    %rax,%rdx
    22a4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    22a8:	48 8b 48 10          	mov    0x10(%rax),%rcx
	: _M_impl(__a)
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
    22ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    22b0:	48 89 ce             	mov    %rcx,%rsi
    22b3:	48 89 c7             	mov    %rax,%rdi
    22b6:	e8 9a 01 00 00       	callq  2455 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_>
	      std::forward<_Args>(__args)...); // might throw
	}
    22bb:	eb 2a                	jmp    22e7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xc9>
    22bd:	48 89 c3             	mov    %rax,%rbx
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
	: _M_impl(__a)
    22c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    22c4:	48 83 c0 10          	add    $0x10,%rax
    22c8:	48 89 c7             	mov    %rax,%rdi
    22cb:	e8 2e ff ff ff       	callq  21fe <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    22d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    22d4:	48 89 c7             	mov    %rax,%rdi
    22d7:	e8 00 00 00 00       	callq  22dc <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xbe>
    22dc:	48 89 d8             	mov    %rbx,%rax
    22df:	48 89 c7             	mov    %rax,%rdi
    22e2:	e8 00 00 00 00       	callq  22e7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xc9>
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}
    22e7:	48 83 c4 38          	add    $0x38,%rsp
    22eb:	5b                   	pop    %rbx
    22ec:	5d                   	pop    %rbp
    22ed:	c3                   	retq   

00000000000022ee <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    22ee:	55                   	push   %rbp
    22ef:	48 89 e5             	mov    %rsp,%rbp
    22f2:	48 83 ec 10          	sub    $0x10,%rsp
    22f6:	e8 00 00 00 00       	callq  22fb <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_+0xd>
    22fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    22ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    2303:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2307:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    230b:	48 89 d6             	mov    %rdx,%rsi
    230e:	48 89 c7             	mov    %rax,%rdi
    2311:	e8 7c 01 00 00       	callq  2492 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_>
    2316:	c9                   	leaveq 
    2317:	c3                   	retq   

0000000000002318 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>:
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      // Helper class that stores the pointer and also acts as an allocator.
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
    2318:	55                   	push   %rbp
    2319:	48 89 e5             	mov    %rsp,%rbp
    231c:	48 83 ec 10          	sub    $0x10,%rsp
    2320:	e8 00 00 00 00       	callq  2325 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev+0xd>
    2325:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2329:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    232d:	48 89 c7             	mov    %rax,%rdi
    2330:	e8 e3 f3 ff ff       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
    2335:	c9                   	leaveq 
    2336:	c3                   	retq   
    2337:	90                   	nop

0000000000002338 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_>:
	_Tp* _M_ptr;
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
    2338:	55                   	push   %rbp
    2339:	48 89 e5             	mov    %rsp,%rbp
    233c:	53                   	push   %rbx
    233d:	48 83 ec 38          	sub    $0x38,%rsp
    2341:	e8 00 00 00 00       	callq  2346 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xe>
    2346:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    234a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    234e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: _M_impl(__a)
    2352:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2356:	48 89 c7             	mov    %rax,%rdi
    2359:	e8 00 00 00 00       	callq  235e <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0x26>
    235e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2362:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    2369:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    236d:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    2371:	48 89 d6             	mov    %rdx,%rsi
    2374:	48 89 c7             	mov    %rax,%rdi
    2377:	e8 72 ff ff ff       	callq  22ee <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    237c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2380:	48 8d 50 10          	lea    0x10(%rax),%rdx
    2384:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    2388:	48 89 c6             	mov    %rax,%rsi
    238b:	48 89 d7             	mov    %rdx,%rdi
    238e:	e8 17 01 00 00       	callq  24aa <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_>
    2393:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    2397:	48 89 c7             	mov    %rax,%rdi
    239a:	e8 79 f3 ff ff       	callq  1718 <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEED1Ev>
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
    239f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    23a3:	48 8d 50 18          	lea    0x18(%rax),%rdx
    23a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    23ab:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
    23af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    23b3:	48 89 c7             	mov    %rax,%rdi
    23b6:	e8 b3 f0 ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    23bb:	48 89 c2             	mov    %rax,%rdx
    23be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    23c2:	48 8b 48 10          	mov    0x10(%rax),%rcx
	: _M_impl(__a)
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
    23c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    23ca:	48 89 ce             	mov    %rcx,%rsi
    23cd:	48 89 c7             	mov    %rax,%rdi
    23d0:	e8 0a 01 00 00       	callq  24df <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_>
	      std::forward<_Args>(__args)...); // might throw
	}
    23d5:	eb 2a                	jmp    2401 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xc9>
    23d7:	48 89 c3             	mov    %rax,%rbx
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
	: _M_impl(__a)
    23da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    23de:	48 83 c0 10          	add    $0x10,%rax
    23e2:	48 89 c7             	mov    %rax,%rdi
    23e5:	e8 2e ff ff ff       	callq  2318 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    23ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    23ee:	48 89 c7             	mov    %rax,%rdi
    23f1:	e8 00 00 00 00       	callq  23f6 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xbe>
    23f6:	48 89 d8             	mov    %rbx,%rax
    23f9:	48 89 c7             	mov    %rax,%rdi
    23fc:	e8 00 00 00 00       	callq  2401 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEC1IISD_EEESF_DpOT_+0xc9>
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}
    2401:	48 83 c4 38          	add    $0x38,%rsp
    2405:	5b                   	pop    %rbx
    2406:	5d                   	pop    %rbp
    2407:	c3                   	retq   

0000000000002408 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    2408:	55                   	push   %rbp
    2409:	48 89 e5             	mov    %rsp,%rbp
    240c:	48 83 ec 10          	sub    $0x10,%rsp
    2410:	e8 00 00 00 00       	callq  2415 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_+0xd>
    2415:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2419:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    241d:	c9                   	leaveq 
    241e:	c3                   	retq   
    241f:	90                   	nop

0000000000002420 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_>:
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
      : public _Alloc           // copy constructor must not throw
      {
	_Impl(_Alloc __a) : _Alloc(__a), _M_ptr() { }
    2420:	55                   	push   %rbp
    2421:	48 89 e5             	mov    %rsp,%rbp
    2424:	48 83 ec 10          	sub    $0x10,%rsp
    2428:	e8 00 00 00 00       	callq  242d <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_+0xd>
    242d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2431:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2435:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    243d:	48 89 d6             	mov    %rdx,%rsi
    2440:	48 89 c7             	mov    %rax,%rdi
    2443:	e8 8c fd ff ff       	callq  21d4 <_ZNSaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    2448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    244c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    2453:	c9                   	leaveq 
    2454:	c3                   	retq   

0000000000002455 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    2455:	55                   	push   %rbp
    2456:	48 89 e5             	mov    %rsp,%rbp
    2459:	48 83 ec 20          	sub    $0x20,%rsp
    245d:	e8 00 00 00 00       	callq  2462 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_+0xd>
    2462:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2466:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    246a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    246e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2472:	48 89 c7             	mov    %rax,%rdi
    2475:	e8 f4 ef ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    247a:	48 89 c2             	mov    %rax,%rdx
    247d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2481:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2485:	48 89 ce             	mov    %rcx,%rsi
    2488:	48 89 c7             	mov    %rax,%rdi
    248b:	e8 8c 00 00 00       	callq  251c <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_>
    2490:	c9                   	leaveq 
    2491:	c3                   	retq   

0000000000002492 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_>:
    2492:	55                   	push   %rbp
    2493:	48 89 e5             	mov    %rsp,%rbp
    2496:	48 83 ec 10          	sub    $0x10,%rsp
    249a:	e8 00 00 00 00       	callq  249f <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC2ERKSG_+0xd>
    249f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    24a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    24a7:	c9                   	leaveq 
    24a8:	c3                   	retq   
    24a9:	90                   	nop

00000000000024aa <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_>:
    24aa:	55                   	push   %rbp
    24ab:	48 89 e5             	mov    %rsp,%rbp
    24ae:	48 83 ec 10          	sub    $0x10,%rsp
    24b2:	e8 00 00 00 00       	callq  24b7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESF_+0xd>
    24b7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    24bb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    24bf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    24c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    24c7:	48 89 d6             	mov    %rdx,%rsi
    24ca:	48 89 c7             	mov    %rax,%rdi
    24cd:	e8 1c fe ff ff       	callq  22ee <_ZNSaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEC1ERKSE_>
    24d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    24d6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    24dd:	c9                   	leaveq 
    24de:	c3                   	retq   

00000000000024df <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    24df:	55                   	push   %rbp
    24e0:	48 89 e5             	mov    %rsp,%rbp
    24e3:	48 83 ec 20          	sub    $0x20,%rsp
    24e7:	e8 00 00 00 00       	callq  24ec <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE9constructISE_ISD_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSF_PT_DpOSI_+0xd>
    24ec:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    24f0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    24f4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    24f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    24fc:	48 89 c7             	mov    %rax,%rdi
    24ff:	e8 6a ef ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    2504:	48 89 c2             	mov    %rax,%rdx
    2507:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    250b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    250f:	48 89 ce             	mov    %rcx,%rsi
    2512:	48 89 c7             	mov    %rax,%rdi
    2515:	e8 3f 00 00 00       	callq  2559 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_>
    251a:	c9                   	leaveq 
    251b:	c3                   	retq   

000000000000251c <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    251c:	55                   	push   %rbp
    251d:	48 89 e5             	mov    %rsp,%rbp
    2520:	48 83 ec 20          	sub    $0x20,%rsp
    2524:	e8 00 00 00 00       	callq  2529 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_+0xd>
    2529:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    252d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2531:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    2535:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2539:	48 89 c7             	mov    %rax,%rdi
    253c:	e8 2d ef ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    2541:	48 89 c2             	mov    %rax,%rdx
    2544:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    254c:	48 89 ce             	mov    %rcx,%rsi
    254f:	48 89 c7             	mov    %rax,%rdi
    2552:	e8 3f 00 00 00       	callq  2596 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_>
    2557:	c9                   	leaveq 
    2558:	c3                   	retq   

0000000000002559 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    2559:	55                   	push   %rbp
    255a:	48 89 e5             	mov    %rsp,%rbp
    255d:	48 83 ec 20          	sub    $0x20,%rsp
    2561:	e8 00 00 00 00       	callq  2566 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE12_S_constructISE_ISD_EEENSt9enable_ifIXsrNSG_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSF_PSK_DpOSL_+0xd>
    2566:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    256a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    256e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    2572:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2576:	48 89 c7             	mov    %rax,%rdi
    2579:	e8 f0 ee ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    257e:	48 89 c2             	mov    %rax,%rdx
    2581:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    2585:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2589:	48 89 ce             	mov    %rcx,%rsi
    258c:	48 89 c7             	mov    %rax,%rdi
    258f:	e8 7c 00 00 00       	callq  2610 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_>
    2594:	c9                   	leaveq 
    2595:	c3                   	retq   

0000000000002596 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    2596:	55                   	push   %rbp
    2597:	48 89 e5             	mov    %rsp,%rbp
    259a:	41 55                	push   %r13
    259c:	41 54                	push   %r12
    259e:	53                   	push   %rbx
    259f:	48 83 ec 28          	sub    $0x28,%rsp
    25a3:	e8 00 00 00 00       	callq  25a8 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x12>
    25a8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    25ac:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    25b0:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    25b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    25b8:	48 89 c7             	mov    %rax,%rdi
    25bb:	e8 ae ee ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    25c0:	49 89 c5             	mov    %rax,%r13
    25c3:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
    25c7:	4c 89 e6             	mov    %r12,%rsi
    25ca:	bf a0 00 00 00       	mov    $0xa0,%edi
    25cf:	e8 00 00 00 00       	callq  25d4 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x3e>
    25d4:	48 89 c3             	mov    %rax,%rbx
    25d7:	48 85 db             	test   %rbx,%rbx
    25da:	74 0d                	je     25e9 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x53>
    25dc:	4c 89 ee             	mov    %r13,%rsi
    25df:	48 89 df             	mov    %rbx,%rdi
    25e2:	e8 7d 01 00 00       	callq  2764 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_>
    25e7:	eb 1b                	jmp    2604 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    25e9:	eb 19                	jmp    2604 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    25eb:	49 89 c5             	mov    %rax,%r13
    25ee:	4c 89 e6             	mov    %r12,%rsi
    25f1:	48 89 df             	mov    %rbx,%rdi
    25f4:	e8 00 00 00 00       	callq  25f9 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x63>
    25f9:	4c 89 e8             	mov    %r13,%rax
    25fc:	48 89 c7             	mov    %rax,%rdi
    25ff:	e8 00 00 00 00       	callq  2604 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    2604:	48 83 c4 28          	add    $0x28,%rsp
    2608:	5b                   	pop    %rbx
    2609:	41 5c                	pop    %r12
    260b:	41 5d                	pop    %r13
    260d:	5d                   	pop    %rbp
    260e:	c3                   	retq   
    260f:	90                   	nop

0000000000002610 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    2610:	55                   	push   %rbp
    2611:	48 89 e5             	mov    %rsp,%rbp
    2614:	41 55                	push   %r13
    2616:	41 54                	push   %r12
    2618:	53                   	push   %rbx
    2619:	48 83 ec 28          	sub    $0x28,%rsp
    261d:	e8 00 00 00 00       	callq  2622 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x12>
    2622:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    2626:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    262a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    262e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2632:	48 89 c7             	mov    %rax,%rdi
    2635:	e8 34 ee ff ff       	callq  146e <_ZSt7forwardISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEOT_RNSt16remove_referenceISC_E4typeE>
    263a:	49 89 c5             	mov    %rax,%r13
    263d:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
    2641:	4c 89 e6             	mov    %r12,%rsi
    2644:	bf 90 00 00 00       	mov    $0x90,%edi
    2649:	e8 00 00 00 00       	callq  264e <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x3e>
    264e:	48 89 c3             	mov    %rax,%rbx
    2651:	48 85 db             	test   %rbx,%rbx
    2654:	74 0d                	je     2663 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x53>
    2656:	4c 89 ee             	mov    %r13,%rsi
    2659:	48 89 df             	mov    %rbx,%rdi
    265c:	e8 13 02 00 00       	callq  2874 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_>
    2661:	eb 1b                	jmp    267e <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    2663:	eb 19                	jmp    267e <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    2665:	49 89 c5             	mov    %rax,%r13
    2668:	4c 89 e6             	mov    %r12,%rsi
    266b:	48 89 df             	mov    %rbx,%rdi
    266e:	e8 00 00 00 00       	callq  2673 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x63>
    2673:	4c 89 e8             	mov    %r13,%rax
    2676:	48 89 c7             	mov    %rax,%rdi
    2679:	e8 00 00 00 00       	callq  267e <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE9constructISF_ISE_EEEvPT_DpOT0_+0x6e>
    267e:	48 83 c4 28          	add    $0x28,%rsp
    2682:	5b                   	pop    %rbx
    2683:	41 5c                	pop    %r12
    2685:	41 5d                	pop    %r13
    2687:	5d                   	pop    %rbp
    2688:	c3                   	retq   
    2689:	90                   	nop

000000000000268a <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv>:
    public:
      explicit
      _Async_state_impl(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      {
	_M_thread = std::thread{ [this] {
    268a:	55                   	push   %rbp
    268b:	48 89 e5             	mov    %rsp,%rbp
    268e:	53                   	push   %rbx
    268f:	48 83 ec 68          	sub    $0x68,%rsp
    2693:	e8 00 00 00 00       	callq  2698 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xe>
    2698:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    269c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    26a3:	00 00 
    26a5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    26a9:	31 c0                	xor    %eax,%eax
	  _M_set_result(_S_task_setter(_M_result, _M_fn));
    26ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    26af:	48 8b 00             	mov    (%rax),%rax
    26b2:	48 8d 90 88 00 00 00 	lea    0x88(%rax),%rdx
    26b9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    26bd:	48 8b 00             	mov    (%rax),%rax
    26c0:	48 8d 88 80 00 00 00 	lea    0x80(%rax),%rcx
    26c7:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    26cb:	48 89 ce             	mov    %rcx,%rsi
    26ce:	48 89 c7             	mov    %rax,%rdi
    26d1:	e8 58 02 00 00       	callq  292e <_ZNSt13__future_base14_S_task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEERSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEEENS_12_Task_setterIT_NSL_12element_type11result_typeEEERSL_OT0_>
    26d6:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    26da:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    26de:	48 89 d6             	mov    %rdx,%rsi
    26e1:	48 89 c7             	mov    %rax,%rdi
    26e4:	e8 00 00 00 00       	callq  26e9 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0x5f>
    26e9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    26ed:	48 8b 00             	mov    (%rax),%rax
    26f0:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    26f4:	ba 00 00 00 00       	mov    $0x0,%edx
    26f9:	48 89 ce             	mov    %rcx,%rsi
    26fc:	48 89 c7             	mov    %rax,%rdi
    26ff:	e8 00 00 00 00       	callq  2704 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0x7a>
    2704:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2708:	48 89 c7             	mov    %rax,%rdi
    270b:	e8 00 00 00 00       	callq  2710 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0x86>
    2710:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2714:	48 89 c7             	mov    %rax,%rdi
    2717:	e8 00 00 00 00       	callq  271c <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0x92>
        } };
    271c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2720:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2727:	00 00 
    2729:	74 32                	je     275d <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xd3>
    272b:	eb 2b                	jmp    2758 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xce>
    272d:	48 89 c3             	mov    %rax,%rbx
      explicit
      _Async_state_impl(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
      {
	_M_thread = std::thread{ [this] {
	  _M_set_result(_S_task_setter(_M_result, _M_fn));
    2730:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    2734:	48 89 c7             	mov    %rax,%rdi
    2737:	e8 00 00 00 00       	callq  273c <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xb2>
    273c:	eb 03                	jmp    2741 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xb7>
    273e:	48 89 c3             	mov    %rax,%rbx
    2741:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2745:	48 89 c7             	mov    %rax,%rdi
    2748:	e8 00 00 00 00       	callq  274d <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xc3>
    274d:	48 89 d8             	mov    %rbx,%rax
    2750:	48 89 c7             	mov    %rax,%rdi
    2753:	e8 00 00 00 00       	callq  2758 <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xce>
        } };
    2758:	e8 00 00 00 00       	callq  275d <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv+0xd3>
    275d:	48 83 c4 68          	add    $0x68,%rsp
    2761:	5b                   	pop    %rbx
    2762:	5d                   	pop    %rbp
    2763:	c3                   	retq   

0000000000002764 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_>:
    class __future_base::_Async_state_impl final
    : public __future_base::_Async_state_common
    {
    public:
      explicit
      _Async_state_impl(_BoundFn&& __fn)
    2764:	55                   	push   %rbp
    2765:	48 89 e5             	mov    %rsp,%rbp
    2768:	41 54                	push   %r12
    276a:	53                   	push   %rbx
    276b:	48 83 ec 30          	sub    $0x30,%rsp
    276f:	e8 00 00 00 00       	callq  2774 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x10>
    2774:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    2778:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
    277c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2780:	48 89 c7             	mov    %rax,%rdi
    2783:	e8 00 00 00 00       	callq  2788 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x24>
    2788:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    278c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    2793:	bf 10 00 00 00       	mov    $0x10,%edi
    2798:	e8 00 00 00 00       	callq  279d <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x39>
    279d:	48 89 c3             	mov    %rax,%rbx
    27a0:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    27a7:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
    27ae:	00 
    27af:	48 89 df             	mov    %rbx,%rdi
    27b2:	e8 00 00 00 00       	callq  27b7 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x53>
    27b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    27bb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
    27bf:	48 89 de             	mov    %rbx,%rsi
    27c2:	48 89 c7             	mov    %rax,%rdi
    27c5:	e8 00 00 00 00       	callq  27ca <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x66>
    27ca:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    27ce:	48 89 c7             	mov    %rax,%rdi
    27d1:	e8 71 ea ff ff       	callq  1247 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_>
    27d6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    27da:	48 81 c2 88 00 00 00 	add    $0x88,%rdx
    27e1:	48 89 c6             	mov    %rax,%rsi
    27e4:	48 89 d7             	mov    %rdx,%rdi
    27e7:	e8 f0 e9 ff ff       	callq  11dc <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1EOSA_>
      {
	_M_thread = std::thread{ [this] {
    27ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    27f0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    27f4:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    27f8:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    27fc:	48 89 d6             	mov    %rdx,%rsi
    27ff:	48 89 c7             	mov    %rax,%rdi
    2802:	e8 d7 01 00 00       	callq  29de <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_>
    2807:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    280b:	48 8d 50 70          	lea    0x70(%rax),%rdx
    280f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2813:	48 89 c6             	mov    %rax,%rsi
    2816:	48 89 d7             	mov    %rdx,%rdi
    2819:	e8 00 00 00 00       	callq  281e <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xba>
    281e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2822:	48 89 c7             	mov    %rax,%rdi
    2825:	e8 00 00 00 00       	callq  282a <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xc6>
    282a:	eb 3f                	jmp    286b <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x107>
    282c:	49 89 c4             	mov    %rax,%r12
    : public __future_base::_Async_state_common
    {
    public:
      explicit
      _Async_state_impl(_BoundFn&& __fn)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
    282f:	48 89 df             	mov    %rbx,%rdi
    2832:	e8 00 00 00 00       	callq  2837 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xd3>
    2837:	4c 89 e3             	mov    %r12,%rbx
    283a:	eb 18                	jmp    2854 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xf0>
    283c:	48 89 c3             	mov    %rax,%rbx
    283f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2843:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
    2847:	48 89 c7             	mov    %rax,%rdi
    284a:	e8 00 00 00 00       	callq  284f <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xeb>
    284f:	eb 03                	jmp    2854 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xf0>
    2851:	48 89 c3             	mov    %rax,%rbx
    2854:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    2858:	48 89 c7             	mov    %rax,%rdi
    285b:	e8 00 00 00 00       	callq  2860 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xfc>
    2860:	48 89 d8             	mov    %rbx,%rax
    2863:	48 89 c7             	mov    %rax,%rdi
    2866:	e8 00 00 00 00       	callq  286b <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x107>
      {
	_M_thread = std::thread{ [this] {
	  _M_set_result(_S_task_setter(_M_result, _M_fn));
        } };
      }
    286b:	48 83 c4 30          	add    $0x30,%rsp
    286f:	5b                   	pop    %rbx
    2870:	41 5c                	pop    %r12
    2872:	5d                   	pop    %rbp
    2873:	c3                   	retq   

0000000000002874 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_>:
    class __future_base::_Deferred_state final
    : public __future_base::_State_base
    {
    public:
      explicit
      _Deferred_state(_BoundFn&& __fn)
    2874:	55                   	push   %rbp
    2875:	48 89 e5             	mov    %rsp,%rbp
    2878:	41 54                	push   %r12
    287a:	53                   	push   %rbx
    287b:	48 83 ec 10          	sub    $0x10,%rsp
    287f:	e8 00 00 00 00       	callq  2884 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x10>
    2884:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2888:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_result(new _Result<_Res>()), _M_fn(std::move(__fn))
    288c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2890:	48 89 c7             	mov    %rax,%rdi
    2893:	e8 00 00 00 00       	callq  2898 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x24>
    2898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    289c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    28a3:	bf 10 00 00 00       	mov    $0x10,%edi
    28a8:	e8 00 00 00 00       	callq  28ad <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x39>
    28ad:	48 89 c3             	mov    %rax,%rbx
    28b0:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
    28b7:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
    28be:	00 
    28bf:	48 89 df             	mov    %rbx,%rdi
    28c2:	e8 00 00 00 00       	callq  28c7 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x53>
    28c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    28cb:	48 83 c0 70          	add    $0x70,%rax
    28cf:	48 89 de             	mov    %rbx,%rsi
    28d2:	48 89 c7             	mov    %rax,%rdi
    28d5:	e8 00 00 00 00       	callq  28da <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x66>
    28da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    28de:	48 89 c7             	mov    %rax,%rdi
    28e1:	e8 61 e9 ff ff       	callq  1247 <_ZSt4moveIRSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSE_>
    28e6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    28ea:	48 83 c2 78          	add    $0x78,%rdx
    28ee:	48 89 c6             	mov    %rax,%rsi
    28f1:	48 89 d7             	mov    %rdx,%rdi
    28f4:	e8 e3 e8 ff ff       	callq  11dc <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEC1EOSA_>
    28f9:	eb 2a                	jmp    2925 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xb1>
    28fb:	49 89 c4             	mov    %rax,%r12
    28fe:	48 89 df             	mov    %rbx,%rdi
    2901:	e8 00 00 00 00       	callq  2906 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x92>
    2906:	4c 89 e3             	mov    %r12,%rbx
    2909:	eb 03                	jmp    290e <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0x9a>
    290b:	48 89 c3             	mov    %rax,%rbx
    290e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2912:	48 89 c7             	mov    %rax,%rdi
    2915:	e8 00 00 00 00       	callq  291a <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xa6>
    291a:	48 89 d8             	mov    %rbx,%rax
    291d:	48 89 c7             	mov    %rax,%rdi
    2920:	e8 00 00 00 00       	callq  2925 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_+0xb1>
      { }
    2925:	48 83 c4 10          	add    $0x10,%rsp
    2929:	5b                   	pop    %rbx
    292a:	41 5c                	pop    %r12
    292c:	5d                   	pop    %rbp
    292d:	c3                   	retq   

000000000000292e <_ZNSt13__future_base14_S_task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEERSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEEENS_12_Task_setterIT_NSL_12element_type11result_typeEEERSL_OT0_>:
	     typename _Res = typename _Res_ptr::element_type::result_type>
      struct _Task_setter;

    template<typename _Res_ptr, typename _BoundFn>
      static _Task_setter<_Res_ptr>
      _S_task_setter(_Res_ptr& __ptr, _BoundFn&& __call)
    292e:	55                   	push   %rbp
    292f:	48 89 e5             	mov    %rsp,%rbp
    2932:	48 83 ec 30          	sub    $0x30,%rsp
    2936:	e8 00 00 00 00       	callq  293b <_ZNSt13__future_base14_S_task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEERSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEEENS_12_Task_setterIT_NSL_12element_type11result_typeEEERSL_OT0_+0xd>
    293b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    293f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2943:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      {
	return _Task_setter<_Res_ptr>{ __ptr, std::ref(__call) };
    2947:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    294b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
    294f:	48 89 10             	mov    %rdx,(%rax)
    2952:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    2956:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
    295a:	48 89 d6             	mov    %rdx,%rsi
    295d:	48 89 c7             	mov    %rax,%rdi
    2960:	e8 3d 01 00 00       	callq  2aa2 <_ZSt3refISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEESt17reference_wrapperIT_ERSD_>
    2965:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2969:	48 8d 50 08          	lea    0x8(%rax),%rdx
    296d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
    2971:	48 89 c6             	mov    %rax,%rsi
    2974:	48 89 d7             	mov    %rdx,%rdi
    2977:	e8 30 02 00 00       	callq  2bac <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_>
      }
    297c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2980:	c9                   	leaveq 
    2981:	c3                   	retq   

0000000000002982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    2982:	55                   	push   %rbp
    2983:	48 89 e5             	mov    %rsp,%rbp
    2986:	48 83 ec 08          	sub    $0x8,%rsp
    298a:	e8 00 00 00 00       	callq  298f <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE+0xd>
    298f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    2993:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2997:	c9                   	leaveq 
    2998:	c3                   	retq   
    2999:	90                   	nop

000000000000299a <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
    299a:	55                   	push   %rbp
    299b:	48 89 e5             	mov    %rsp,%rbp
    299e:	48 83 ec 10          	sub    $0x10,%rsp
    29a2:	e8 00 00 00 00       	callq  29a7 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0xd>
    29a7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    29ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29af:	48 83 c0 08          	add    $0x8,%rax
    29b3:	48 89 c7             	mov    %rax,%rdi
    29b6:	e8 00 00 00 00       	callq  29bb <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev+0x21>
    29bb:	c9                   	leaveq 
    29bc:	c3                   	retq   
    29bd:	90                   	nop

00000000000029be <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    29be:	55                   	push   %rbp
    29bf:	48 89 e5             	mov    %rsp,%rbp
    29c2:	48 83 ec 10          	sub    $0x10,%rsp
    29c6:	e8 00 00 00 00       	callq  29cb <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEED1Ev+0xd>
    29cb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    29cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    29d3:	48 89 c7             	mov    %rax,%rdi
    29d6:	e8 bf ff ff ff       	callq  299a <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EED2Ev>
    29db:	c9                   	leaveq 
    29dc:	c3                   	retq   
    29dd:	90                   	nop

00000000000029de <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_>:
    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
    29de:	55                   	push   %rbp
    29df:	48 89 e5             	mov    %rsp,%rbp
    29e2:	53                   	push   %rbx
    29e3:	48 83 ec 48          	sub    $0x48,%rsp
    29e7:	e8 00 00 00 00       	callq  29ec <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0xe>
    29ec:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
    29f0:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
    29f4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    29f8:	48 89 c7             	mov    %rax,%rdi
    29fb:	e8 00 00 00 00       	callq  2a00 <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0x22>
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
    2a00:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    2a04:	48 89 c7             	mov    %rax,%rdi
    2a07:	e8 76 ff ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    2a0c:	48 89 c2             	mov    %rax,%rdx

    template<typename _Callable, typename... _Args>
      explicit 
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
    2a0f:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    2a13:	48 89 d6             	mov    %rdx,%rsi
    2a16:	48 89 c7             	mov    %rax,%rdi
    2a19:	e8 5a 03 00 00       	callq  2d78 <_ZSt13__bind_simpleIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSI_DpOSJ_>
    2a1e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2a22:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2a26:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
    2a2a:	48 89 ce             	mov    %rcx,%rsi
    2a2d:	48 89 c7             	mov    %rax,%rdi
    2a30:	e8 9b 03 00 00       	callq  2dd0 <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEESt10shared_ptrINS_5_ImplIT_EEEOSM_>
    2a35:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2a39:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a3d:	48 89 d6             	mov    %rdx,%rsi
    2a40:	48 89 c7             	mov    %rax,%rdi
    2a43:	e8 dc 03 00 00       	callq  2e24 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS5_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSI_EUlvE_vEEEEvEEOS_IT_E>
    2a48:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
    2a4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    2a50:	48 89 d6             	mov    %rdx,%rsi
    2a53:	48 89 c7             	mov    %rax,%rdi
    2a56:	e8 00 00 00 00       	callq  2a5b <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0x7d>
    2a5b:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a5f:	48 89 c7             	mov    %rax,%rdi
    2a62:	e8 00 00 00 00       	callq  2a67 <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0x89>
    2a67:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2a6b:	48 89 c7             	mov    %rax,%rdi
    2a6e:	e8 4b ff ff ff       	callq  29be <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEED1Ev>
    2a73:	eb 26                	jmp    2a9b <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0xbd>
    2a75:	48 89 c3             	mov    %rax,%rbx
    2a78:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
    2a7c:	48 89 c7             	mov    %rax,%rdi
    2a7f:	e8 00 00 00 00       	callq  2a84 <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0xa6>
    2a84:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2a88:	48 89 c7             	mov    %rax,%rdi
    2a8b:	e8 2e ff ff ff       	callq  29be <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEED1Ev>
    2a90:	48 89 d8             	mov    %rbx,%rax
    2a93:	48 89 c7             	mov    %rax,%rdi
    2a96:	e8 00 00 00 00       	callq  2a9b <_ZNSt6threadC1IZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_IEEEOT_DpOT0_+0xbd>
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }
    2a9b:	48 83 c4 48          	add    $0x48,%rsp
    2a9f:	5b                   	pop    %rbx
    2aa0:	5d                   	pop    %rbp
    2aa1:	c3                   	retq   

0000000000002aa2 <_ZSt3refISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEESt17reference_wrapperIT_ERSD_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    2aa2:	55                   	push   %rbp
    2aa3:	48 89 e5             	mov    %rsp,%rbp
    2aa6:	48 83 ec 10          	sub    $0x10,%rsp
    2aaa:	e8 00 00 00 00       	callq  2aaf <_ZSt3refISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEESt17reference_wrapperIT_ERSD_+0xd>
    2aaf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2ab3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
    2ab7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2abb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2abf:	48 89 d6             	mov    %rdx,%rsi
    2ac2:	48 89 c7             	mov    %rax,%rdi
    2ac5:	e8 90 03 00 00       	callq  2e5a <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERSB_>
    2aca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2ace:	c9                   	leaveq 
    2acf:	c3                   	retq   

0000000000002ad0 <_ZNSt22_Maybe_get_result_typeILb1ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>:
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    2ad0:	55                   	push   %rbp
    2ad1:	48 89 e5             	mov    %rsp,%rbp
    2ad4:	48 83 ec 08          	sub    $0x8,%rsp
    2ad8:	e8 00 00 00 00       	callq  2add <_ZNSt22_Maybe_get_result_typeILb1ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev+0xd>
    2add:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2ae1:	c9                   	leaveq 
    2ae2:	c3                   	retq   
    2ae3:	90                   	nop

0000000000002ae4 <_ZNSt22_Weak_result_type_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
    2ae4:	55                   	push   %rbp
    2ae5:	48 89 e5             	mov    %rsp,%rbp
    2ae8:	48 83 ec 08          	sub    $0x8,%rsp
    2aec:	e8 00 00 00 00       	callq  2af1 <_ZNSt22_Weak_result_type_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev+0xd>
    2af1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2af9:	48 89 c7             	mov    %rax,%rdi
    2afc:	e8 cf ff ff ff       	callq  2ad0 <_ZNSt22_Maybe_get_result_typeILb1ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2b01:	c9                   	leaveq 
    2b02:	c3                   	retq   
    2b03:	90                   	nop

0000000000002b04 <_ZNSt17_Weak_result_typeISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
    2b04:	55                   	push   %rbp
    2b05:	48 89 e5             	mov    %rsp,%rbp
    2b08:	48 83 ec 08          	sub    $0x8,%rsp
    2b0c:	e8 00 00 00 00       	callq  2b11 <_ZNSt17_Weak_result_typeISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev+0xd>
    2b11:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2b15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b19:	48 89 c7             	mov    %rax,%rdi
    2b1c:	e8 c3 ff ff ff       	callq  2ae4 <_ZNSt22_Weak_result_type_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2b21:	c9                   	leaveq 
    2b22:	c3                   	retq   
    2b23:	90                   	nop

0000000000002b24 <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    2b24:	55                   	push   %rbp
    2b25:	48 89 e5             	mov    %rsp,%rbp
    2b28:	48 83 ec 08          	sub    $0x8,%rsp
    2b2c:	e8 00 00 00 00       	callq  2b31 <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev+0xd>
    2b31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b39:	48 89 c7             	mov    %rax,%rdi
    2b3c:	e8 c3 ff ff ff       	callq  2b04 <_ZNSt17_Weak_result_typeISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2b41:	c9                   	leaveq 
    2b42:	c3                   	retq   
    2b43:	90                   	nop

0000000000002b44 <_ZNSt23_Reference_wrapper_baseISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
    2b44:	55                   	push   %rbp
    2b45:	48 89 e5             	mov    %rsp,%rbp
    2b48:	48 83 ec 08          	sub    $0x8,%rsp
    2b4c:	e8 00 00 00 00       	callq  2b51 <_ZNSt23_Reference_wrapper_baseISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev+0xd>
    2b51:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b59:	48 89 c7             	mov    %rax,%rdi
    2b5c:	e8 c3 ff ff ff       	callq  2b24 <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2b61:	c9                   	leaveq 
    2b62:	c3                   	retq   
    2b63:	90                   	nop

0000000000002b64 <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERKSC_>:
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
    2b64:	55                   	push   %rbp
    2b65:	48 89 e5             	mov    %rsp,%rbp
    2b68:	48 83 ec 10          	sub    $0x10,%rsp
    2b6c:	e8 00 00 00 00       	callq  2b71 <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERKSC_+0xd>
    2b71:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2b75:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
    2b79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b7d:	48 89 c7             	mov    %rax,%rdi
    2b80:	e8 bf ff ff ff       	callq  2b44 <_ZNSt23_Reference_wrapper_baseISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2b85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2b89:	48 8b 10             	mov    (%rax),%rdx
    2b8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2b90:	48 89 10             	mov    %rdx,(%rax)
      { }
    2b93:	c9                   	leaveq 
    2b94:	c3                   	retq   

0000000000002b95 <_ZSt4moveIRSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEEONSt16remove_referenceIT_E4typeEOSG_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    2b95:	55                   	push   %rbp
    2b96:	48 89 e5             	mov    %rsp,%rbp
    2b99:	48 83 ec 08          	sub    $0x8,%rsp
    2b9d:	e8 00 00 00 00       	callq  2ba2 <_ZSt4moveIRSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEEONSt16remove_referenceIT_E4typeEOSG_+0xd>
    2ba2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2ba6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2baa:	c9                   	leaveq 
    2bab:	c3                   	retq   

0000000000002bac <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
    2bac:	55                   	push   %rbp
    2bad:	48 89 e5             	mov    %rsp,%rbp
    2bb0:	53                   	push   %rbx
    2bb1:	48 83 ec 28          	sub    $0x28,%rsp
    2bb5:	e8 00 00 00 00       	callq  2bba <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0xe>
    2bba:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    2bbe:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      function(_Functor __f)
      : _Function_base()
    2bc2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2bc6:	48 89 c7             	mov    %rax,%rdi
    2bc9:	e8 00 00 00 00       	callq  2bce <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0x22>
    2bce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2bd2:	48 89 c7             	mov    %rax,%rdi
    2bd5:	e8 00 00 00 00       	callq  2bda <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0x2e>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
    2bda:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2bde:	48 89 c7             	mov    %rax,%rdi
    2be1:	e8 aa 02 00 00       	callq  2e90 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE21_M_not_empty_functionISt17reference_wrapperISC_EEEbRKT_>
    2be6:	84 c0                	test   %al,%al
    2be8:	74 65                	je     2c4f <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0xa3>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
    2bea:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2bee:	48 89 c7             	mov    %rax,%rdi
    2bf1:	e8 9f ff ff ff       	callq  2b95 <_ZSt4moveIRSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEEONSt16remove_referenceIT_E4typeEOSG_>
    2bf6:	48 89 c2             	mov    %rax,%rdx
    2bf9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
    2bfd:	48 89 d6             	mov    %rdx,%rsi
    2c00:	48 89 c7             	mov    %rax,%rdi
    2c03:	e8 5c ff ff ff       	callq  2b64 <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERKSC_>
    2c08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2c0c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
    2c10:	48 89 d6             	mov    %rdx,%rsi
    2c13:	48 89 c7             	mov    %rax,%rdi
    2c16:	e8 8d 02 00 00       	callq  2ea8 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataSt17reference_wrapperISC_E>
	    _M_invoker = &_My_handler::_M_invoke;
    2c1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2c1f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    2c26:	00 
	    _M_manager = &_My_handler::_M_manager;
    2c27:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2c2b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
    2c32:	00 
    2c33:	eb 1a                	jmp    2c4f <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0xa3>
    2c35:	48 89 c3             	mov    %rax,%rbx

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
    2c38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    2c3c:	48 89 c7             	mov    %rax,%rdi
    2c3f:	e8 00 00 00 00       	callq  2c44 <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0x98>
    2c44:	48 89 d8             	mov    %rbx,%rax
    2c47:	48 89 c7             	mov    %rax,%rdi
    2c4a:	e8 00 00 00 00       	callq  2c4f <_ZNSt8functionIFvvEEC1ISt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEEvEET_+0xa3>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
	  }
      }
    2c4f:	48 83 c4 28          	add    $0x28,%rsp
    2c53:	5b                   	pop    %rbx
    2c54:	5d                   	pop    %rbp
    2c55:	c3                   	retq   

0000000000002c56 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_tailERSH_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
    2c56:	55                   	push   %rbp
    2c57:	48 89 e5             	mov    %rsp,%rbp
    2c5a:	48 83 ec 08          	sub    $0x8,%rsp
    2c5e:	e8 00 00 00 00       	callq  2c63 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_tailERSH_+0xd>
    2c63:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2c67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c6b:	c9                   	leaveq 
    2c6c:	c3                   	retq   

0000000000002c6d <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EE7_M_headERSH_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    2c6d:	55                   	push   %rbp
    2c6e:	48 89 e5             	mov    %rsp,%rbp
    2c71:	48 83 ec 08          	sub    $0x8,%rsp
    2c75:	e8 00 00 00 00       	callq  2c7a <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EE7_M_headERSH_+0xd>
    2c7a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2c7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c82:	c9                   	leaveq 
    2c83:	c3                   	retq   

0000000000002c84 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_headERSH_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    2c84:	55                   	push   %rbp
    2c85:	48 89 e5             	mov    %rsp,%rbp
    2c88:	48 83 ec 08          	sub    $0x8,%rsp
    2c8c:	e8 00 00 00 00       	callq  2c91 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_headERSH_+0xd>
    2c91:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2c95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2c99:	48 89 c7             	mov    %rax,%rdi
    2c9c:	e8 cc ff ff ff       	callq  2c6d <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EE7_M_headERSH_>
    2ca1:	c9                   	leaveq 
    2ca2:	c3                   	retq   
    2ca3:	90                   	nop

0000000000002ca4 <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EEC2ISG_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
    2ca4:	55                   	push   %rbp
    2ca5:	48 89 e5             	mov    %rsp,%rbp
    2ca8:	48 83 ec 10          	sub    $0x10,%rsp
    2cac:	e8 00 00 00 00       	callq  2cb1 <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EEC2ISG_EEOT_+0xd>
    2cb1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2cb5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
    2cb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2cbd:	48 89 c7             	mov    %rax,%rdi
    2cc0:	e8 bd fc ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    2cc5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2cc9:	48 8b 00             	mov    (%rax),%rax
    2ccc:	48 89 02             	mov    %rax,(%rdx)
    2ccf:	c9                   	leaveq 
    2cd0:	c3                   	retq   
    2cd1:	90                   	nop

0000000000002cd2 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2EOSH_>:
	  _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
    2cd2:	55                   	push   %rbp
    2cd3:	48 89 e5             	mov    %rsp,%rbp
    2cd6:	48 83 ec 10          	sub    $0x10,%rsp
    2cda:	e8 00 00 00 00       	callq  2cdf <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2EOSH_+0xd>
    2cdf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2ce3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
	              is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))), 
    2ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ceb:	48 89 c7             	mov    %rax,%rdi
    2cee:	e8 63 ff ff ff       	callq  2c56 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_tailERSH_>
    2cf3:	48 89 c7             	mov    %rax,%rdi
    2cf6:	e8 00 00 00 00       	callq  2cfb <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2EOSH_+0x29>
	_Base(std::forward<_Head>(_M_head(__in))) { }
    2cfb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2cff:	48 89 c7             	mov    %rax,%rdi
    2d02:	e8 7d ff ff ff       	callq  2c84 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_headERSH_>
    2d07:	48 89 c7             	mov    %rax,%rdi
    2d0a:	e8 73 fc ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    2d0f:	48 89 c2             	mov    %rax,%rdx
    2d12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d16:	48 89 d6             	mov    %rdx,%rsi
    2d19:	48 89 c7             	mov    %rax,%rdi
    2d1c:	e8 83 ff ff ff       	callq  2ca4 <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EEC2ISG_EEOT_>
    2d21:	c9                   	leaveq 
    2d22:	c3                   	retq   
    2d23:	90                   	nop

0000000000002d24 <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1EOSH_>:
        constexpr tuple(_UElements&&... __elements)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default; 
    2d24:	55                   	push   %rbp
    2d25:	48 89 e5             	mov    %rsp,%rbp
    2d28:	48 83 ec 10          	sub    $0x10,%rsp
    2d2c:	e8 00 00 00 00       	callq  2d31 <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1EOSH_+0xd>
    2d31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2d35:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2d39:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2d3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d41:	48 89 d6             	mov    %rdx,%rsi
    2d44:	48 89 c7             	mov    %rax,%rdi
    2d47:	e8 86 ff ff ff       	callq  2cd2 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2EOSH_>
    2d4c:	c9                   	leaveq 
    2d4d:	c3                   	retq   

0000000000002d4e <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1EOSH_>:
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;
    2d4e:	55                   	push   %rbp
    2d4f:	48 89 e5             	mov    %rsp,%rbp
    2d52:	48 83 ec 10          	sub    $0x10,%rsp
    2d56:	e8 00 00 00 00       	callq  2d5b <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1EOSH_+0xd>
    2d5b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2d5f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2d63:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    2d67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2d6b:	48 89 d6             	mov    %rdx,%rsi
    2d6e:	48 89 c7             	mov    %rax,%rdi
    2d71:	e8 ae ff ff ff       	callq  2d24 <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1EOSH_>
    2d76:	c9                   	leaveq 
    2d77:	c3                   	retq   

0000000000002d78 <_ZSt13__bind_simpleIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSI_DpOSJ_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
    2d78:	55                   	push   %rbp
    2d79:	48 89 e5             	mov    %rsp,%rbp
    2d7c:	48 83 ec 10          	sub    $0x10,%rsp
    2d80:	e8 00 00 00 00       	callq  2d85 <_ZSt13__bind_simpleIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSI_DpOSJ_+0xd>
    2d85:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2d89:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
    2d8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2d91:	48 89 c7             	mov    %rax,%rdi
    2d94:	e8 e9 fb ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    2d99:	48 89 c7             	mov    %rax,%rdi
    2d9c:	e8 01 02 00 00       	callq  2fa2 <_ZNSt26_Maybe_wrap_member_pointerIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_E9__do_wrapEOSG_>
    2da1:	48 89 c2             	mov    %rax,%rdx
          std::forward<_Args>(__args)...);
    2da4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2da8:	48 89 d6             	mov    %rdx,%rsi
    2dab:	48 89 c7             	mov    %rax,%rdi
    2dae:	e8 95 02 00 00       	callq  3048 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1IIEvEEOSF_DpOT_>
    }
    2db3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2db7:	c9                   	leaveq 
    2db8:	c3                   	retq   

0000000000002db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    2db9:	55                   	push   %rbp
    2dba:	48 89 e5             	mov    %rsp,%rbp
    2dbd:	48 83 ec 08          	sub    $0x8,%rsp
    2dc1:	e8 00 00 00 00       	callq  2dc6 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE+0xd>
    2dc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    2dca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2dce:	c9                   	leaveq 
    2dcf:	c3                   	retq   

0000000000002dd0 <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEESt10shared_ptrINS_5_ImplIT_EEEOSM_>:
    void
    _M_start_thread(__shared_base_type);

    template<typename _Callable>
      shared_ptr<_Impl<_Callable>>
      _M_make_routine(_Callable&& __f)
    2dd0:	55                   	push   %rbp
    2dd1:	48 89 e5             	mov    %rsp,%rbp
    2dd4:	48 83 ec 20          	sub    $0x20,%rsp
    2dd8:	e8 00 00 00 00       	callq  2ddd <_ZNSt6thread15_M_make_routineISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEESt10shared_ptrINS_5_ImplIT_EEEOSM_+0xd>
    2ddd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2de1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    2de5:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	// Create and allocate full data structure, not base.
	return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
    2de9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2ded:	48 89 c7             	mov    %rax,%rdi
    2df0:	e8 c4 ff ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    2df5:	48 89 c2             	mov    %rax,%rdx
    2df8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2dfc:	48 89 d6             	mov    %rdx,%rsi
    2dff:	48 89 c7             	mov    %rax,%rdi
    2e02:	e8 76 02 00 00       	callq  307d <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEISK_EESt10shared_ptrIT_EDpOT0_>
      }
    2e07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e0b:	c9                   	leaveq 
    2e0c:	c3                   	retq   

0000000000002e0d <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    2e0d:	55                   	push   %rbp
    2e0e:	48 89 e5             	mov    %rsp,%rbp
    2e11:	48 83 ec 08          	sub    $0x8,%rsp
    2e15:	e8 00 00 00 00       	callq  2e1a <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_+0xd>
    2e1a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2e1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e22:	c9                   	leaveq 
    2e23:	c3                   	retq   

0000000000002e24 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS5_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSI_EUlvE_vEEEEvEEOS_IT_E>:
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
    2e24:	55                   	push   %rbp
    2e25:	48 89 e5             	mov    %rsp,%rbp
    2e28:	48 83 ec 10          	sub    $0x10,%rsp
    2e2c:	e8 00 00 00 00       	callq  2e31 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEEC1INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS5_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSI_EUlvE_vEEEEvEEOS_IT_E+0xd>
    2e31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2e35:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: __shared_ptr<_Tp>(std::move(__r)) { }
    2e39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2e3d:	48 89 c7             	mov    %rax,%rdi
    2e40:	e8 c8 ff ff ff       	callq  2e0d <_ZSt4moveIRSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_>
    2e45:	48 89 c2             	mov    %rax,%rdx
    2e48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e4c:	48 89 d6             	mov    %rdx,%rsi
    2e4f:	48 89 c7             	mov    %rax,%rdi
    2e52:	e8 a1 02 00 00       	callq  30f8 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS7_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISC_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSK_EUlvE_vEEEEvEEOS_IT_LS3_2EE>
    2e57:	c9                   	leaveq 
    2e58:	c3                   	retq   
    2e59:	90                   	nop

0000000000002e5a <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERSB_>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
    2e5a:	55                   	push   %rbp
    2e5b:	48 89 e5             	mov    %rsp,%rbp
    2e5e:	48 83 ec 10          	sub    $0x10,%rsp
    2e62:	e8 00 00 00 00       	callq  2e67 <_ZNSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC1ERSB_+0xd>
    2e67:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2e6b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
    2e6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2e73:	48 89 c7             	mov    %rax,%rdi
    2e76:	e8 c9 fc ff ff       	callq  2b44 <_ZNSt23_Reference_wrapper_baseISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEC2Ev>
    2e7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2e7f:	48 89 c7             	mov    %rax,%rdi
    2e82:	e8 cc 02 00 00       	callq  3153 <_ZSt11__addressofISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSC_>
    2e87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    2e8b:	48 89 02             	mov    %rax,(%rdx)
      { }
    2e8e:	c9                   	leaveq 
    2e8f:	c3                   	retq   

0000000000002e90 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE21_M_not_empty_functionISt17reference_wrapperISC_EEEbRKT_>:
	  _M_not_empty_function(_Tp _Class::* const& __mp)
	  { return __mp; }

	template<typename _Tp>
	  static bool
	  _M_not_empty_function(const _Tp&)
    2e90:	55                   	push   %rbp
    2e91:	48 89 e5             	mov    %rsp,%rbp
    2e94:	48 83 ec 08          	sub    $0x8,%rsp
    2e98:	e8 00 00 00 00       	callq  2e9d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE21_M_not_empty_functionISt17reference_wrapperISC_EEEbRKT_+0xd>
    2e9d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  { return true; }
    2ea1:	b8 01 00 00 00       	mov    $0x1,%eax
    2ea6:	c9                   	leaveq 
    2ea7:	c3                   	retq   

0000000000002ea8 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataSt17reference_wrapperISC_E>:
	    }
	  return false;
	}

	static void
	_M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
    2ea8:	55                   	push   %rbp
    2ea9:	48 89 e5             	mov    %rsp,%rbp
    2eac:	48 83 ec 20          	sub    $0x20,%rsp
    2eb0:	e8 00 00 00 00       	callq  2eb5 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataSt17reference_wrapperISC_E+0xd>
    2eb5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2eb9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
    2ebd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2ec1:	48 89 c7             	mov    %rax,%rdi
    2ec4:	e8 a1 02 00 00       	callq  316a <_ZNKSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEE3getEv>
    2ec9:	48 89 c7             	mov    %rax,%rdi
    2ecc:	e8 82 02 00 00       	callq  3153 <_ZSt11__addressofISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSC_>
    2ed1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2ed5:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
    2ed9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2edd:	48 89 d6             	mov    %rdx,%rsi
    2ee0:	48 89 c7             	mov    %rax,%rdi
    2ee3:	e8 b3 02 00 00       	callq  319b <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_>
	}
    2ee8:	c9                   	leaveq 
    2ee9:	c3                   	retq   

0000000000002eea <_ZNSt17_Function_handlerIFvvESt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
    2eea:	55                   	push   %rbp
    2eeb:	48 89 e5             	mov    %rsp,%rbp
    2eee:	48 83 ec 10          	sub    $0x10,%rsp
    2ef2:	e8 00 00 00 00       	callq  2ef7 <_ZNSt17_Function_handlerIFvvESt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEEE9_M_invokeERKSt9_Any_data+0xd>
    2ef7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	__callable_functor(**_Base::_M_get_pointer(__functor))(
    2efb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2eff:	48 89 c7             	mov    %rax,%rdi
    2f02:	e8 d2 02 00 00       	callq  31d9 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE14_M_get_pointerERKSt9_Any_data>
    2f07:	48 8b 00             	mov    (%rax),%rax
    2f0a:	48 89 c7             	mov    %rax,%rdi
    2f0d:	e8 f6 02 00 00       	callq  3208 <_ZSt18__callable_functorISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEERT_SD_>
    2f12:	48 89 c7             	mov    %rax,%rdi
    2f15:	e8 06 03 00 00       	callq  3220 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEclEv>
	    std::forward<_ArgTypes>(__args)...);
      }
    2f1a:	c9                   	leaveq 
    2f1b:	c3                   	retq   

0000000000002f1c <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      {
	typedef _Function_base::_Base_manager<_Functor*> _Base;

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    2f1c:	55                   	push   %rbp
    2f1d:	48 89 e5             	mov    %rsp,%rbp
    2f20:	53                   	push   %rbx
    2f21:	48 83 ec 28          	sub    $0x28,%rsp
    2f25:	e8 00 00 00 00       	callq  2f2a <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
    2f2a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    2f2e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    2f32:	89 55 dc             	mov    %edx,-0x24(%rbp)
		   _Manager_operation __op)
	{
	  switch (__op)
    2f35:	8b 45 dc             	mov    -0x24(%rbp),%eax
    2f38:	85 c0                	test   %eax,%eax
    2f3a:	74 07                	je     2f43 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x27>
    2f3c:	83 f8 01             	cmp    $0x1,%eax
    2f3f:	74 17                	je     2f58 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x3c>
    2f41:	eb 3d                	jmp    2f80 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x64>
	    {
#ifdef __GXX_RTTI
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
    2f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2f47:	48 89 c7             	mov    %rax,%rdi
    2f4a:	e8 00 00 00 00       	callq  2f4f <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x33>
    2f4f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      break;
    2f56:	eb 3e                	jmp    2f96 <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x7a>
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
    2f58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2f5c:	48 89 c7             	mov    %rax,%rdi
    2f5f:	e8 de 02 00 00       	callq  3242 <_ZNSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v>
    2f64:	48 89 c3             	mov    %rax,%rbx
    2f67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    2f6b:	48 89 c7             	mov    %rax,%rdi
    2f6e:	e8 66 02 00 00       	callq  31d9 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE14_M_get_pointerERKSt9_Any_data>
    2f73:	48 8b 00             	mov    (%rax),%rax
    2f76:	48 89 03             	mov    %rax,(%rbx)
	      return is_const<_Functor>::value;
    2f79:	b8 00 00 00 00       	mov    $0x0,%eax
    2f7e:	eb 1b                	jmp    2f9b <_ZNSt14_Function_base12_Ref_managerISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x7f>
	      break;

	    default:
	      _Base::_M_manager(__dest, __source, __op);
    2f80:	8b 55 dc             	mov    -0x24(%rbp),%edx
    2f83:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    2f87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    2f8b:	48 89 ce             	mov    %rcx,%rsi
    2f8e:	48 89 c7             	mov    %rax,%rdi
    2f91:	e8 cb 02 00 00       	callq  3261 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation>
	    }
	  return false;
    2f96:	b8 00 00 00 00       	mov    $0x0,%eax
	}
    2f9b:	48 83 c4 28          	add    $0x28,%rsp
    2f9f:	5b                   	pop    %rbx
    2fa0:	5d                   	pop    %rbp
    2fa1:	c3                   	retq   

0000000000002fa2 <_ZNSt26_Maybe_wrap_member_pointerIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_E9__do_wrapEOSG_>:
      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
    2fa2:	55                   	push   %rbp
    2fa3:	48 89 e5             	mov    %rsp,%rbp
    2fa6:	48 83 ec 08          	sub    $0x8,%rsp
    2faa:	e8 00 00 00 00       	callq  2faf <_ZNSt26_Maybe_wrap_member_pointerIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_E9__do_wrapEOSG_+0xd>
    2faf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Tp&&>(__x); }
    2fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2fb7:	c9                   	leaveq 
    2fb8:	c3                   	retq   

0000000000002fb9 <_ZSt4moveIRZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EONSt16remove_referenceIT_E4typeEOSJ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    2fb9:	55                   	push   %rbp
    2fba:	48 89 e5             	mov    %rsp,%rbp
    2fbd:	48 83 ec 08          	sub    $0x8,%rsp
    2fc1:	e8 00 00 00 00       	callq  2fc6 <_ZSt4moveIRZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EONSt16remove_referenceIT_E4typeEOSJ_+0xd>
    2fc6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    2fca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2fce:	c9                   	leaveq 
    2fcf:	c3                   	retq   

0000000000002fd0 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2ISG_IEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
    2fd0:	55                   	push   %rbp
    2fd1:	48 89 e5             	mov    %rsp,%rbp
    2fd4:	48 83 ec 10          	sub    $0x10,%rsp
    2fd8:	e8 00 00 00 00       	callq  2fdd <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2ISG_IEvEEOT_DpOT0_+0xd>
    2fdd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    2fe1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
    2fe5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    2fe9:	48 89 c7             	mov    %rax,%rdi
    2fec:	e8 00 00 00 00       	callq  2ff1 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2ISG_IEvEEOT_DpOT0_+0x21>
    2ff1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    2ff5:	48 89 c7             	mov    %rax,%rdi
    2ff8:	e8 85 f9 ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    2ffd:	48 89 c2             	mov    %rax,%rdx
    3000:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3004:	48 89 d6             	mov    %rdx,%rsi
    3007:	48 89 c7             	mov    %rax,%rdi
    300a:	e8 95 fc ff ff       	callq  2ca4 <_ZNSt10_Head_baseILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_Lb0EEC2ISG_EEOT_>
    300f:	c9                   	leaveq 
    3010:	c3                   	retq   
    3011:	90                   	nop

0000000000003012 <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1IISG_EvEEDpOT_>:

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
					_Elements>...>::value>::type>
	explicit
        constexpr tuple(_UElements&&... __elements)
    3012:	55                   	push   %rbp
    3013:	48 89 e5             	mov    %rsp,%rbp
    3016:	48 83 ec 10          	sub    $0x10,%rsp
    301a:	e8 00 00 00 00       	callq  301f <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1IISG_EvEEDpOT_+0xd>
    301f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3023:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}
    3027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    302b:	48 89 c7             	mov    %rax,%rdi
    302e:	e8 4f f9 ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
    3033:	48 89 c2             	mov    %rax,%rdx
    3036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    303a:	48 89 d6             	mov    %rdx,%rsi
    303d:	48 89 c7             	mov    %rax,%rdi
    3040:	e8 8b ff ff ff       	callq  2fd0 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC2ISG_IEvEEOT_DpOT0_>
    3045:	c9                   	leaveq 
    3046:	c3                   	retq   
    3047:	90                   	nop

0000000000003048 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1IIEvEEOSF_DpOT_>:
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
    3048:	55                   	push   %rbp
    3049:	48 89 e5             	mov    %rsp,%rbp
    304c:	48 83 ec 10          	sub    $0x10,%rsp
    3050:	e8 00 00 00 00       	callq  3055 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1IIEvEEOSF_DpOT_+0xd>
    3055:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3059:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
    305d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3061:	48 89 c7             	mov    %rax,%rdi
    3064:	e8 50 ff ff ff       	callq  2fb9 <_ZSt4moveIRZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EONSt16remove_referenceIT_E4typeEOSJ_>
    3069:	48 89 c2             	mov    %rax,%rdx
    306c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3070:	48 89 d6             	mov    %rdx,%rsi
    3073:	48 89 c7             	mov    %rax,%rdi
    3076:	e8 97 ff ff ff       	callq  3012 <_ZNSt5tupleIIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EEC1IISG_EvEEDpOT_>
        { }
    307b:	c9                   	leaveq 
    307c:	c3                   	retq   

000000000000307d <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEISK_EESt10shared_ptrIT_EDpOT0_>:
   *  @throw  std::bad_alloc, or an exception thrown from the
   *          constructor of @a _Tp.
   */
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    307d:	55                   	push   %rbp
    307e:	48 89 e5             	mov    %rsp,%rbp
    3081:	53                   	push   %rbx
    3082:	48 83 ec 28          	sub    $0x28,%rsp
    3086:	e8 00 00 00 00       	callq  308b <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEISK_EESt10shared_ptrIT_EDpOT0_+0xe>
    308b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    308f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
				       std::forward<_Args>(__args)...);
    3093:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3097:	48 89 c7             	mov    %rax,%rdi
    309a:	e8 1a fd ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    309f:	48 89 c3             	mov    %rax,%rbx
    30a2:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    30a6:	48 89 c7             	mov    %rax,%rdi
    30a9:	e8 56 02 00 00       	callq  3304 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1Ev>
    30ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    30b2:	48 8d 4d ef          	lea    -0x11(%rbp),%rcx
    30b6:	48 89 da             	mov    %rbx,%rdx
    30b9:	48 89 ce             	mov    %rcx,%rsi
    30bc:	48 89 c7             	mov    %rax,%rdi
    30bf:	e8 7f 02 00 00       	callq  3343 <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_EISK_EESt10shared_ptrIT_ERKT0_DpOT1_>
    30c4:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    30c8:	48 89 c7             	mov    %rax,%rdi
    30cb:	e8 54 02 00 00       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
    30d0:	eb 1a                	jmp    30ec <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEISK_EESt10shared_ptrIT_EDpOT0_+0x6f>
    30d2:	48 89 c3             	mov    %rax,%rbx
    30d5:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    30d9:	48 89 c7             	mov    %rax,%rdi
    30dc:	e8 43 02 00 00       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
    30e1:	48 89 d8             	mov    %rbx,%rax
    30e4:	48 89 c7             	mov    %rax,%rdi
    30e7:	e8 00 00 00 00       	callq  30ec <_ZSt11make_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEISK_EESt10shared_ptrIT_EDpOT0_+0x6f>
    }
    30ec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    30f0:	48 83 c4 28          	add    $0x28,%rsp
    30f4:	5b                   	pop    %rbx
    30f5:	5d                   	pop    %rbp
    30f6:	c3                   	retq   
    30f7:	90                   	nop

00000000000030f8 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS7_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISC_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSK_EUlvE_vEEEEvEEOS_IT_LS3_2EE>:
	__r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
    30f8:	55                   	push   %rbp
    30f9:	48 89 e5             	mov    %rsp,%rbp
    30fc:	48 83 ec 10          	sub    $0x10,%rsp
    3100:	e8 00 00 00 00       	callq  3105 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS7_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISC_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSK_EUlvE_vEEEEvEEOS_IT_LS3_2EE+0xd>
    3105:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3109:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_ptr(__r._M_ptr), _M_refcount()
    310d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3111:	48 8b 10             	mov    (%rax),%rdx
    3114:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3118:	48 89 10             	mov    %rdx,(%rax)
    311b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    311f:	48 83 c0 08          	add    $0x8,%rax
    3123:	48 89 c7             	mov    %rax,%rdi
    3126:	e8 00 00 00 00       	callq  312b <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS7_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISC_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSK_EUlvE_vEEEEvEEOS_IT_LS3_2EE+0x33>
	{
	  _M_refcount._M_swap(__r._M_refcount);
    312b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    312f:	48 8d 50 08          	lea    0x8(%rax),%rdx
    3133:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3137:	48 83 c0 08          	add    $0x8,%rax
    313b:	48 89 d6             	mov    %rdx,%rsi
    313e:	48 89 c7             	mov    %rax,%rdi
    3141:	e8 00 00 00 00       	callq  3146 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EEC2INS0_5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS7_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISC_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSK_EUlvE_vEEEEvEEOS_IT_LS3_2EE+0x4e>
	  __r._M_ptr = 0;
    3146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    314a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	}
    3151:	c9                   	leaveq 
    3152:	c3                   	retq   

0000000000003153 <_ZSt11__addressofISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSC_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    3153:	55                   	push   %rbp
    3154:	48 89 e5             	mov    %rsp,%rbp
    3157:	48 83 ec 08          	sub    $0x8,%rsp
    315b:	e8 00 00 00 00       	callq  3160 <_ZSt11__addressofISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSC_+0xd>
    3160:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    3164:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    3168:	c9                   	leaveq 
    3169:	c3                   	retq   

000000000000316a <_ZNKSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEE3getEv>:

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
    316a:	55                   	push   %rbp
    316b:	48 89 e5             	mov    %rsp,%rbp
    316e:	48 83 ec 08          	sub    $0x8,%rsp
    3172:	e8 00 00 00 00       	callq  3177 <_ZNKSt17reference_wrapperISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEE3getEv+0xd>
    3177:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
    317b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    317f:	48 8b 00             	mov    (%rax),%rax
    3182:	c9                   	leaveq 
    3183:	c3                   	retq   

0000000000003184 <_ZSt4moveIRPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSF_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    3184:	55                   	push   %rbp
    3185:	48 89 e5             	mov    %rsp,%rbp
    3188:	48 83 ec 08          	sub    $0x8,%rsp
    318c:	e8 00 00 00 00       	callq  3191 <_ZSt4moveIRPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSF_+0xd>
    3191:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    3195:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3199:	c9                   	leaveq 
    319a:	c3                   	retq   

000000000000319b <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_>:
	    }
	  return false;
	}

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
    319b:	55                   	push   %rbp
    319c:	48 89 e5             	mov    %rsp,%rbp
    319f:	53                   	push   %rbx
    31a0:	48 83 ec 38          	sub    $0x38,%rsp
    31a4:	e8 00 00 00 00       	callq  31a9 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_+0xe>
    31a9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    31ad:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
    31b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    31b5:	48 89 c7             	mov    %rax,%rdi
    31b8:	e8 c7 ff ff ff       	callq  3184 <_ZSt4moveIRPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSF_>
    31bd:	48 89 c2             	mov    %rax,%rdx
    31c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    31c4:	88 1c 24             	mov    %bl,(%rsp)
    31c7:	48 89 d6             	mov    %rdx,%rsi
    31ca:	48 89 c7             	mov    %rax,%rdi
    31cd:	e8 bb 01 00 00       	callq  338d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE>
    31d2:	48 83 c4 38          	add    $0x38,%rsp
    31d6:	5b                   	pop    %rbx
    31d7:	5d                   	pop    %rbp
    31d8:	c3                   	retq   

00000000000031d9 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE14_M_get_pointerERKSt9_Any_data>:

	typedef integral_constant<bool, __stored_locally> _Local_storage;

	// Retrieve a pointer to the function object
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
    31d9:	55                   	push   %rbp
    31da:	48 89 e5             	mov    %rsp,%rbp
    31dd:	48 83 ec 20          	sub    $0x20,%rsp
    31e1:	e8 00 00 00 00       	callq  31e6 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE14_M_get_pointerERKSt9_Any_data+0xd>
    31e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
    31ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    31ee:	48 89 c7             	mov    %rax,%rdi
    31f1:	e8 e4 01 00 00       	callq  33da <_ZNKSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERKT_v>
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
    31f6:	48 89 c7             	mov    %rax,%rdi
    31f9:	e8 fb 01 00 00       	callq  33f9 <_ZSt11__addressofIKPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSE_>
    31fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return const_cast<_Functor*>(__ptr);
    3202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
    3206:	c9                   	leaveq 
    3207:	c3                   	retq   

0000000000003208 <_ZSt18__callable_functorISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEERT_SD_>:

  // Converts a reference to a function object into a callable
  // function object.
  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    3208:	55                   	push   %rbp
    3209:	48 89 e5             	mov    %rsp,%rbp
    320c:	48 83 ec 08          	sub    $0x8,%rsp
    3210:	e8 00 00 00 00       	callq  3215 <_ZSt18__callable_functorISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEERT_SD_+0xd>
    3215:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return __f; }
    3219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    321d:	c9                   	leaveq 
    321e:	c3                   	retq   
    321f:	90                   	nop

0000000000003220 <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
    3220:	55                   	push   %rbp
    3221:	48 89 e5             	mov    %rsp,%rbp
    3224:	48 83 ec 20          	sub    $0x20,%rsp
    3228:	e8 00 00 00 00       	callq  322d <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEEclEv+0xd>
    322d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
    3231:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3235:	88 14 24             	mov    %dl,(%rsp)
    3238:	48 89 c7             	mov    %rax,%rdi
    323b:	e8 0e 02 00 00       	callq  344e <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE>
      }
    3240:	c9                   	leaveq 
    3241:	c3                   	retq   

0000000000003242 <_ZNSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
    3242:	55                   	push   %rbp
    3243:	48 89 e5             	mov    %rsp,%rbp
    3246:	48 83 ec 10          	sub    $0x10,%rsp
    324a:	e8 00 00 00 00       	callq  324f <_ZNSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v+0xd>
    324f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
    3253:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3257:	48 89 c7             	mov    %rax,%rdi
    325a:	e8 00 00 00 00       	callq  325f <_ZNSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v+0x1d>
    325f:	c9                   	leaveq 
    3260:	c3                   	retq   

0000000000003261 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation>:
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
    3261:	55                   	push   %rbp
    3262:	48 89 e5             	mov    %rsp,%rbp
    3265:	53                   	push   %rbx
    3266:	48 83 ec 38          	sub    $0x38,%rsp
    326a:	e8 00 00 00 00       	callq  326f <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0xe>
    326f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3273:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3277:	89 55 cc             	mov    %edx,-0x34(%rbp)
		   _Manager_operation __op)
	{
	  switch (__op)
    327a:	8b 45 cc             	mov    -0x34(%rbp),%eax
    327d:	83 f8 01             	cmp    $0x1,%eax
    3280:	74 2c                	je     32ae <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x4d>
    3282:	83 f8 01             	cmp    $0x1,%eax
    3285:	7f 06                	jg     328d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x2c>
    3287:	85 c0                	test   %eax,%eax
    3289:	74 0e                	je     3299 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x38>
    328b:	eb 6a                	jmp    32f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x96>
    328d:	83 f8 02             	cmp    $0x2,%eax
    3290:	74 3c                	je     32ce <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x6d>
    3292:	83 f8 03             	cmp    $0x3,%eax
    3295:	74 50                	je     32e7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x86>
    3297:	eb 5e                	jmp    32f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x96>
	    {
#ifdef __GXX_RTTI
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
    3299:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    329d:	48 89 c7             	mov    %rax,%rdi
    32a0:	e8 00 00 00 00       	callq  32a5 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x44>
    32a5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      break;
    32ac:	eb 49                	jmp    32f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x96>
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
    32ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    32b2:	48 89 c7             	mov    %rax,%rdi
    32b5:	e8 c4 01 00 00       	callq  347e <_ZNSt9_Any_data9_M_accessIPPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v>
    32ba:	48 89 c3             	mov    %rax,%rbx
    32bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    32c1:	48 89 c7             	mov    %rax,%rdi
    32c4:	e8 10 ff ff ff       	callq  31d9 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE14_M_get_pointerERKSt9_Any_data>
    32c9:	48 89 03             	mov    %rax,(%rbx)
	      break;
    32cc:	eb 29                	jmp    32f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x96>

	    case __clone_functor:
	      _M_clone(__dest, __source, _Local_storage());
    32ce:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    32d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    32d6:	44 88 04 24          	mov    %r8b,(%rsp)
    32da:	48 89 d6             	mov    %rdx,%rsi
    32dd:	48 89 c7             	mov    %rax,%rdi
    32e0:	e8 b8 01 00 00       	callq  349d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE>
	      break;
    32e5:	eb 10                	jmp    32f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_managerERSt9_Any_dataRKSF_St18_Manager_operation+0x96>

	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
    32e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    32eb:	88 0c 24             	mov    %cl,(%rsp)
    32ee:	48 89 c7             	mov    %rax,%rdi
    32f1:	e8 f4 01 00 00       	callq  34ea <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
    32f6:	90                   	nop
	    }
	  return false;
    32f7:	b8 00 00 00 00       	mov    $0x0,%eax
	}
    32fc:	48 83 c4 38          	add    $0x38,%rsp
    3300:	5b                   	pop    %rbx
    3301:	5d                   	pop    %rbp
    3302:	c3                   	retq   
    3303:	90                   	nop

0000000000003304 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
    3304:	55                   	push   %rbp
    3305:	48 89 e5             	mov    %rsp,%rbp
    3308:	48 83 ec 10          	sub    $0x10,%rsp
    330c:	e8 00 00 00 00       	callq  3311 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1Ev+0xd>
    3311:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3315:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3319:	48 89 c7             	mov    %rax,%rdi
    331c:	e8 e9 01 00 00       	callq  350a <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2Ev>
    3321:	c9                   	leaveq 
    3322:	c3                   	retq   
    3323:	90                   	nop

0000000000003324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    3324:	55                   	push   %rbp
    3325:	48 89 e5             	mov    %rsp,%rbp
    3328:	48 83 ec 10          	sub    $0x10,%rsp
    332c:	e8 00 00 00 00       	callq  3331 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev+0xd>
    3331:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3335:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3339:	48 89 c7             	mov    %rax,%rdi
    333c:	e8 dd 01 00 00       	callq  351e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEED2Ev>
    3341:	c9                   	leaveq 
    3342:	c3                   	retq   

0000000000003343 <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_EISK_EESt10shared_ptrIT_ERKT0_DpOT1_>:
   *  A copy of @a __a will be used to allocate memory for the shared_ptr
   *  and the new object.
   */
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    3343:	55                   	push   %rbp
    3344:	48 89 e5             	mov    %rsp,%rbp
    3347:	53                   	push   %rbx
    3348:	48 83 ec 38          	sub    $0x38,%rsp
    334c:	e8 00 00 00 00       	callq  3351 <_ZSt15allocate_sharedINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_EISK_EESt10shared_ptrIT_ERKT0_DpOT1_+0xe>
    3351:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3355:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3359:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
			     std::forward<_Args>(__args)...);
    335d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3361:	48 89 c7             	mov    %rax,%rdi
    3364:	e8 50 fa ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3369:	48 89 c2             	mov    %rax,%rdx
    336c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    3370:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3374:	88 1c 24             	mov    %bl,(%rsp)
    3377:	48 89 ce             	mov    %rcx,%rsi
    337a:	48 89 c7             	mov    %rax,%rdi
    337d:	e8 b0 01 00 00       	callq  3532 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEC1ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
    }
    3382:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3386:	48 83 c4 38          	add    $0x38,%rsp
    338a:	5b                   	pop    %rbx
    338b:	5d                   	pop    %rbp
    338c:	c3                   	retq   

000000000000338d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE>:
	  _M_not_empty_function(const _Tp&)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
    338d:	55                   	push   %rbp
    338e:	48 89 e5             	mov    %rsp,%rbp
    3391:	53                   	push   %rbx
    3392:	48 83 ec 18          	sub    $0x18,%rsp
    3396:	e8 00 00 00 00       	callq  339b <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE+0xe>
    339b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    339f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
    33a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    33a7:	48 89 c7             	mov    %rax,%rdi
    33aa:	e8 d5 fd ff ff       	callq  3184 <_ZSt4moveIRPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEONSt16remove_referenceIT_E4typeEOSF_>
    33af:	48 8b 18             	mov    (%rax),%rbx
    33b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    33b6:	48 89 c7             	mov    %rax,%rdi
    33b9:	e8 00 00 00 00       	callq  33be <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE+0x31>
    33be:	48 89 c6             	mov    %rax,%rsi
    33c1:	bf 08 00 00 00       	mov    $0x8,%edi
    33c6:	e8 00 00 00 00       	callq  33cb <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE+0x3e>
    33cb:	48 85 c0             	test   %rax,%rax
    33ce:	74 03                	je     33d3 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE15_M_init_functorERSt9_Any_dataOSD_St17integral_constantIbLb1EE+0x46>
    33d0:	48 89 18             	mov    %rbx,(%rax)
    33d3:	48 83 c4 18          	add    $0x18,%rsp
    33d7:	5b                   	pop    %rbx
    33d8:	5d                   	pop    %rbp
    33d9:	c3                   	retq   

00000000000033da <_ZNKSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERKT_v>:
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
    33da:	55                   	push   %rbp
    33db:	48 89 e5             	mov    %rsp,%rbp
    33de:	48 83 ec 10          	sub    $0x10,%rsp
    33e2:	e8 00 00 00 00       	callq  33e7 <_ZNKSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERKT_v+0xd>
    33e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp*>(_M_access()); }
    33eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    33ef:	48 89 c7             	mov    %rax,%rdi
    33f2:	e8 00 00 00 00       	callq  33f7 <_ZNKSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERKT_v+0x1d>
    33f7:	c9                   	leaveq 
    33f8:	c3                   	retq   

00000000000033f9 <_ZSt11__addressofIKPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSE_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    33f9:	55                   	push   %rbp
    33fa:	48 89 e5             	mov    %rsp,%rbp
    33fd:	48 83 ec 08          	sub    $0x8,%rsp
    3401:	e8 00 00 00 00       	callq  3406 <_ZSt11__addressofIKPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS3_EEN14TimeSeparation8PositionEEUlvE_vEEEPT_RSE_+0xd>
    3406:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    340a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
    340e:	c9                   	leaveq 
    340f:	c3                   	retq   

0000000000003410 <_ZSt12__get_helperILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISA_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    3410:	55                   	push   %rbp
    3411:	48 89 e5             	mov    %rsp,%rbp
    3414:	48 83 ec 08          	sub    $0x8,%rsp
    3418:	e8 00 00 00 00       	callq  341d <_ZSt12__get_helperILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISA_DpT1_EE+0xd>
    341d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    3421:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3425:	48 89 c7             	mov    %rax,%rdi
    3428:	e8 bf dc ff ff       	callq  10ec <_ZNSt11_Tuple_implILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EE7_M_headERS9_>
    342d:	c9                   	leaveq 
    342e:	c3                   	retq   

000000000000342f <_ZSt3getILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSE_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
    342f:	55                   	push   %rbp
    3430:	48 89 e5             	mov    %rsp,%rbp
    3433:	48 83 ec 08          	sub    $0x8,%rsp
    3437:	e8 00 00 00 00       	callq  343c <_ZSt3getILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSE_+0xd>
    343c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    3440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3444:	48 89 c7             	mov    %rax,%rdi
    3447:	e8 c4 ff ff ff       	callq  3410 <_ZSt12__get_helperILm0EZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISA_DpT1_EE>
    344c:	c9                   	leaveq 
    344d:	c3                   	retq   

000000000000344e <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
    344e:	55                   	push   %rbp
    344f:	48 89 e5             	mov    %rsp,%rbp
    3452:	48 83 ec 10          	sub    $0x10,%rsp
    3456:	e8 00 00 00 00       	callq  345b <_ZNSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE+0xd>
    345b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
    345f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3463:	48 89 c7             	mov    %rax,%rdi
    3466:	e8 c4 ff ff ff       	callq  342f <_ZSt3getILm0EIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSE_>
    346b:	48 89 c7             	mov    %rax,%rdi
    346e:	e8 98 dc ff ff       	callq  110b <_ZSt7forwardIZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS2_EEN14TimeSeparation8PositionEEUlvE_EOT_RNSt16remove_referenceIS9_E4typeE>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
    3473:	48 89 c7             	mov    %rax,%rdi
    3476:	e8 c9 ce ff ff       	callq  344 <_ZZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionEENKUlvE_clEv>
        }
    347b:	c9                   	leaveq 
    347c:	c3                   	retq   
    347d:	90                   	nop

000000000000347e <_ZNSt9_Any_data9_M_accessIPPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
    347e:	55                   	push   %rbp
    347f:	48 89 e5             	mov    %rsp,%rbp
    3482:	48 83 ec 10          	sub    $0x10,%rsp
    3486:	e8 00 00 00 00       	callq  348b <_ZNSt9_Any_data9_M_accessIPPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v+0xd>
    348b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
    348f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3493:	48 89 c7             	mov    %rax,%rdi
    3496:	e8 00 00 00 00       	callq  349b <_ZNSt9_Any_data9_M_accessIPPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v+0x1d>
    349b:	c9                   	leaveq 
    349c:	c3                   	retq   

000000000000349d <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE>:
	}

	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
    349d:	55                   	push   %rbp
    349e:	48 89 e5             	mov    %rsp,%rbp
    34a1:	53                   	push   %rbx
    34a2:	48 83 ec 18          	sub    $0x18,%rsp
    34a6:	e8 00 00 00 00       	callq  34ab <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE+0xe>
    34ab:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    34af:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
    34b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    34b7:	48 89 c7             	mov    %rax,%rdi
    34ba:	e8 1b ff ff ff       	callq  33da <_ZNKSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERKT_v>
    34bf:	48 8b 18             	mov    (%rax),%rbx
    34c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    34c6:	48 89 c7             	mov    %rax,%rdi
    34c9:	e8 00 00 00 00       	callq  34ce <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE+0x31>
    34ce:	48 89 c6             	mov    %rax,%rsi
    34d1:	bf 08 00 00 00       	mov    $0x8,%edi
    34d6:	e8 00 00 00 00       	callq  34db <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE+0x3e>
    34db:	48 85 c0             	test   %rax,%rax
    34de:	74 03                	je     34e3 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE8_M_cloneERSt9_Any_dataRKSF_St17integral_constantIbLb1EE+0x46>
    34e0:	48 89 18             	mov    %rbx,(%rax)
	}
    34e3:	48 83 c4 18          	add    $0x18,%rsp
    34e7:	5b                   	pop    %rbx
    34e8:	5d                   	pop    %rbp
    34e9:	c3                   	retq   

00000000000034ea <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	}

	// Destroying a location-invariant object may still require
	// destruction.
	static void
	_M_destroy(_Any_data& __victim, true_type)
    34ea:	55                   	push   %rbp
    34eb:	48 89 e5             	mov    %rsp,%rbp
    34ee:	48 83 ec 10          	sub    $0x10,%rsp
    34f2:	e8 00 00 00 00       	callq  34f7 <_ZNSt14_Function_base13_Base_managerIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE+0xd>
    34f7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
	  __victim._M_access<_Functor>().~_Functor();
    34fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    34ff:	48 89 c7             	mov    %rax,%rdi
    3502:	e8 3b fd ff ff       	callq  3242 <_ZNSt9_Any_data9_M_accessIPSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEEERT_v>
	}
    3507:	c9                   	leaveq 
    3508:	c3                   	retq   
    3509:	90                   	nop

000000000000350a <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    350a:	55                   	push   %rbp
    350b:	48 89 e5             	mov    %rsp,%rbp
    350e:	48 83 ec 08          	sub    $0x8,%rsp
    3512:	e8 00 00 00 00       	callq  3517 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2Ev+0xd>
    3517:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    351b:	c9                   	leaveq 
    351c:	c3                   	retq   
    351d:	90                   	nop

000000000000351e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    351e:	55                   	push   %rbp
    351f:	48 89 e5             	mov    %rsp,%rbp
    3522:	48 83 ec 08          	sub    $0x8,%rsp
    3526:	e8 00 00 00 00       	callq  352b <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEED2Ev+0xd>
    352b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    352f:	c9                   	leaveq 
    3530:	c3                   	retq   
    3531:	90                   	nop

0000000000003532 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEC1ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:
	}

    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    3532:	55                   	push   %rbp
    3533:	48 89 e5             	mov    %rsp,%rbp
    3536:	53                   	push   %rbx
    3537:	48 83 ec 28          	sub    $0x28,%rsp
    353b:	e8 00 00 00 00       	callq  3540 <_ZNSt10shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEC1ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    3540:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3544:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3548:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
    354c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3550:	48 89 c7             	mov    %rax,%rdi
    3553:	e8 61 f8 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3558:	48 89 c2             	mov    %rax,%rdx
    355b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    355f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
    3563:	88 1c 24             	mov    %bl,(%rsp)
    3566:	48 89 ce             	mov    %rcx,%rsi
    3569:	48 89 c7             	mov    %rax,%rdi
    356c:	e8 07 00 00 00       	callq  3578 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_>
	{ }
    3571:	48 83 c4 28          	add    $0x28,%rsp
    3575:	5b                   	pop    %rbx
    3576:	5d                   	pop    %rbp
    3577:	c3                   	retq   

0000000000003578 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_>:

#ifdef __GXX_RTTI
    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
    3578:	55                   	push   %rbp
    3579:	48 89 e5             	mov    %rsp,%rbp
    357c:	53                   	push   %rbx
    357d:	48 83 ec 38          	sub    $0x38,%rsp
    3581:	e8 00 00 00 00       	callq  3586 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0xe>
    3586:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    358a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    358e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		     _Args&&... __args)
	: _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
				std::forward<_Args>(__args)...)
    3592:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3596:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    359d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    35a1:	48 89 c7             	mov    %rax,%rdi
    35a4:	e8 10 f8 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    35a9:	48 89 c2             	mov    %rax,%rdx
    35ac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35b0:	48 8d 78 08          	lea    0x8(%rax),%rdi
    35b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    35b8:	88 1c 24             	mov    %bl,(%rsp)
    35bb:	48 89 d1             	mov    %rdx,%rcx
    35be:	48 89 c2             	mov    %rax,%rdx
    35c1:	be 00 00 00 00       	mov    $0x0,%esi
    35c6:	e8 7f 00 00 00       	callq  364a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>
	{
	  // _M_ptr needs to point to the newly constructed object.
	  // This relies on _Sp_counted_ptr_inplace::_M_get_deleter.
	  void* __p = _M_refcount._M_get_deleter(typeid(__tag));
    35cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35cf:	48 83 c0 08          	add    $0x8,%rax
    35d3:	be 00 00 00 00       	mov    $0x0,%esi
    35d8:	48 89 c7             	mov    %rax,%rdi
    35db:	e8 00 00 00 00       	callq  35e0 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x68>
    35e0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  _M_ptr = static_cast<_Tp*>(__p);
    35e4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35e8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    35ec:	48 89 10             	mov    %rdx,(%rax)
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
    35ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35f3:	48 8b 10             	mov    (%rax),%rdx
    35f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    35fa:	48 8b 00             	mov    (%rax),%rax
    35fd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    3601:	48 83 c1 08          	add    $0x8,%rcx
    3605:	48 89 c6             	mov    %rax,%rsi
    3608:	48 89 cf             	mov    %rcx,%rdi
    360b:	b8 00 00 00 00       	mov    $0x0,%eax
    3610:	e8 00 00 00 00       	callq  3615 <_ZNSt12__shared_ptrINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEELN9__gnu_cxx12_Lock_policyE2EEC2ISaISL_EISK_EEESt19_Sp_make_shared_tagRKT_DpOT0_+0x9d>
	}
    3615:	48 83 c4 38          	add    $0x38,%rsp
    3619:	5b                   	pop    %rbx
    361a:	5d                   	pop    %rbp
    361b:	c3                   	retq   

000000000000361c <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    361c:	55                   	push   %rbp
    361d:	48 89 e5             	mov    %rsp,%rbp
    3620:	48 83 ec 08          	sub    $0x8,%rsp
    3624:	e8 00 00 00 00       	callq  3629 <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_+0xd>
    3629:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    362d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3631:	c9                   	leaveq 
    3632:	c3                   	retq   

0000000000003633 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEOT_RNSt16remove_referenceISO_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    3633:	55                   	push   %rbp
    3634:	48 89 e5             	mov    %rsp,%rbp
    3637:	48 83 ec 08          	sub    $0x8,%rsp
    363b:	e8 00 00 00 00       	callq  3640 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEOT_RNSt16remove_referenceISO_E4typeE+0xd>
    3640:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
    3644:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3648:	c9                   	leaveq 
    3649:	c3                   	retq   

000000000000364a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_>:
	      __throw_exception_again;
	    }
	}

      template<typename _Tp, typename _Alloc, typename... _Args>
	__shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
    364a:	55                   	push   %rbp
    364b:	48 89 e5             	mov    %rsp,%rbp
    364e:	53                   	push   %rbx
    364f:	48 83 ec 38          	sub    $0x38,%rsp
    3653:	e8 00 00 00 00       	callq  3658 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe>
    3658:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    365c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3660:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    3664:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
		       _Args&&... __args)
	: _M_pi(0)
    3668:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    366c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	{
	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
    3673:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    3677:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    367b:	48 89 d6             	mov    %rdx,%rsi
    367e:	48 89 c7             	mov    %rax,%rdi
    3681:	e8 b0 00 00 00       	callq  3736 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISL_EERKSaIT_E>
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
    3686:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    368a:	be 01 00 00 00       	mov    $0x1,%esi
    368f:	48 89 c7             	mov    %rax,%rdi
    3692:	e8 e2 00 00 00       	callq  3779 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSR_m>
    3697:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
    369b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    369f:	48 89 c7             	mov    %rax,%rdi
    36a2:	e8 12 f7 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    36a7:	48 89 c3             	mov    %rax,%rbx
	    rebind_traits<_Sp_cp_type> _Alloc_traits;
	  typename _Alloc_traits::allocator_type __a2(__a);
	  _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
	  __try
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
    36aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    36ae:	48 89 c7             	mov    %rax,%rdi
    36b1:	e8 66 ff ff ff       	callq  361c <_ZSt4moveIRKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEONSt16remove_referenceIT_E4typeEOSQ_>
    36b6:	48 89 c2             	mov    %rax,%rdx
    36b9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
    36bd:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    36c1:	48 89 d9             	mov    %rbx,%rcx
    36c4:	48 89 c7             	mov    %rax,%rdi
    36c7:	e8 dc 00 00 00       	callq  37a8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISQ_IKSN_SL_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSR_PT_DpOSV_>
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
    36cc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    36d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    36d4:	48 89 10             	mov    %rdx,(%rax)
	    }
	  __catch(...)
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
	      __throw_exception_again;
	    }
    36d7:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    36db:	48 89 c7             	mov    %rax,%rdi
    36de:	e8 77 00 00 00       	callq  375a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    36e3:	eb 49                	jmp    372e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
    36e5:	48 89 c3             	mov    %rax,%rbx
	    {
	      _Alloc_traits::construct(__a2, __mem, std::move(__a),
		    std::forward<_Args>(__args)...);
	      _M_pi = __mem;
	    }
	  __catch(...)
    36e8:	e8 00 00 00 00       	callq  36ed <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xa3>
    36ed:	eb 28                	jmp    3717 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xcd>
    36ef:	48 89 c7             	mov    %rax,%rdi
    36f2:	e8 00 00 00 00       	callq  36f7 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xad>
	    {
	      _Alloc_traits::deallocate(__a2, __mem, 1);
    36f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    36fb:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    36ff:	ba 01 00 00 00       	mov    $0x1,%edx
    3704:	48 89 ce             	mov    %rcx,%rsi
    3707:	48 89 c7             	mov    %rax,%rdi
    370a:	e8 ef 00 00 00       	callq  37fe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSR_PSQ_m>
	      __throw_exception_again;
    370f:	e8 00 00 00 00       	callq  3714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xca>
    3714:	48 89 c3             	mov    %rax,%rbx
	    }
    3717:	48 8d 45 e7          	lea    -0x19(%rbp),%rax
    371b:	48 89 c7             	mov    %rax,%rdi
    371e:	e8 37 00 00 00       	callq  375a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
    3723:	48 89 d8             	mov    %rbx,%rax
    3726:	48 89 c7             	mov    %rax,%rdi
    3729:	e8 00 00 00 00       	callq  372e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1INSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS6_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISB_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSJ_EUlvE_vEEEESaISP_EISO_EEESt19_Sp_make_shared_tagPT_RKT0_DpOT1_+0xe4>
	}
    372e:	48 83 c4 38          	add    $0x38,%rsp
    3732:	5b                   	pop    %rbx
    3733:	5d                   	pop    %rbp
    3734:	c3                   	retq   
    3735:	90                   	nop

0000000000003736 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISL_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
    3736:	55                   	push   %rbp
    3737:	48 89 e5             	mov    %rsp,%rbp
    373a:	48 83 ec 10          	sub    $0x10,%rsp
    373e:	e8 00 00 00 00       	callq  3743 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISL_EERKSaIT_E+0xd>
    3743:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3747:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    374b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    374f:	48 89 c7             	mov    %rax,%rdi
    3752:	e8 d9 00 00 00       	callq  3830 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEEC2Ev>
    3757:	c9                   	leaveq 
    3758:	c3                   	retq   
    3759:	90                   	nop

000000000000375a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>:

      ~allocator() throw() { }
    375a:	55                   	push   %rbp
    375b:	48 89 e5             	mov    %rsp,%rbp
    375e:	48 83 ec 10          	sub    $0x10,%rsp
    3762:	e8 00 00 00 00       	callq  3767 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev+0xd>
    3767:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    376b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    376f:	48 89 c7             	mov    %rax,%rdi
    3772:	e8 cd 00 00 00       	callq  3844 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEED2Ev>
    3777:	c9                   	leaveq 
    3778:	c3                   	retq   

0000000000003779 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSR_m>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      static pointer
      allocate(_Alloc& __a, size_type __n)
    3779:	55                   	push   %rbp
    377a:	48 89 e5             	mov    %rsp,%rbp
    377d:	48 83 ec 10          	sub    $0x10,%rsp
    3781:	e8 00 00 00 00       	callq  3786 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE8allocateERSR_m+0xd>
    3786:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    378a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __a.allocate(__n); }
    378e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3792:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3796:	ba 00 00 00 00       	mov    $0x0,%edx
    379b:	48 89 ce             	mov    %rcx,%rsi
    379e:	48 89 c7             	mov    %rax,%rdi
    37a1:	e8 b2 00 00 00       	callq  3858 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv>
    37a6:	c9                   	leaveq 
    37a7:	c3                   	retq   

00000000000037a8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISQ_IKSN_SL_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSR_PT_DpOSV_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    37a8:	55                   	push   %rbp
    37a9:	48 89 e5             	mov    %rsp,%rbp
    37ac:	53                   	push   %rbx
    37ad:	48 83 ec 28          	sub    $0x28,%rsp
    37b1:	e8 00 00 00 00       	callq  37b6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE9constructISQ_IKSN_SL_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSR_PT_DpOSV_+0xe>
    37b6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    37ba:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    37be:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    37c2:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    37c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    37ca:	48 89 c7             	mov    %rax,%rdi
    37cd:	e8 e7 f5 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    37d2:	48 89 c3             	mov    %rax,%rbx
    37d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    37d9:	48 89 c7             	mov    %rax,%rdi
    37dc:	e8 52 fe ff ff       	callq  3633 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEOT_RNSt16remove_referenceISO_E4typeE>
    37e1:	48 89 c2             	mov    %rax,%rdx
    37e4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    37e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    37ec:	48 89 d9             	mov    %rbx,%rcx
    37ef:	48 89 c7             	mov    %rax,%rdi
    37f2:	e8 b6 00 00 00       	callq  38ad <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISQ_IKSN_SL_EEENSt9enable_ifIXsrNSS_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSR_PSX_DpOSY_>
    37f7:	48 83 c4 28          	add    $0x28,%rsp
    37fb:	5b                   	pop    %rbx
    37fc:	5d                   	pop    %rbp
    37fd:	c3                   	retq   

00000000000037fe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSR_PSQ_m>:
       *  @param  __p  Pointer to the memory to deallocate.
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    37fe:	55                   	push   %rbp
    37ff:	48 89 e5             	mov    %rsp,%rbp
    3802:	48 83 ec 20          	sub    $0x20,%rsp
    3806:	e8 00 00 00 00       	callq  380b <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSR_PSQ_m+0xd>
    380b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    380f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3813:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { __a.deallocate(__p, __n); }
    3817:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    381b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    381f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3823:	48 89 ce             	mov    %rcx,%rsi
    3826:	48 89 c7             	mov    %rax,%rdi
    3829:	e8 d6 00 00 00       	callq  3904 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE10deallocateEPSQ_m>
    382e:	c9                   	leaveq 
    382f:	c3                   	retq   

0000000000003830 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEEC2Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3830:	55                   	push   %rbp
    3831:	48 89 e5             	mov    %rsp,%rbp
    3834:	48 83 ec 08          	sub    $0x8,%rsp
    3838:	e8 00 00 00 00       	callq  383d <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEEC2Ev+0xd>
    383d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3841:	c9                   	leaveq 
    3842:	c3                   	retq   
    3843:	90                   	nop

0000000000003844 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEED2Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    3844:	55                   	push   %rbp
    3845:	48 89 e5             	mov    %rsp,%rbp
    3848:	48 83 ec 08          	sub    $0x8,%rsp
    384c:	e8 00 00 00 00       	callq  3851 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEED2Ev+0xd>
    3851:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3855:	c9                   	leaveq 
    3856:	c3                   	retq   
    3857:	90                   	nop

0000000000003858 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
    3858:	55                   	push   %rbp
    3859:	48 89 e5             	mov    %rsp,%rbp
    385c:	48 83 ec 20          	sub    $0x20,%rsp
    3860:	e8 00 00 00 00       	callq  3865 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0xd>
    3865:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3869:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    386d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
    3871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3875:	48 89 c7             	mov    %rax,%rdi
    3878:	e8 af 00 00 00       	callq  392c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8max_sizeEv>
    387d:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
    3881:	0f 92 c0             	setb   %al
    3884:	84 c0                	test   %al,%al
    3886:	74 05                	je     388d <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
    3888:	e8 00 00 00 00       	callq  388d <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    388d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3891:	48 c1 e0 03          	shl    $0x3,%rax
    3895:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    389c:	00 
    389d:	48 29 c2             	sub    %rax,%rdx
    38a0:	48 89 d0             	mov    %rdx,%rax
    38a3:	48 89 c7             	mov    %rax,%rdi
    38a6:	e8 00 00 00 00       	callq  38ab <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8allocateEmPKv+0x53>
      }
    38ab:	c9                   	leaveq 
    38ac:	c3                   	retq   

00000000000038ad <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISQ_IKSN_SL_EEENSt9enable_ifIXsrNSS_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSR_PSX_DpOSY_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    38ad:	55                   	push   %rbp
    38ae:	48 89 e5             	mov    %rsp,%rbp
    38b1:	53                   	push   %rbx
    38b2:	48 83 ec 28          	sub    $0x28,%rsp
    38b6:	e8 00 00 00 00       	callq  38bb <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE12_S_constructISQ_IKSN_SL_EEENSt9enable_ifIXsrNSS_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSR_PSX_DpOSY_+0xe>
    38bb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    38bf:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    38c3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    38c7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    38cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    38cf:	48 89 c7             	mov    %rax,%rdi
    38d2:	e8 e2 f4 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    38d7:	48 89 c3             	mov    %rax,%rbx
    38da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    38de:	48 89 c7             	mov    %rax,%rdi
    38e1:	e8 4d fd ff ff       	callq  3633 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEOT_RNSt16remove_referenceISO_E4typeE>
    38e6:	48 89 c2             	mov    %rax,%rdx
    38e9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
    38ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    38f1:	48 89 d9             	mov    %rbx,%rcx
    38f4:	48 89 c7             	mov    %rax,%rdi
    38f7:	e8 4e 00 00 00       	callq  394a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_>
    38fc:	48 83 c4 28          	add    $0x28,%rsp
    3900:	5b                   	pop    %rbx
    3901:	5d                   	pop    %rbp
    3902:	c3                   	retq   
    3903:	90                   	nop

0000000000003904 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE10deallocateEPSQ_m>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    3904:	55                   	push   %rbp
    3905:	48 89 e5             	mov    %rsp,%rbp
    3908:	48 83 ec 20          	sub    $0x20,%rsp
    390c:	e8 00 00 00 00       	callq  3911 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE10deallocateEPSQ_m+0xd>
    3911:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3915:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3919:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
    391d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3921:	48 89 c7             	mov    %rax,%rdi
    3924:	e8 00 00 00 00       	callq  3929 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE10deallocateEPSQ_m+0x25>
    3929:	c9                   	leaveq 
    392a:	c3                   	retq   
    392b:	90                   	nop

000000000000392c <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    392c:	55                   	push   %rbp
    392d:	48 89 e5             	mov    %rsp,%rbp
    3930:	48 83 ec 08          	sub    $0x8,%rsp
    3934:	e8 00 00 00 00       	callq  3939 <_ZNK9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE8max_sizeEv+0xd>
    3939:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
    393d:	48 b8 92 24 49 92 24 	movabs $0x492492492492492,%rax
    3944:	49 92 04 
    3947:	c9                   	leaveq 
    3948:	c3                   	retq   
    3949:	90                   	nop

000000000000394a <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    394a:	55                   	push   %rbp
    394b:	48 89 e5             	mov    %rsp,%rbp
    394e:	41 56                	push   %r14
    3950:	41 55                	push   %r13
    3952:	41 54                	push   %r12
    3954:	53                   	push   %rbx
    3955:	48 83 ec 30          	sub    $0x30,%rsp
    3959:	e8 00 00 00 00       	callq  395e <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0x14>
    395e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    3962:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    3966:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    396a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    396e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    3972:	48 89 c7             	mov    %rax,%rdi
    3975:	e8 b9 fc ff ff       	callq  3633 <_ZSt7forwardIKSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEEOT_RNSt16remove_referenceISO_E4typeE>
    397a:	48 89 c2             	mov    %rax,%rdx
    397d:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    3981:	48 89 d6             	mov    %rdx,%rsi
    3984:	48 89 c7             	mov    %rax,%rdi
    3987:	e8 7e 00 00 00       	callq  3a0a <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1ERKSL_>
    398c:	4c 8d 6d df          	lea    -0x21(%rbp),%r13
    3990:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    3994:	48 89 c7             	mov    %rax,%rdi
    3997:	e8 1d f4 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    399c:	49 89 c6             	mov    %rax,%r14
    399f:	4c 8b 65 c0          	mov    -0x40(%rbp),%r12
    39a3:	4c 89 e6             	mov    %r12,%rsi
    39a6:	bf 38 00 00 00       	mov    $0x38,%edi
    39ab:	e8 00 00 00 00       	callq  39b0 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0x66>
    39b0:	48 89 c3             	mov    %rax,%rbx
    39b3:	48 85 db             	test   %rbx,%rbx
    39b6:	74 0e                	je     39c6 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0x7c>
    39b8:	4c 89 f2             	mov    %r14,%rdx
    39bb:	4c 89 ee             	mov    %r13,%rsi
    39be:	48 89 df             	mov    %rbx,%rdi
    39c1:	e8 8e 00 00 00       	callq  3a54 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_>
    39c6:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    39ca:	48 89 c7             	mov    %rax,%rdi
    39cd:	e8 52 f9 ff ff       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
    39d2:	eb 28                	jmp    39fc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0xb2>
    39d4:	49 89 c5             	mov    %rax,%r13
    39d7:	4c 89 e6             	mov    %r12,%rsi
    39da:	48 89 df             	mov    %rbx,%rdi
    39dd:	e8 00 00 00 00       	callq  39e2 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0x98>
    39e2:	4c 89 eb             	mov    %r13,%rbx
    39e5:	48 8d 45 df          	lea    -0x21(%rbp),%rax
    39e9:	48 89 c7             	mov    %rax,%rdi
    39ec:	e8 33 f9 ff ff       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
    39f1:	48 89 d8             	mov    %rbx,%rax
    39f4:	48 89 c7             	mov    %rax,%rdi
    39f7:	e8 00 00 00 00       	callq  39fc <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE9constructISQ_IKSO_SM_EEEvPT_DpOT0_+0xb2>
    39fc:	48 83 c4 30          	add    $0x30,%rsp
    3a00:	5b                   	pop    %rbx
    3a01:	41 5c                	pop    %r12
    3a03:	41 5d                	pop    %r13
    3a05:	41 5e                	pop    %r14
    3a07:	5d                   	pop    %rbp
    3a08:	c3                   	retq   
    3a09:	90                   	nop

0000000000003a0a <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1ERKSL_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
    3a0a:	55                   	push   %rbp
    3a0b:	48 89 e5             	mov    %rsp,%rbp
    3a0e:	48 83 ec 10          	sub    $0x10,%rsp
    3a12:	e8 00 00 00 00       	callq  3a17 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1ERKSL_+0xd>
    3a17:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a1b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
    3a1f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a27:	48 89 d6             	mov    %rdx,%rsi
    3a2a:	48 89 c7             	mov    %rax,%rdi
    3a2d:	e8 f2 00 00 00       	callq  3b24 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2ERKSN_>
    3a32:	c9                   	leaveq 
    3a33:	c3                   	retq   

0000000000003a34 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>:
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      // Helper class that stores the pointer and also acts as an allocator.
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
    3a34:	55                   	push   %rbp
    3a35:	48 89 e5             	mov    %rsp,%rbp
    3a38:	48 83 ec 10          	sub    $0x10,%rsp
    3a3c:	e8 00 00 00 00       	callq  3a41 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev+0xd>
    3a41:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3a45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3a49:	48 89 c7             	mov    %rax,%rdi
    3a4c:	e8 d3 f8 ff ff       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
    3a51:	c9                   	leaveq 
    3a52:	c3                   	retq   
    3a53:	90                   	nop

0000000000003a54 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_>:
	_Tp* _M_ptr;
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
    3a54:	55                   	push   %rbp
    3a55:	48 89 e5             	mov    %rsp,%rbp
    3a58:	53                   	push   %rbx
    3a59:	48 83 ec 38          	sub    $0x38,%rsp
    3a5d:	e8 00 00 00 00       	callq  3a62 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_+0xe>
    3a62:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    3a66:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    3a6a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	: _M_impl(__a)
    3a6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a72:	48 89 c7             	mov    %rax,%rdi
    3a75:	e8 00 00 00 00       	callq  3a7a <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_+0x26>
    3a7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a7e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3a85:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    3a89:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3a8d:	48 89 d6             	mov    %rdx,%rsi
    3a90:	48 89 c7             	mov    %rax,%rdi
    3a93:	e8 72 ff ff ff       	callq  3a0a <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1ERKSL_>
    3a98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a9c:	48 8d 50 10          	lea    0x10(%rax),%rdx
    3aa0:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3aa4:	48 89 c6             	mov    %rax,%rsi
    3aa7:	48 89 d7             	mov    %rdx,%rdi
    3aaa:	e8 8d 00 00 00       	callq  3b3c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESM_>
    3aaf:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
    3ab3:	48 89 c7             	mov    %rax,%rdi
    3ab6:	e8 69 f8 ff ff       	callq  3324 <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEED1Ev>
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
    3abb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3abf:	48 8d 50 18          	lea    0x18(%rax),%rdx
    3ac3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ac7:	48 89 50 10          	mov    %rdx,0x10(%rax)
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
    3acb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3acf:	48 89 c7             	mov    %rax,%rdi
    3ad2:	e8 e2 f2 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3ad7:	48 89 c2             	mov    %rax,%rdx
    3ada:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3ade:	48 8b 48 10          	mov    0x10(%rax),%rcx
	: _M_impl(__a)
	{
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
    3ae2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3ae6:	48 89 ce             	mov    %rcx,%rsi
    3ae9:	48 89 c7             	mov    %rax,%rdi
    3aec:	e8 80 00 00 00       	callq  3b71 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE9constructISL_ISK_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSM_PT_DpOSP_>
	      std::forward<_Args>(__args)...); // might throw
	}
    3af1:	eb 2a                	jmp    3b1d <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_+0xc9>
    3af3:	48 89 c3             	mov    %rax,%rbx
      };

    public:
      template<typename... _Args>
	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
	: _M_impl(__a)
    3af6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3afa:	48 83 c0 10          	add    $0x10,%rax
    3afe:	48 89 c7             	mov    %rax,%rdi
    3b01:	e8 2e ff ff ff       	callq  3a34 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    3b06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3b0a:	48 89 c7             	mov    %rax,%rdi
    3b0d:	e8 00 00 00 00       	callq  3b12 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_+0xbe>
    3b12:	48 89 d8             	mov    %rbx,%rax
    3b15:	48 89 c7             	mov    %rax,%rdi
    3b18:	e8 00 00 00 00       	callq  3b1d <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEC1IISK_EEESM_DpOT_+0xc9>
	  _M_impl._M_ptr = static_cast<_Tp*>(static_cast<void*>(&_M_storage));
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}
    3b1d:	48 83 c4 38          	add    $0x38,%rsp
    3b21:	5b                   	pop    %rbx
    3b22:	5d                   	pop    %rbp
    3b23:	c3                   	retq   

0000000000003b24 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2ERKSN_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    3b24:	55                   	push   %rbp
    3b25:	48 89 e5             	mov    %rsp,%rbp
    3b28:	48 83 ec 10          	sub    $0x10,%rsp
    3b2c:	e8 00 00 00 00       	callq  3b31 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEEC2ERKSN_+0xd>
    3b31:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3b35:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3b39:	c9                   	leaveq 
    3b3a:	c3                   	retq   
    3b3b:	90                   	nop

0000000000003b3c <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESM_>:
      // Used to dispose of the owned pointer and the internal refcount
      // Requires that copies of _Alloc can free each other's memory.
      struct _Impl
      : public _Alloc           // copy constructor must not throw
      {
	_Impl(_Alloc __a) : _Alloc(__a), _M_ptr() { }
    3b3c:	55                   	push   %rbp
    3b3d:	48 89 e5             	mov    %rsp,%rbp
    3b40:	48 83 ec 10          	sub    $0x10,%rsp
    3b44:	e8 00 00 00 00       	callq  3b49 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplC1ESM_+0xd>
    3b49:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3b4d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3b51:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    3b55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b59:	48 89 d6             	mov    %rdx,%rsi
    3b5c:	48 89 c7             	mov    %rax,%rdi
    3b5f:	e8 a6 fe ff ff       	callq  3a0a <_ZNSaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEEEC1ERKSL_>
    3b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3b68:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3b6f:	c9                   	leaveq 
    3b70:	c3                   	retq   

0000000000003b71 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE9constructISL_ISK_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSM_PT_DpOSP_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    3b71:	55                   	push   %rbp
    3b72:	48 89 e5             	mov    %rsp,%rbp
    3b75:	48 83 ec 20          	sub    $0x20,%rsp
    3b79:	e8 00 00 00 00       	callq  3b7e <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE9constructISL_ISK_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERSM_PT_DpOSP_+0xd>
    3b7e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3b82:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3b86:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
    3b8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3b8e:	48 89 c7             	mov    %rax,%rdi
    3b91:	e8 23 f2 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3b96:	48 89 c2             	mov    %rax,%rdx
    3b99:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3b9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ba1:	48 89 ce             	mov    %rcx,%rsi
    3ba4:	48 89 c7             	mov    %rax,%rdi
    3ba7:	e8 02 00 00 00       	callq  3bae <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE12_S_constructISL_ISK_EEENSt9enable_ifIXsrNSN_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSM_PSR_DpOSS_>
    3bac:	c9                   	leaveq 
    3bad:	c3                   	retq   

0000000000003bae <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE12_S_constructISL_ISK_EEENSt9enable_ifIXsrNSN_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSM_PSR_DpOSS_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
    3bae:	55                   	push   %rbp
    3baf:	48 89 e5             	mov    %rsp,%rbp
    3bb2:	48 83 ec 20          	sub    $0x20,%rsp
    3bb6:	e8 00 00 00 00       	callq  3bbb <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE12_S_constructISL_ISK_EEENSt9enable_ifIXsrNSN_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERSM_PSR_DpOSS_+0xd>
    3bbb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3bbf:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3bc3:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
    3bc7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3bcb:	48 89 c7             	mov    %rax,%rdi
    3bce:	e8 e6 f1 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3bd3:	48 89 c2             	mov    %rax,%rdx
    3bd6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
    3bda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3bde:	48 89 ce             	mov    %rcx,%rsi
    3be1:	48 89 c7             	mov    %rax,%rdi
    3be4:	e8 03 00 00 00       	callq  3bec <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE9constructISM_ISL_EEEvPT_DpOT0_>
    3be9:	c9                   	leaveq 
    3bea:	c3                   	retq   
    3beb:	90                   	nop

0000000000003bec <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE9constructISM_ISL_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
    3bec:	55                   	push   %rbp
    3bed:	48 89 e5             	mov    %rsp,%rbp
    3bf0:	53                   	push   %rbx
    3bf1:	48 83 ec 28          	sub    $0x28,%rsp
    3bf5:	e8 00 00 00 00       	callq  3bfa <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE9constructISM_ISL_EEEvPT_DpOT0_+0xe>
    3bfa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    3bfe:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    3c02:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    3c06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3c0a:	48 89 c7             	mov    %rax,%rdi
    3c0d:	e8 a7 f1 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3c12:	48 89 c3             	mov    %rax,%rbx
    3c15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    3c19:	48 89 c6             	mov    %rax,%rsi
    3c1c:	bf 20 00 00 00       	mov    $0x20,%edi
    3c21:	e8 00 00 00 00       	callq  3c26 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE9constructISM_ISL_EEEvPT_DpOT0_+0x3a>
    3c26:	48 85 c0             	test   %rax,%rax
    3c29:	74 0b                	je     3c36 <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE9constructISM_ISL_EEEvPT_DpOT0_+0x4a>
    3c2b:	48 89 de             	mov    %rbx,%rsi
    3c2e:	48 89 c7             	mov    %rax,%rdi
    3c31:	e8 08 00 00 00       	callq  3c3e <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEC1EOSJ_>
    3c36:	48 83 c4 28          	add    $0x28,%rsp
    3c3a:	5b                   	pop    %rbx
    3c3b:	5d                   	pop    %rbp
    3c3c:	c3                   	retq   
    3c3d:	90                   	nop

0000000000003c3e <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEC1EOSJ_>:
    template<typename _Callable>
      struct _Impl : public _Impl_base
      {
	_Callable		_M_func;

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
    3c3e:	55                   	push   %rbp
    3c3f:	48 89 e5             	mov    %rsp,%rbp
    3c42:	48 83 ec 10          	sub    $0x10,%rsp
    3c46:	e8 00 00 00 00       	callq  3c4b <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEC1EOSJ_+0xd>
    3c4b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3c4f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    3c53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3c57:	48 89 c7             	mov    %rax,%rdi
    3c5a:	e8 00 00 00 00       	callq  3c5f <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEEC1EOSJ_+0x21>
    3c5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3c63:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3c6e:	48 89 c7             	mov    %rax,%rdi
    3c71:	e8 43 f1 ff ff       	callq  2db9 <_ZSt7forwardISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS0_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_vEEEOT_RNSt16remove_referenceISJ_E4typeE>
    3c76:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3c7a:	48 83 c2 18          	add    $0x18,%rdx
    3c7e:	48 89 c6             	mov    %rax,%rsi
    3c81:	48 89 d7             	mov    %rdx,%rdi
    3c84:	e8 c5 f0 ff ff       	callq  2d4e <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEC1EOSH_>
	{ }
    3c89:	c9                   	leaveq 
    3c8a:	c3                   	retq   
    3c8b:	90                   	nop

0000000000003c8c <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev>:

      virtual void _M_run() = 0;
    };

    template<typename _Callable>
      struct _Impl : public _Impl_base
    3c8c:	55                   	push   %rbp
    3c8d:	48 89 e5             	mov    %rsp,%rbp
    3c90:	48 83 ec 10          	sub    $0x10,%rsp
    3c94:	e8 00 00 00 00       	callq  3c99 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev+0xd>
    3c99:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3c9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ca1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3cac:	48 89 c7             	mov    %rax,%rdi
    3caf:	e8 00 00 00 00       	callq  3cb4 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev+0x28>
    3cb4:	b8 00 00 00 00       	mov    $0x0,%eax
    3cb9:	85 c0                	test   %eax,%eax
    3cbb:	74 0c                	je     3cc9 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev+0x3d>
    3cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3cc1:	48 89 c7             	mov    %rax,%rdi
    3cc4:	e8 00 00 00 00       	callq  3cc9 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev+0x3d>
    3cc9:	c9                   	leaveq 
    3cca:	c3                   	retq   
    3ccb:	90                   	nop

0000000000003ccc <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED0Ev>:
    3ccc:	55                   	push   %rbp
    3ccd:	48 89 e5             	mov    %rsp,%rbp
    3cd0:	48 83 ec 10          	sub    $0x10,%rsp
    3cd4:	e8 00 00 00 00       	callq  3cd9 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED0Ev+0xd>
    3cd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3cdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ce1:	48 89 c7             	mov    %rax,%rdi
    3ce4:	e8 a3 ff ff ff       	callq  3c8c <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED1Ev>
    3ce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ced:	48 89 c7             	mov    %rax,%rdi
    3cf0:	e8 00 00 00 00       	callq  3cf5 <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEED0Ev+0x29>
    3cf5:	c9                   	leaveq 
    3cf6:	c3                   	retq   
    3cf7:	90                   	nop

0000000000003cf8 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>:
    struct uses_allocator<packaged_task<_Res>, _Alloc>
    : public true_type { };


  template<typename _BoundFn, typename _Res>
    class __future_base::_Deferred_state final
    3cf8:	55                   	push   %rbp
    3cf9:	48 89 e5             	mov    %rsp,%rbp
    3cfc:	48 83 ec 10          	sub    $0x10,%rsp
    3d00:	e8 00 00 00 00       	callq  3d05 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0xd>
    3d05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3d09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d0d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3d14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d18:	48 83 c0 70          	add    $0x70,%rax
    3d1c:	48 89 c7             	mov    %rax,%rdi
    3d1f:	e8 00 00 00 00       	callq  3d24 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x2c>
    3d24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d28:	48 89 c7             	mov    %rax,%rdi
    3d2b:	e8 00 00 00 00       	callq  3d30 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x38>
    3d30:	b8 00 00 00 00       	mov    $0x0,%eax
    3d35:	85 c0                	test   %eax,%eax
    3d37:	74 0c                	je     3d45 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x4d>
    3d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d3d:	48 89 c7             	mov    %rax,%rdi
    3d40:	e8 00 00 00 00       	callq  3d45 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x4d>
    3d45:	c9                   	leaveq 
    3d46:	c3                   	retq   
    3d47:	90                   	nop

0000000000003d48 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev>:
    3d48:	55                   	push   %rbp
    3d49:	48 89 e5             	mov    %rsp,%rbp
    3d4c:	48 83 ec 10          	sub    $0x10,%rsp
    3d50:	e8 00 00 00 00       	callq  3d55 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev+0xd>
    3d55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3d59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d5d:	48 89 c7             	mov    %rax,%rdi
    3d60:	e8 93 ff ff ff       	callq  3cf8 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>
    3d65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3d69:	48 89 c7             	mov    %rax,%rdi
    3d6c:	e8 00 00 00 00       	callq  3d71 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev+0x29>
    3d71:	c9                   	leaveq 
    3d72:	c3                   	retq   

0000000000003d73 <_Z41__static_initialization_and_destruction_0ii>:
    3d73:	55                   	push   %rbp
    3d74:	48 89 e5             	mov    %rsp,%rbp
    3d77:	48 83 ec 10          	sub    $0x10,%rsp
    3d7b:	e8 00 00 00 00       	callq  3d80 <_Z41__static_initialization_and_destruction_0ii+0xd>
    3d80:	89 7d fc             	mov    %edi,-0x4(%rbp)
    3d83:	89 75 f8             	mov    %esi,-0x8(%rbp)
    3d86:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
    3d8a:	75 27                	jne    3db3 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3d8c:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
    3d93:	75 1e                	jne    3db3 <_Z41__static_initialization_and_destruction_0ii+0x40>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    3d95:	bf 00 00 00 00       	mov    $0x0,%edi
    3d9a:	e8 00 00 00 00       	callq  3d9f <_Z41__static_initialization_and_destruction_0ii+0x2c>
    3d9f:	ba 00 00 00 00       	mov    $0x0,%edx
    3da4:	be 00 00 00 00       	mov    $0x0,%esi
    3da9:	bf 00 00 00 00       	mov    $0x0,%edi
    3dae:	e8 00 00 00 00       	callq  3db3 <_Z41__static_initialization_and_destruction_0ii+0x40>
    3db3:	c9                   	leaveq 
    3db4:	c3                   	retq   
    3db5:	90                   	nop

0000000000003db6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
    3db6:	55                   	push   %rbp
    3db7:	48 89 e5             	mov    %rsp,%rbp
    3dba:	48 83 ec 10          	sub    $0x10,%rsp
    3dbe:	e8 00 00 00 00       	callq  3dc3 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
    3dc3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3dc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dcb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3dd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dd6:	48 83 c0 10          	add    $0x10,%rax
    3dda:	48 89 c7             	mov    %rax,%rdi
    3ddd:	e8 52 fc ff ff       	callq  3a34 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    3de2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3de6:	48 89 c7             	mov    %rax,%rdi
    3de9:	e8 00 00 00 00       	callq  3dee <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x38>
    3dee:	b8 00 00 00 00       	mov    $0x0,%eax
    3df3:	85 c0                	test   %eax,%eax
    3df5:	74 0c                	je     3e03 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    3df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3dfb:	48 89 c7             	mov    %rax,%rdi
    3dfe:	e8 00 00 00 00       	callq  3e03 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    3e03:	c9                   	leaveq 
    3e04:	c3                   	retq   
    3e05:	90                   	nop

0000000000003e06 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED0Ev>:
    3e06:	55                   	push   %rbp
    3e07:	48 89 e5             	mov    %rsp,%rbp
    3e0a:	48 83 ec 10          	sub    $0x10,%rsp
    3e0e:	e8 00 00 00 00       	callq  3e13 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0xd>
    3e13:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3e17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e1b:	48 89 c7             	mov    %rax,%rdi
    3e1e:	e8 93 ff ff ff       	callq  3db6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    3e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e27:	48 89 c7             	mov    %rax,%rdi
    3e2a:	e8 00 00 00 00       	callq  3e2f <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0x29>
    3e2f:	c9                   	leaveq 
    3e30:	c3                   	retq   
    3e31:	90                   	nop

0000000000003e32 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
    3e32:	55                   	push   %rbp
    3e33:	48 89 e5             	mov    %rsp,%rbp
    3e36:	48 83 ec 10          	sub    $0x10,%rsp
    3e3a:	e8 00 00 00 00       	callq  3e3f <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv+0xd>
    3e3f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }
    3e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3e47:	48 8b 40 10          	mov    0x10(%rax),%rax
    3e4b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3e4f:	48 83 c2 10          	add    $0x10,%rdx
    3e53:	48 89 c6             	mov    %rax,%rsi
    3e56:	48 89 d7             	mov    %rdx,%rdi
    3e59:	e8 a7 04 00 00       	callq  4305 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE7destroyISL_EEvRSM_PT_>
    3e5e:	c9                   	leaveq 
    3e5f:	c3                   	retq   

0000000000003e60 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:

      // Override because the allocator needs to know the dynamic type
      virtual void
      _M_destroy() noexcept
    3e60:	55                   	push   %rbp
    3e61:	48 89 e5             	mov    %rsp,%rbp
    3e64:	48 83 ec 20          	sub    $0x20,%rsp
    3e68:	e8 00 00 00 00       	callq  3e6d <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0xd>
    3e6d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	typedef typename allocator_traits<_Alloc>::template
	  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
	typename _Alloc_traits::allocator_type __a(_M_impl);
    3e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3e75:	48 8d 50 10          	lea    0x10(%rax),%rdx
    3e79:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3e7d:	48 89 d6             	mov    %rdx,%rsi
    3e80:	48 89 c7             	mov    %rax,%rdi
    3e83:	e8 ae f8 ff ff       	callq  3736 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISL_EERKSaIT_E>
	_Alloc_traits::destroy(__a, this);
    3e88:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3e8c:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3e90:	48 89 d6             	mov    %rdx,%rsi
    3e93:	48 89 c7             	mov    %rax,%rdi
    3e96:	e8 94 04 00 00       	callq  432f <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISQ_EEvRSR_PT_>
	_Alloc_traits::deallocate(__a, this, 1);
    3e9b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    3e9f:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3ea3:	ba 01 00 00 00       	mov    $0x1,%edx
    3ea8:	48 89 ce             	mov    %rcx,%rsi
    3eab:	48 89 c7             	mov    %rax,%rdi
    3eae:	e8 4b f9 ff ff       	callq  37fe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSR_PSQ_m>
    3eb3:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3eb7:	48 89 c7             	mov    %rax,%rdi
    3eba:	e8 9b f8 ff ff       	callq  375a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
      }
    3ebf:	c9                   	leaveq 
    3ec0:	c3                   	retq   
    3ec1:	90                   	nop

0000000000003ec2 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:

      // Sneaky trick so __shared_ptr can get the managed pointer
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
    3ec2:	55                   	push   %rbp
    3ec3:	48 89 e5             	mov    %rsp,%rbp
    3ec6:	48 83 ec 10          	sub    $0x10,%rsp
    3eca:	e8 00 00 00 00       	callq  3ecf <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0xd>
    3ecf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3ed3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#ifdef __GXX_RTTI
	return __ti == typeid(_Sp_make_shared_tag)
    3ed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    3edb:	be 00 00 00 00       	mov    $0x0,%esi
    3ee0:	48 89 c7             	mov    %rax,%rdi
    3ee3:	e8 00 00 00 00       	callq  3ee8 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x26>
	       ? static_cast<void*>(&_M_storage)
	       : 0;
    3ee8:	84 c0                	test   %al,%al
    3eea:	74 0a                	je     3ef6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x34>
    3eec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3ef0:	48 83 c0 18          	add    $0x18,%rax
    3ef4:	eb 05                	jmp    3efb <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x39>
    3ef6:	b8 00 00 00 00       	mov    $0x0,%eax
#else
        return 0;
#endif
      }
    3efb:	c9                   	leaveq 
    3efc:	c3                   	retq   
    3efd:	90                   	nop

0000000000003efe <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEE6_M_runEv>:

	_Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
	{ }

	void
	_M_run() { _M_func(); }
    3efe:	55                   	push   %rbp
    3eff:	48 89 e5             	mov    %rsp,%rbp
    3f02:	48 83 ec 10          	sub    $0x10,%rsp
    3f06:	e8 00 00 00 00       	callq  3f0b <_ZNSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS1_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSE_EUlvE_vEEE6_M_runEv+0xd>
    3f0b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3f0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f13:	48 83 c0 18          	add    $0x18,%rax
    3f17:	48 89 c7             	mov    %rax,%rdi
    3f1a:	e8 3b 04 00 00       	callq  435a <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEclEv>
    3f1f:	c9                   	leaveq 
    3f20:	c3                   	retq   
    3f21:	90                   	nop

0000000000003f22 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
    3f22:	55                   	push   %rbp
    3f23:	48 89 e5             	mov    %rsp,%rbp
    3f26:	48 83 ec 10          	sub    $0x10,%rsp
    3f2a:	e8 00 00 00 00       	callq  3f2f <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
    3f2f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3f33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f37:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    3f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f42:	48 83 c0 10          	add    $0x10,%rax
    3f46:	48 89 c7             	mov    %rax,%rdi
    3f49:	e8 ca e3 ff ff       	callq  2318 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    3f4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f52:	48 89 c7             	mov    %rax,%rdi
    3f55:	e8 00 00 00 00       	callq  3f5a <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x38>
    3f5a:	b8 00 00 00 00       	mov    $0x0,%eax
    3f5f:	85 c0                	test   %eax,%eax
    3f61:	74 0c                	je     3f6f <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    3f63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f67:	48 89 c7             	mov    %rax,%rdi
    3f6a:	e8 00 00 00 00       	callq  3f6f <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    3f6f:	c9                   	leaveq 
    3f70:	c3                   	retq   
    3f71:	90                   	nop

0000000000003f72 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev>:
    3f72:	55                   	push   %rbp
    3f73:	48 89 e5             	mov    %rsp,%rbp
    3f76:	48 83 ec 10          	sub    $0x10,%rsp
    3f7a:	e8 00 00 00 00       	callq  3f7f <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0xd>
    3f7f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    3f83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f87:	48 89 c7             	mov    %rax,%rdi
    3f8a:	e8 93 ff ff ff       	callq  3f22 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    3f8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3f93:	48 89 c7             	mov    %rax,%rdi
    3f96:	e8 00 00 00 00       	callq  3f9b <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0x29>
    3f9b:	c9                   	leaveq 
    3f9c:	c3                   	retq   
    3f9d:	90                   	nop

0000000000003f9e <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
    3f9e:	55                   	push   %rbp
    3f9f:	48 89 e5             	mov    %rsp,%rbp
    3fa2:	48 83 ec 10          	sub    $0x10,%rsp
    3fa6:	e8 00 00 00 00       	callq  3fab <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv+0xd>
    3fab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }
    3faf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    3fb3:	48 8b 40 10          	mov    0x10(%rax),%rax
    3fb7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    3fbb:	48 83 c2 10          	add    $0x10,%rdx
    3fbf:	48 89 c6             	mov    %rax,%rsi
    3fc2:	48 89 d7             	mov    %rdx,%rdi
    3fc5:	e8 b2 03 00 00       	callq  437c <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_>
    3fca:	c9                   	leaveq 
    3fcb:	c3                   	retq   

0000000000003fcc <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:

      // Override because the allocator needs to know the dynamic type
      virtual void
      _M_destroy() noexcept
    3fcc:	55                   	push   %rbp
    3fcd:	48 89 e5             	mov    %rsp,%rbp
    3fd0:	48 83 ec 20          	sub    $0x20,%rsp
    3fd4:	e8 00 00 00 00       	callq  3fd9 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0xd>
    3fd9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	typedef typename allocator_traits<_Alloc>::template
	  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
	typename _Alloc_traits::allocator_type __a(_M_impl);
    3fdd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    3fe1:	48 8d 50 10          	lea    0x10(%rax),%rdx
    3fe5:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3fe9:	48 89 d6             	mov    %rdx,%rsi
    3fec:	48 89 c7             	mov    %rax,%rdi
    3fef:	e8 3c dd ff ff       	callq  1d30 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>
	_Alloc_traits::destroy(__a, this);
    3ff4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    3ff8:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    3ffc:	48 89 d6             	mov    %rdx,%rsi
    3fff:	48 89 c7             	mov    %rax,%rdi
    4002:	e8 9f 03 00 00       	callq  43a6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_>
	_Alloc_traits::deallocate(__a, this, 1);
    4007:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    400b:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    400f:	ba 01 00 00 00       	mov    $0x1,%edx
    4014:	48 89 ce             	mov    %rcx,%rsi
    4017:	48 89 c7             	mov    %rax,%rdi
    401a:	e8 d9 dd ff ff       	callq  1df8 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>
    401f:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    4023:	48 89 c7             	mov    %rax,%rdi
    4026:	e8 29 dd ff ff       	callq  1d54 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
      }
    402b:	c9                   	leaveq 
    402c:	c3                   	retq   
    402d:	90                   	nop

000000000000402e <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:

      // Sneaky trick so __shared_ptr can get the managed pointer
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
    402e:	55                   	push   %rbp
    402f:	48 89 e5             	mov    %rsp,%rbp
    4032:	48 83 ec 10          	sub    $0x10,%rsp
    4036:	e8 00 00 00 00       	callq  403b <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0xd>
    403b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    403f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#ifdef __GXX_RTTI
	return __ti == typeid(_Sp_make_shared_tag)
    4043:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4047:	be 00 00 00 00       	mov    $0x0,%esi
    404c:	48 89 c7             	mov    %rax,%rdi
    404f:	e8 00 00 00 00       	callq  4054 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x26>
	       ? static_cast<void*>(&_M_storage)
	       : 0;
    4054:	84 c0                	test   %al,%al
    4056:	74 0a                	je     4062 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x34>
    4058:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    405c:	48 83 c0 18          	add    $0x18,%rax
    4060:	eb 05                	jmp    4067 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x39>
    4062:	b8 00 00 00 00       	mov    $0x0,%eax
#else
        return 0;
#endif
      }
    4067:	c9                   	leaveq 
    4068:	c3                   	retq   
    4069:	90                   	nop

000000000000406a <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_impl._M_ptr,
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
    406a:	55                   	push   %rbp
    406b:	48 89 e5             	mov    %rsp,%rbp
    406e:	48 83 ec 10          	sub    $0x10,%rsp
    4072:	e8 00 00 00 00       	callq  4077 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
    4077:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    407b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    407f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    4086:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    408a:	48 83 c0 10          	add    $0x10,%rax
    408e:	48 89 c7             	mov    %rax,%rdi
    4091:	e8 68 e1 ff ff       	callq  21fe <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE5_ImplD1Ev>
    4096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    409a:	48 89 c7             	mov    %rax,%rdi
    409d:	e8 00 00 00 00       	callq  40a2 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x38>
    40a2:	b8 00 00 00 00       	mov    $0x0,%eax
    40a7:	85 c0                	test   %eax,%eax
    40a9:	74 0c                	je     40b7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    40ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40af:	48 89 c7             	mov    %rax,%rdi
    40b2:	e8 00 00 00 00       	callq  40b7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x4d>
    40b7:	c9                   	leaveq 
    40b8:	c3                   	retq   
    40b9:	90                   	nop

00000000000040ba <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev>:
    40ba:	55                   	push   %rbp
    40bb:	48 89 e5             	mov    %rsp,%rbp
    40be:	48 83 ec 10          	sub    $0x10,%rsp
    40c2:	e8 00 00 00 00       	callq  40c7 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0xd>
    40c7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    40cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40cf:	48 89 c7             	mov    %rax,%rdi
    40d2:	e8 93 ff ff ff       	callq  406a <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    40d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40db:	48 89 c7             	mov    %rax,%rdi
    40de:	e8 00 00 00 00       	callq  40e3 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED0Ev+0x29>
    40e3:	c9                   	leaveq 
    40e4:	c3                   	retq   
    40e5:	90                   	nop

00000000000040e6 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv>:

      virtual void
      _M_dispose() noexcept
    40e6:	55                   	push   %rbp
    40e7:	48 89 e5             	mov    %rsp,%rbp
    40ea:	48 83 ec 10          	sub    $0x10,%rsp
    40ee:	e8 00 00 00 00       	callq  40f3 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv+0xd>
    40f3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { allocator_traits<_Alloc>::destroy(_M_impl, _M_impl._M_ptr); }
    40f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    40fb:	48 8b 40 10          	mov    0x10(%rax),%rax
    40ff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    4103:	48 83 c2 10          	add    $0x10,%rdx
    4107:	48 89 c6             	mov    %rax,%rsi
    410a:	48 89 d7             	mov    %rdx,%rdi
    410d:	e8 be 02 00 00       	callq  43d0 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_>
    4112:	c9                   	leaveq 
    4113:	c3                   	retq   

0000000000004114 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:

      // Override because the allocator needs to know the dynamic type
      virtual void
      _M_destroy() noexcept
    4114:	55                   	push   %rbp
    4115:	48 89 e5             	mov    %rsp,%rbp
    4118:	48 83 ec 20          	sub    $0x20,%rsp
    411c:	e8 00 00 00 00       	callq  4121 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0xd>
    4121:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	typedef typename allocator_traits<_Alloc>::template
	  rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
	typename _Alloc_traits::allocator_type __a(_M_impl);
    4125:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4129:	48 8d 50 10          	lea    0x10(%rax),%rdx
    412d:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    4131:	48 89 d6             	mov    %rdx,%rsi
    4134:	48 89 c7             	mov    %rax,%rdi
    4137:	e8 fa da ff ff       	callq  1c36 <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEEC1ISE_EERKSaIT_E>
	_Alloc_traits::destroy(__a, this);
    413c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
    4140:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    4144:	48 89 d6             	mov    %rdx,%rsi
    4147:	48 89 c7             	mov    %rax,%rdi
    414a:	e8 ab 02 00 00       	callq  43fa <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_>
	_Alloc_traits::deallocate(__a, this, 1);
    414f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
    4153:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    4157:	ba 01 00 00 00       	mov    $0x1,%edx
    415c:	48 89 ce             	mov    %rcx,%rsi
    415f:	48 89 c7             	mov    %rax,%rdi
    4162:	e8 97 db ff ff       	callq  1cfe <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10deallocateERSK_PSJ_m>
    4167:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
    416b:	48 89 c7             	mov    %rax,%rdi
    416e:	e8 e7 da ff ff       	callq  1c5a <_ZNSaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EEED1Ev>
      }
    4173:	c9                   	leaveq 
    4174:	c3                   	retq   
    4175:	90                   	nop

0000000000004176 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:

      // Sneaky trick so __shared_ptr can get the managed pointer
      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
    4176:	55                   	push   %rbp
    4177:	48 89 e5             	mov    %rsp,%rbp
    417a:	48 83 ec 10          	sub    $0x10,%rsp
    417e:	e8 00 00 00 00       	callq  4183 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0xd>
    4183:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4187:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
#ifdef __GXX_RTTI
	return __ti == typeid(_Sp_make_shared_tag)
    418b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    418f:	be 00 00 00 00       	mov    $0x0,%esi
    4194:	48 89 c7             	mov    %rax,%rdi
    4197:	e8 00 00 00 00       	callq  419c <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x26>
	       ? static_cast<void*>(&_M_storage)
	       : 0;
    419c:	84 c0                	test   %al,%al
    419e:	74 0a                	je     41aa <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x34>
    41a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    41a4:	48 83 c0 18          	add    $0x18,%rax
    41a8:	eb 05                	jmp    41af <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x39>
    41aa:	b8 00 00 00 00       	mov    $0x0,%eax
#else
        return 0;
#endif
      }
    41af:	c9                   	leaveq 
    41b0:	c3                   	retq   
    41b1:	90                   	nop

00000000000041b2 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv>:
      typedef __future_base::_Ptr<_Result<_Res>> _Ptr_type;
      _Ptr_type _M_result;
      _BoundFn _M_fn;

      virtual void
      _M_run_deferred()
    41b2:	55                   	push   %rbp
    41b3:	48 89 e5             	mov    %rsp,%rbp
    41b6:	53                   	push   %rbx
    41b7:	48 83 ec 68          	sub    $0x68,%rsp
    41bb:	e8 00 00 00 00       	callq  41c0 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xe>
    41c0:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
    41c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    41cb:	00 00 
    41cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    41d1:	31 c0                	xor    %eax,%eax
      {
        // safe to call multiple times so ignore failure
        _M_set_result(_S_task_setter(_M_result, _M_fn), true);
    41d3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    41d7:	48 8d 50 78          	lea    0x78(%rax),%rdx
    41db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    41df:	48 8d 48 70          	lea    0x70(%rax),%rcx
    41e3:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    41e7:	48 89 ce             	mov    %rcx,%rsi
    41ea:	48 89 c7             	mov    %rax,%rdi
    41ed:	e8 3c e7 ff ff       	callq  292e <_ZNSt13__future_base14_S_task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEERSt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaISA_EEN14TimeSeparation8PositionEEUlvE_vEEEENS_12_Task_setterIT_NSL_12element_type11result_typeEEERSL_OT0_>
    41f2:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    41f6:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    41fa:	48 89 d6             	mov    %rdx,%rsi
    41fd:	48 89 c7             	mov    %rax,%rdi
    4200:	e8 00 00 00 00       	callq  4205 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0x53>
    4205:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    4209:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    420d:	ba 01 00 00 00       	mov    $0x1,%edx
    4212:	48 89 ce             	mov    %rcx,%rsi
    4215:	48 89 c7             	mov    %rax,%rdi
    4218:	e8 00 00 00 00       	callq  421d <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0x6b>
    421d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    4221:	48 89 c7             	mov    %rax,%rdi
    4224:	e8 00 00 00 00       	callq  4229 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0x77>
    4229:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    422d:	48 89 c7             	mov    %rax,%rdi
    4230:	e8 00 00 00 00       	callq  4235 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0x83>
      }
    4235:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4239:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4240:	00 00 
    4242:	74 32                	je     4276 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xc4>
    4244:	eb 2b                	jmp    4271 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xbf>
    4246:	48 89 c3             	mov    %rax,%rbx

      virtual void
      _M_run_deferred()
      {
        // safe to call multiple times so ignore failure
        _M_set_result(_S_task_setter(_M_result, _M_fn), true);
    4249:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
    424d:	48 89 c7             	mov    %rax,%rdi
    4250:	e8 00 00 00 00       	callq  4255 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xa3>
    4255:	eb 03                	jmp    425a <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xa8>
    4257:	48 89 c3             	mov    %rax,%rbx
    425a:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
    425e:	48 89 c7             	mov    %rax,%rdi
    4261:	e8 00 00 00 00       	callq  4266 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xb4>
    4266:	48 89 d8             	mov    %rbx,%rax
    4269:	48 89 c7             	mov    %rax,%rdi
    426c:	e8 00 00 00 00       	callq  4271 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xbf>
      }
    4271:	e8 00 00 00 00       	callq  4276 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvE15_M_run_deferredEv+0xc4>
    4276:	48 83 c4 68          	add    $0x68,%rsp
    427a:	5b                   	pop    %rbx
    427b:	5d                   	pop    %rbp
    427c:	c3                   	retq   
    427d:	90                   	nop

000000000000427e <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>:
	_M_thread = std::thread{ [this] {
	  _M_set_result(_S_task_setter(_M_result, _M_fn));
        } };
      }

      ~_Async_state_impl() { _M_join(); }
    427e:	55                   	push   %rbp
    427f:	48 89 e5             	mov    %rsp,%rbp
    4282:	48 83 ec 10          	sub    $0x10,%rsp
    4286:	e8 00 00 00 00       	callq  428b <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0xd>
    428b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    428f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4293:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    429a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    429e:	48 89 c7             	mov    %rax,%rdi
    42a1:	e8 00 00 00 00       	callq  42a6 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x28>
    42a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42aa:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
    42ae:	48 89 c7             	mov    %rax,%rdi
    42b1:	e8 00 00 00 00       	callq  42b6 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x38>
    42b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42ba:	48 89 c7             	mov    %rax,%rdi
    42bd:	e8 00 00 00 00       	callq  42c2 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x44>
    42c2:	b8 00 00 00 00       	mov    $0x0,%eax
    42c7:	85 c0                	test   %eax,%eax
    42c9:	74 0c                	je     42d7 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x59>
    42cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42cf:	48 89 c7             	mov    %rax,%rdi
    42d2:	e8 00 00 00 00       	callq  42d7 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev+0x59>
    42d7:	c9                   	leaveq 
    42d8:	c3                   	retq   
    42d9:	90                   	nop

00000000000042da <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev>:
    42da:	55                   	push   %rbp
    42db:	48 89 e5             	mov    %rsp,%rbp
    42de:	48 83 ec 10          	sub    $0x10,%rsp
    42e2:	e8 00 00 00 00       	callq  42e7 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev+0xd>
    42e7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    42eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42ef:	48 89 c7             	mov    %rax,%rdi
    42f2:	e8 87 ff ff ff       	callq  427e <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>
    42f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    42fb:	48 89 c7             	mov    %rax,%rdi
    42fe:	e8 00 00 00 00       	callq  4303 <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED0Ev+0x29>
    4303:	c9                   	leaveq 
    4304:	c3                   	retq   

0000000000004305 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE7destroyISL_EEvRSM_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    4305:	55                   	push   %rbp
    4306:	48 89 e5             	mov    %rsp,%rbp
    4309:	48 83 ec 10          	sub    $0x10,%rsp
    430d:	e8 00 00 00 00       	callq  4312 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE7destroyISL_EEvRSM_PT_+0xd>
    4312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4316:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    431a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    431e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4322:	48 89 d6             	mov    %rdx,%rsi
    4325:	48 89 c7             	mov    %rax,%rdi
    4328:	e8 f7 00 00 00       	callq  4424 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE10_S_destroyISL_EENSt9enable_ifIXsrNSN_16__destroy_helperIT_EE5valueEvE4typeERSM_PSR_>
    432d:	c9                   	leaveq 
    432e:	c3                   	retq   

000000000000432f <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISQ_EEvRSR_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    432f:	55                   	push   %rbp
    4330:	48 89 e5             	mov    %rsp,%rbp
    4333:	48 83 ec 10          	sub    $0x10,%rsp
    4337:	e8 00 00 00 00       	callq  433c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISQ_EEvRSR_PT_+0xd>
    433c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4340:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    4344:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    434c:	48 89 d6             	mov    %rdx,%rsi
    434f:	48 89 c7             	mov    %rax,%rdi
    4352:	e8 f7 00 00 00       	callq  444e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISQ_EENSt9enable_ifIXsrNSS_16__destroy_helperIT_EE5valueEvE4typeERSR_PSW_>
    4357:	c9                   	leaveq 
    4358:	c3                   	retq   
    4359:	90                   	nop

000000000000435a <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
    435a:	55                   	push   %rbp
    435b:	48 89 e5             	mov    %rsp,%rbp
    435e:	48 83 ec 20          	sub    $0x20,%rsp
    4362:	e8 00 00 00 00       	callq  4367 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEEclEv+0xd>
    4367:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
    436b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    436f:	88 14 24             	mov    %dl,(%rsp)
    4372:	48 89 c7             	mov    %rax,%rdi
    4375:	e8 3c 01 00 00       	callq  44b6 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE>
      }
    437a:	c9                   	leaveq 
    437b:	c3                   	retq   

000000000000437c <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    437c:	55                   	push   %rbp
    437d:	48 89 e5             	mov    %rsp,%rbp
    4380:	48 83 ec 10          	sub    $0x10,%rsp
    4384:	e8 00 00 00 00       	callq  4389 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_+0xd>
    4389:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    438d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    4391:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4395:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4399:	48 89 d6             	mov    %rdx,%rsi
    439c:	48 89 c7             	mov    %rax,%rdi
    439f:	e8 41 01 00 00       	callq  44e5 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_>
    43a4:	c9                   	leaveq 
    43a5:	c3                   	retq   

00000000000043a6 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    43a6:	55                   	push   %rbp
    43a7:	48 89 e5             	mov    %rsp,%rbp
    43aa:	48 83 ec 10          	sub    $0x10,%rsp
    43ae:	e8 00 00 00 00       	callq  43b3 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_+0xd>
    43b3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    43b7:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    43bb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    43bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    43c3:	48 89 d6             	mov    %rdx,%rsi
    43c6:	48 89 c7             	mov    %rax,%rdi
    43c9:	e8 41 01 00 00       	callq  450f <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_>
    43ce:	c9                   	leaveq 
    43cf:	c3                   	retq   

00000000000043d0 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    43d0:	55                   	push   %rbp
    43d1:	48 89 e5             	mov    %rsp,%rbp
    43d4:	48 83 ec 10          	sub    $0x10,%rsp
    43d8:	e8 00 00 00 00       	callq  43dd <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE7destroyISE_EEvRSF_PT_+0xd>
    43dd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    43e1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    43e5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    43e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    43ed:	48 89 d6             	mov    %rdx,%rsi
    43f0:	48 89 c7             	mov    %rax,%rdi
    43f3:	e8 41 01 00 00       	callq  4539 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_>
    43f8:	c9                   	leaveq 
    43f9:	c3                   	retq   

00000000000043fa <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
    43fa:	55                   	push   %rbp
    43fb:	48 89 e5             	mov    %rsp,%rbp
    43fe:	48 83 ec 10          	sub    $0x10,%rsp
    4402:	e8 00 00 00 00       	callq  4407 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE7destroyISJ_EEvRSK_PT_+0xd>
    4407:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    440b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
    440f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4417:	48 89 d6             	mov    %rdx,%rsi
    441a:	48 89 c7             	mov    %rax,%rdi
    441d:	e8 41 01 00 00       	callq  4563 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_>
    4422:	c9                   	leaveq 
    4423:	c3                   	retq   

0000000000004424 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE10_S_destroyISL_EENSt9enable_ifIXsrNSN_16__destroy_helperIT_EE5valueEvE4typeERSM_PSR_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    4424:	55                   	push   %rbp
    4425:	48 89 e5             	mov    %rsp,%rbp
    4428:	48 83 ec 10          	sub    $0x10,%rsp
    442c:	e8 00 00 00 00       	callq  4431 <_ZNSt16allocator_traitsISaINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEEEE10_S_destroyISL_EENSt9enable_ifIXsrNSN_16__destroy_helperIT_EE5valueEvE4typeERSM_PSR_+0xd>
    4431:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4435:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    4439:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    443d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4441:	48 89 d6             	mov    %rdx,%rsi
    4444:	48 89 c7             	mov    %rax,%rdi
    4447:	e8 42 01 00 00       	callq  458e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE7destroyISM_EEvPT_>
    444c:	c9                   	leaveq 
    444d:	c3                   	retq   

000000000000444e <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISQ_EENSt9enable_ifIXsrNSS_16__destroy_helperIT_EE5valueEvE4typeERSR_PSW_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    444e:	55                   	push   %rbp
    444f:	48 89 e5             	mov    %rsp,%rbp
    4452:	48 83 ec 10          	sub    $0x10,%rsp
    4456:	e8 00 00 00 00       	callq  445b <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEESaISM_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISQ_EENSt9enable_ifIXsrNSS_16__destroy_helperIT_EE5valueEvE4typeERSR_PSW_+0xd>
    445b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    445f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    4463:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4467:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    446b:	48 89 d6             	mov    %rdx,%rsi
    446e:	48 89 c7             	mov    %rax,%rdi
    4471:	e8 42 01 00 00       	callq  45b8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE7destroyISQ_EEvPT_>
    4476:	c9                   	leaveq 
    4477:	c3                   	retq   

0000000000004478 <_ZSt12__get_helperILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISI_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    4478:	55                   	push   %rbp
    4479:	48 89 e5             	mov    %rsp,%rbp
    447c:	48 83 ec 08          	sub    $0x8,%rsp
    4480:	e8 00 00 00 00       	callq  4485 <_ZSt12__get_helperILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISI_DpT1_EE+0xd>
    4485:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
    4489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    448d:	48 89 c7             	mov    %rax,%rdi
    4490:	e8 ef e7 ff ff       	callq  2c84 <_ZNSt11_Tuple_implILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EE7_M_headERSH_>
    4495:	c9                   	leaveq 
    4496:	c3                   	retq   

0000000000004497 <_ZSt3getILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSM_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
    4497:	55                   	push   %rbp
    4498:	48 89 e5             	mov    %rsp,%rbp
    449b:	48 83 ec 08          	sub    $0x8,%rsp
    449f:	e8 00 00 00 00       	callq  44a4 <_ZSt3getILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSM_+0xd>
    44a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
    44a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44ac:	48 89 c7             	mov    %rax,%rdi
    44af:	e8 c4 ff ff ff       	callq  4478 <_ZSt12__get_helperILm0EZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_IEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISI_DpT1_EE>
    44b4:	c9                   	leaveq 
    44b5:	c3                   	retq   

00000000000044b6 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
    44b6:	55                   	push   %rbp
    44b7:	48 89 e5             	mov    %rsp,%rbp
    44ba:	48 83 ec 10          	sub    $0x10,%rsp
    44be:	e8 00 00 00 00       	callq  44c3 <_ZNSt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_EUlvE_vEE9_M_invokeIIEEEvSt12_Index_tupleIIXspT_EEE+0xd>
    44c3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
    44c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    44cb:	48 89 c7             	mov    %rax,%rdi
    44ce:	e8 c4 ff ff ff       	callq  4497 <_ZSt3getILm0EIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSM_>
    44d3:	48 89 c7             	mov    %rax,%rdi
    44d6:	e8 a7 e4 ff ff       	callq  2982 <_ZSt7forwardIZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSD_EUlvE_EOT_RNSt16remove_referenceISH_E4typeE>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
    44db:	48 89 c7             	mov    %rax,%rdi
    44de:	e8 a7 e1 ff ff       	callq  268a <_ZZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSC_ENKUlvE_clEv>
        }
    44e3:	c9                   	leaveq 
    44e4:	c3                   	retq   

00000000000044e5 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    44e5:	55                   	push   %rbp
    44e6:	48 89 e5             	mov    %rsp,%rbp
    44e9:	48 83 ec 10          	sub    $0x10,%rsp
    44ed:	e8 00 00 00 00       	callq  44f2 <_ZNSt16allocator_traitsISaINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_+0xd>
    44f2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    44f6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    44fa:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    44fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4502:	48 89 d6             	mov    %rdx,%rsi
    4505:	48 89 c7             	mov    %rax,%rdi
    4508:	e8 cf 00 00 00       	callq  45dc <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_>
    450d:	c9                   	leaveq 
    450e:	c3                   	retq   

000000000000450f <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    450f:	55                   	push   %rbp
    4510:	48 89 e5             	mov    %rsp,%rbp
    4513:	48 83 ec 10          	sub    $0x10,%rsp
    4517:	e8 00 00 00 00       	callq  451c <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_+0xd>
    451c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4520:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    4524:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    452c:	48 89 d6             	mov    %rdx,%rsi
    452f:	48 89 c7             	mov    %rax,%rdi
    4532:	e8 c9 00 00 00       	callq  4600 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_>
    4537:	c9                   	leaveq 
    4538:	c3                   	retq   

0000000000004539 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    4539:	55                   	push   %rbp
    453a:	48 89 e5             	mov    %rsp,%rbp
    453d:	48 83 ec 10          	sub    $0x10,%rsp
    4541:	e8 00 00 00 00       	callq  4546 <_ZNSt16allocator_traitsISaINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEEEE10_S_destroyISE_EENSt9enable_ifIXsrNSG_16__destroy_helperIT_EE5valueEvE4typeERSF_PSK_+0xd>
    4546:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    454a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    454e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    4552:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4556:	48 89 d6             	mov    %rdx,%rsi
    4559:	48 89 c7             	mov    %rax,%rdi
    455c:	e8 c3 00 00 00       	callq  4624 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_>
    4561:	c9                   	leaveq 
    4562:	c3                   	retq   

0000000000004563 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
    4563:	55                   	push   %rbp
    4564:	48 89 e5             	mov    %rsp,%rbp
    4567:	48 83 ec 10          	sub    $0x10,%rsp
    456b:	e8 00 00 00 00       	callq  4570 <_ZNSt16allocator_traitsISaISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISF_ELN9__gnu_cxx12_Lock_policyE2EEEE10_S_destroyISJ_EENSt9enable_ifIXsrNSL_16__destroy_helperIT_EE5valueEvE4typeERSK_PSP_+0xd>
    4570:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4574:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
    4578:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    457c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    4580:	48 89 d6             	mov    %rdx,%rsi
    4583:	48 89 c7             	mov    %rax,%rdi
    4586:	e8 bd 00 00 00       	callq  4648 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_>
    458b:	c9                   	leaveq 
    458c:	c3                   	retq   
    458d:	90                   	nop

000000000000458e <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE7destroyISM_EEvPT_>:

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
    458e:	55                   	push   %rbp
    458f:	48 89 e5             	mov    %rsp,%rbp
    4592:	48 83 ec 10          	sub    $0x10,%rsp
    4596:	e8 00 00 00 00       	callq  459b <_ZN9__gnu_cxx13new_allocatorINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS3_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS8_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSG_EUlvE_vEEEEE7destroyISM_EEvPT_+0xd>
    459b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    459f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    45a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45a7:	48 8b 00             	mov    (%rax),%rax
    45aa:	48 8b 00             	mov    (%rax),%rax
    45ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
    45b1:	48 89 d7             	mov    %rdx,%rdi
    45b4:	ff d0                	callq  *%rax
    45b6:	c9                   	leaveq 
    45b7:	c3                   	retq   

00000000000045b8 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE7destroyISQ_EEvPT_>:
    45b8:	55                   	push   %rbp
    45b9:	48 89 e5             	mov    %rsp,%rbp
    45bc:	48 83 ec 10          	sub    $0x10,%rsp
    45c0:	e8 00 00 00 00       	callq  45c5 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS4_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS9_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSH_EUlvE_vEEEESaISN_ELNS_12_Lock_policyE2EEE7destroyISQ_EEvPT_+0xd>
    45c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    45c9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    45cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45d1:	48 89 c7             	mov    %rax,%rdi
    45d4:	e8 dd f7 ff ff       	callq  3db6 <_ZNSt23_Sp_counted_ptr_inplaceINSt6thread5_ImplISt12_Bind_simpleIFZNSt13__future_base17_Async_state_implIS2_IFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEC1EOSF_EUlvE_vEEEESaISL_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    45d9:	c9                   	leaveq 
    45da:	c3                   	retq   
    45db:	90                   	nop

00000000000045dc <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_>:
    45dc:	55                   	push   %rbp
    45dd:	48 89 e5             	mov    %rsp,%rbp
    45e0:	48 83 ec 10          	sub    $0x10,%rsp
    45e4:	e8 00 00 00 00       	callq  45e9 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_+0xd>
    45e9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    45ed:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    45f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    45f5:	48 89 c7             	mov    %rax,%rdi
    45f8:	e8 fb f6 ff ff       	callq  3cf8 <_ZNSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>
    45fd:	c9                   	leaveq 
    45fe:	c3                   	retq   
    45ff:	90                   	nop

0000000000004600 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_>:
    4600:	55                   	push   %rbp
    4601:	48 89 e5             	mov    %rsp,%rbp
    4604:	48 83 ec 10          	sub    $0x10,%rsp
    4608:	e8 00 00 00 00       	callq  460d <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_+0xd>
    460d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4611:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4615:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4619:	48 89 c7             	mov    %rax,%rdi
    461c:	e8 01 f9 ff ff       	callq  3f22 <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    4621:	c9                   	leaveq 
    4622:	c3                   	retq   
    4623:	90                   	nop

0000000000004624 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_>:
    4624:	55                   	push   %rbp
    4625:	48 89 e5             	mov    %rsp,%rbp
    4628:	48 83 ec 10          	sub    $0x10,%rsp
    462c:	e8 00 00 00 00       	callq  4631 <_ZN9__gnu_cxx13new_allocatorINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS6_EEN14TimeSeparation8PositionEEUlvE_vEEvEEE7destroyISF_EEvPT_+0xd>
    4631:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4635:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    4639:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    463d:	48 89 c7             	mov    %rax,%rdi
    4640:	e8 39 fc ff ff       	callq  427e <_ZNSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS4_EEN14TimeSeparation8PositionEEUlvE_vEEvED1Ev>
    4645:	c9                   	leaveq 
    4646:	c3                   	retq   
    4647:	90                   	nop

0000000000004648 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_>:
    4648:	55                   	push   %rbp
    4649:	48 89 e5             	mov    %rsp,%rbp
    464c:	48 83 ec 10          	sub    $0x10,%rsp
    4650:	e8 00 00 00 00       	callq  4655 <_ZN9__gnu_cxx13new_allocatorISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS7_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISG_ELNS_12_Lock_policyE2EEE7destroyISJ_EEvPT_+0xd>
    4655:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    4659:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    465d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    4661:	48 89 c7             	mov    %rax,%rdi
    4664:	e8 01 fa ff ff       	callq  406a <_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implISt12_Bind_simpleIFZN5Paths18runMakePathsBufferERSt6vectorI4PathSaIS5_EEN14TimeSeparation8PositionEEUlvE_vEEvEESaISE_ELN9__gnu_cxx12_Lock_policyE2EED1Ev>
    4669:	c9                   	leaveq 
    466a:	c3                   	retq   

000000000000466b <_GLOBAL__sub_I__ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE>:
    466b:	55                   	push   %rbp
    466c:	48 89 e5             	mov    %rsp,%rbp
    466f:	e8 00 00 00 00       	callq  4674 <_GLOBAL__sub_I__ZN5Paths15makePathsBufferERSt6vectorI4PathSaIS1_EEN14TimeSeparation8PositionE+0x9>
    4674:	be ff ff 00 00       	mov    $0xffff,%esi
    4679:	bf 01 00 00 00       	mov    $0x1,%edi
    467e:	e8 f0 f6 ff ff       	callq  3d73 <_Z41__static_initialization_and_destruction_0ii>
    4683:	5d                   	pop    %rbp
    4684:	c3                   	retq   

0000000000004685 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0>:
		{
			omp_set_num_threads(thread_count);
		}
		std::cout << "pragma omp parallel for start." << std::endl;
		//これ以降が並列化
		#pragma omp parallel for
    4685:	55                   	push   %rbp
    4686:	48 89 e5             	mov    %rsp,%rbp
    4689:	41 54                	push   %r12
    468b:	53                   	push   %rbx
    468c:	48 83 ec 30          	sub    $0x30,%rsp
    4690:	e8 00 00 00 00       	callq  4695 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x10>
    4695:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    4699:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    469d:	48 8b 40 18          	mov    0x18(%rax),%rax
    46a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    46a5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    46a9:	48 8b 00             	mov    (%rax),%rax
    46ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    46b0:	e8 00 00 00 00       	callq  46b5 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x30>
    46b5:	89 c3                	mov    %eax,%ebx
    46b7:	e8 00 00 00 00       	callq  46bc <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x37>
    46bc:	89 c6                	mov    %eax,%esi
    46be:	b8 10 00 00 00       	mov    $0x10,%eax
    46c3:	99                   	cltd   
    46c4:	f7 fb                	idiv   %ebx
    46c6:	89 c1                	mov    %eax,%ecx
    46c8:	b8 10 00 00 00       	mov    $0x10,%eax
    46cd:	99                   	cltd   
    46ce:	f7 fb                	idiv   %ebx
    46d0:	89 d0                	mov    %edx,%eax
    46d2:	39 c6                	cmp    %eax,%esi
    46d4:	0f 8c e5 00 00 00    	jl     47bf <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x13a>
    46da:	0f af f1             	imul   %ecx,%esi
    46dd:	89 f2                	mov    %esi,%edx
    46df:	01 d0                	add    %edx,%eax
    46e1:	8d 1c 08             	lea    (%rax,%rcx,1),%ebx
    46e4:	39 d8                	cmp    %ebx,%eax
    46e6:	0f 8d e0 00 00 00    	jge    47cc <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x147>
    46ec:	89 45 d4             	mov    %eax,-0x2c(%rbp)
		for(int i = 0; i < N; i++)
		{
			#pragma omp critical
    46ef:	e8 00 00 00 00       	callq  46f4 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x6f>
			{
				std::cout << "id_last_char[i] = " << id_last_char[i] << std::endl;
    46f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    46f8:	48 8b 50 28          	mov    0x28(%rax),%rdx
    46fc:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    46ff:	48 98                	cltq   
    4701:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
    4705:	44 0f be e0          	movsbl %al,%r12d
    4709:	be 00 00 00 00       	mov    $0x0,%esi
    470e:	bf 00 00 00 00       	mov    $0x0,%edi
    4713:	e8 00 00 00 00       	callq  4718 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x93>
    4718:	44 89 e6             	mov    %r12d,%esi
    471b:	48 89 c7             	mov    %rax,%rdi
    471e:	e8 00 00 00 00       	callq  4723 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x9e>
    4723:	be 00 00 00 00       	mov    $0x0,%esi
    4728:	48 89 c7             	mov    %rax,%rdi
    472b:	e8 00 00 00 00       	callq  4730 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0xab>
		std::cout << "pragma omp parallel for start." << std::endl;
		//これ以降が並列化
		#pragma omp parallel for
		for(int i = 0; i < N; i++)
		{
			#pragma omp critical
    4730:	e8 00 00 00 00       	callq  4735 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0xb0>
			{
				std::cout << "id_last_char[i] = " << id_last_char[i] << std::endl;
			}
			//日付：開始日から終了日までループ
			for(time_t d = start_day; d < end; d = TimeManager::nextDayTime(d))
    4735:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4739:	48 8b 40 20          	mov    0x20(%rax),%rax
    473d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4741:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4745:	48 8b 40 10          	mov    0x10(%rax),%rax
    4749:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
    474d:	7c 0b                	jl     475a <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0xd5>
    474f:	83 45 d4 01          	addl   $0x1,-0x2c(%rbp)
    4753:	39 5d d4             	cmp    %ebx,-0x2c(%rbp)
    4756:	7c 97                	jl     46ef <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x6a>
    4758:	eb 72                	jmp    47cc <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x147>
			{
				getTrackDataFromDBToMapWithDay(p[i], start, end, d,id_last_char[i]);
    475a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    475e:	48 8b 50 28          	mov    0x28(%rax),%rdx
    4762:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    4765:	48 98                	cltq   
    4767:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
    476b:	44 0f be e0          	movsbl %al,%r12d
    476f:	8b 45 d4             	mov    -0x2c(%rbp),%eax
    4772:	48 63 d0             	movslq %eax,%rdx
    4775:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    4779:	48 89 d6             	mov    %rdx,%rsi
    477c:	48 89 c7             	mov    %rax,%rdi
    477f:	e8 00 00 00 00       	callq  4784 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0xff>
    4784:	48 89 c6             	mov    %rax,%rsi
    4787:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    478b:	48 8b 48 10          	mov    0x10(%rax),%rcx
    478f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    4793:	48 8b 50 08          	mov    0x8(%rax),%rdx
    4797:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    479b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    479f:	45 89 e1             	mov    %r12d,%r9d
    47a2:	49 89 f8             	mov    %rdi,%r8
    47a5:	48 89 c7             	mov    %rax,%rdi
    47a8:	e8 00 00 00 00       	callq  47ad <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x128>
			#pragma omp critical
			{
				std::cout << "id_last_char[i] = " << id_last_char[i] << std::endl;
			}
			//日付：開始日から終了日までループ
			for(time_t d = start_day; d < end; d = TimeManager::nextDayTime(d))
    47ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    47b1:	48 89 c7             	mov    %rax,%rdi
    47b4:	e8 00 00 00 00       	callq  47b9 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x134>
    47b9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    47bd:	eb 82                	jmp    4741 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0xbc>
    47bf:	b8 00 00 00 00       	mov    $0x0,%eax
    47c4:	83 c1 01             	add    $0x1,%ecx
    47c7:	e9 0e ff ff ff       	jmpq   46da <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli._omp_fn.0+0x55>
		{
			omp_set_num_threads(thread_count);
		}
		std::cout << "pragma omp parallel for start." << std::endl;
		//これ以降が並列化
		#pragma omp parallel for
    47cc:	48 83 c4 30          	add    $0x30,%rsp
    47d0:	5b                   	pop    %rbx
    47d1:	41 5c                	pop    %r12
    47d3:	5d                   	pop    %rbp
    47d4:	c3                   	retq   

セクション .text._ZNSt15__exception_ptr13exception_ptrC2EOS0_ の逆アセンブル:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptrC1EOS0_>:
#if __cplusplus >= 201103L
      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt15__exception_ptr13exception_ptrC1EOS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_exception_object(__o._M_exception_object)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
      { __o._M_exception_object = 0; }
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

セクション .text._ZNSt15__exception_ptr13exception_ptraSEOS0_ の逆アセンブル:

0000000000000000 <_ZNSt15__exception_ptr13exception_ptraSEOS0_>:
      exception_ptr& 
      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;

#if __cplusplus >= 201103L
      exception_ptr& 
      operator=(exception_ptr&& __o) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt15__exception_ptr13exception_ptraSEOS0_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
  15:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt15__exception_ptr13exception_ptraSEOS0_+0x28>
  28:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  2c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  30:	48 89 d6             	mov    %rdx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt15__exception_ptr13exception_ptraSEOS0_+0x3b>
  3b:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	callq  47 <_ZNSt15__exception_ptr13exception_ptraSEOS0_+0x47>
        return *this;
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  4b:	c9                   	leaveq 
  4c:	c3                   	retq   

セクション .text._ZnwmPv の逆アセンブル:

0000000000000000 <_ZnwmPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZnwmPv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZdlPvS_ の逆アセンブル:

0000000000000000 <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZdlPvS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11char_traitsIcE7compareEPKcS2_m の逆アセンブル:

0000000000000000 <_ZNSt11char_traitsIcE7compareEPKcS2_m>:
      static _GLIBCXX_CONSTEXPR bool
      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11char_traitsIcE7compareEPKcS2_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __builtin_memcmp(__s1, __s2, __n); }
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt11char_traitsIcE7compareEPKcS2_m+0x30>
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZStorSt13_Ios_OpenmodeS_ の逆アセンブル:

0000000000000000 <_ZStorSt13_Ios_OpenmodeS_>:
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _GLIBCXX_CONSTEXPR _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStorSt13_Ios_OpenmodeS_+0xd>
   d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  10:	89 75 f8             	mov    %esi,-0x8(%rbp)
  13:	8b 55 fc             	mov    -0x4(%rbp),%edx
  16:	8b 45 f8             	mov    -0x8(%rbp),%eax
  19:	09 d0                	or     %edx,%eax
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNKSt9type_infoeqERKS_ の逆アセンブル:

0000000000000000 <_ZNKSt9type_infoeqERKS_>:
    bool before(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    { return (__name[0] == '*' && __arg.__name[0] == '*')
	? __name < __arg.__name
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt9type_infoeqERKS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      return ((__name == __arg.__name)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  21:	48 8b 40 08          	mov    0x8(%rax),%rax
	      || (__name[0] != '*' &&
  25:	48 39 c2             	cmp    %rax,%rdx
  28:	74 2e                	je     58 <_ZNKSt9type_infoeqERKS_+0x58>
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 40 08          	mov    0x8(%rax),%rax
  32:	0f b6 00             	movzbl (%rax),%eax
  35:	3c 2a                	cmp    $0x2a,%al
  37:	74 26                	je     5f <_ZNKSt9type_infoeqERKS_+0x5f>
		  __builtin_strcmp (__name, __arg.__name) == 0));
  39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	48 8b 40 08          	mov    0x8(%rax),%rax
  49:	48 89 d6             	mov    %rdx,%rsi
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZNKSt9type_infoeqERKS_+0x54>
	: __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const _GLIBCXX_NOEXCEPT
    {
      return ((__name == __arg.__name)
	      || (__name[0] != '*' &&
  54:	85 c0                	test   %eax,%eax
  56:	75 07                	jne    5f <_ZNKSt9type_infoeqERKS_+0x5f>
  58:	b8 01 00 00 00       	mov    $0x1,%eax
  5d:	eb 05                	jmp    64 <_ZNKSt9type_infoeqERKS_+0x64>
  5f:	b8 00 00 00 00       	mov    $0x0,%eax
		  __builtin_strcmp (__name, __arg.__name) == 0));
    }
  64:	c9                   	leaveq 
  65:	c3                   	retq   

セクション .text._ZNSt9_Any_data9_M_accessEv の逆アセンブル:

0000000000000000 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt9_Any_data9_M_accessEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNKSt9_Any_data9_M_accessEv の逆アセンブル:

0000000000000000 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt9_Any_data9_M_accessEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt14_Function_baseC2Ev の逆アセンブル:

0000000000000000 <_ZNSt14_Function_baseC1Ev>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(0) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14_Function_baseC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  1c:	00 
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt14_Function_baseD2Ev の逆アセンブル:

0000000000000000 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14_Function_baseD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (_M_manager)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 85 c0             	test   %rax,%rax
  1c:	74 1a                	je     38 <_ZNSt14_Function_baseD1Ev+0x38>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
  1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  22:	48 8b 40 10          	mov    0x10(%rax),%rax
  26:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  2a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  2e:	ba 03 00 00 00       	mov    $0x3,%edx
  33:	48 89 cf             	mov    %rcx,%rdi
  36:	ff d0                	callq  *%rax
    }
  38:	c9                   	leaveq 
  39:	c3                   	retq   

セクション .text._ZNKSt14_Function_base8_M_emptyEv の逆アセンブル:

0000000000000000 <_ZNKSt14_Function_base8_M_emptyEv>:


    bool _M_empty() const { return !_M_manager; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt14_Function_base8_M_emptyEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 85 c0             	test   %rax,%rax
  1c:	0f 94 c0             	sete   %al
  1f:	c9                   	leaveq 
  20:	c3                   	retq   

セクション .text._ZNSt5mutex4lockEv の逆アセンブル:

0000000000000000 <_ZNSt5mutex4lockEv>:

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt5mutex4lockEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    {
      int __e = __gthread_mutex_lock(&_M_mutex);
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt5mutex4lockEv+0x1d>
  1d:	89 45 fc             	mov    %eax,-0x4(%rbp)

      // EINVAL, EAGAIN, EBUSY, EINVAL, EDEADLK(may)
      if (__e)
  20:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  24:	74 0a                	je     30 <_ZNSt5mutex4lockEv+0x30>
	__throw_system_error(__e);
  26:	8b 45 fc             	mov    -0x4(%rbp),%eax
  29:	89 c7                	mov    %eax,%edi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt5mutex4lockEv+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZNSt5mutex6unlockEv の逆アセンブル:

0000000000000000 <_ZNSt5mutex6unlockEv>:
      // XXX EINVAL, EAGAIN, EBUSY
      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt5mutex6unlockEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      // XXX EINVAL, EAGAIN, EPERM
      __gthread_mutex_unlock(&_M_mutex);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt5mutex6unlockEv+0x1d>
    }
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6thread2idC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6thread2idC1Ev>:
    class id
    {
      native_handle_type	_M_thread;

    public:
      id() noexcept : _M_thread() { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6thread2idC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

セクション .text._ZSteqNSt6thread2idES0_ の逆アセンブル:

0000000000000000 <_ZSteqNSt6thread2idES0_>:
    private:
      friend class thread;
      friend class hash<thread::id>;

      friend bool
      operator==(thread::id __x, thread::id __y) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSteqNSt6thread2idES0_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      { return __gthread_equal(__x._M_thread, __y._M_thread); }
  15:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSteqNSt6thread2idES0_+0x28>
  28:	85 c0                	test   %eax,%eax
  2a:	0f 95 c0             	setne  %al
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZNSt6threadD2Ev の逆アセンブル:

0000000000000000 <_ZNSt6threadD1Ev>:
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }

    ~thread()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6threadD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      if (joinable())
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6threadD1Ev+0x1d>
  1d:	84 c0                	test   %al,%al
  1f:	74 05                	je     26 <_ZNSt6threadD1Ev+0x26>
	std::terminate();
  21:	e8 00 00 00 00       	callq  26 <_ZNSt6threadD1Ev+0x26>
    }
  26:	c9                   	leaveq 
  27:	c3                   	retq   

セクション .text._ZNSt6threadaSEOS_ の逆アセンブル:

0000000000000000 <_ZNSt6threadaSEOS_>:

    thread& operator=(const thread&) = delete;

    thread& operator=(thread&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6threadaSEOS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      if (joinable())
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6threadaSEOS_+0x21>
  21:	84 c0                	test   %al,%al
  23:	74 05                	je     2a <_ZNSt6threadaSEOS_+0x2a>
	std::terminate();
  25:	e8 00 00 00 00       	callq  2a <_ZNSt6threadaSEOS_+0x2a>
      swap(__t);
  2a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  32:	48 89 d6             	mov    %rdx,%rsi
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNSt6threadaSEOS_+0x3d>
      return *this;
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  41:	c9                   	leaveq 
  42:	c3                   	retq   

セクション .text._ZNSt6thread4swapERS_ の逆アセンブル:

0000000000000000 <_ZNSt6thread4swapERS_>:

    void
    swap(thread& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6thread4swapERS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { std::swap(_M_id, __t._M_id); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt6thread4swapERS_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNKSt6thread8joinableEv の逆アセンブル:

0000000000000000 <_ZNKSt6thread8joinableEv>:

    bool
    joinable() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6thread8joinableEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return !(_M_id == id()); }
  11:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt6thread8joinableEv+0x1d>
  1d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 89 d6             	mov    %rdx,%rsi
  28:	48 8b 38             	mov    (%rax),%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNKSt6thread8joinableEv+0x30>
  30:	83 f0 01             	xor    $0x1,%eax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt12__shared_ptrINSt6thread10_Impl_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt10shared_ptrINSt6thread10_Impl_baseEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev>:
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10shared_ptrINSt6thread10_Impl_baseEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6thread10_Impl_baseD2Ev の逆アセンブル:

0000000000000000 <_ZNSt6thread10_Impl_baseD1Ev>:
	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };

    // Simple base type that the templatized, derived class containing
    // an arbitrary functor can be converted to and called.
    struct _Impl_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6thread10_Impl_baseD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 08          	add    $0x8,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt6thread10_Impl_baseD1Ev+0x2c>
  2c:	b8 00 00 00 00       	mov    $0x0,%eax
  31:	85 c0                	test   %eax,%eax
  33:	74 0c                	je     41 <_ZNSt6thread10_Impl_baseD1Ev+0x41>
  35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt6thread10_Impl_baseD1Ev+0x41>
  41:	c9                   	leaveq 
  42:	c3                   	retq   

セクション .text._ZNSt6thread10_Impl_baseD0Ev の逆アセンブル:

0000000000000000 <_ZNSt6thread10_Impl_baseD0Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6thread10_Impl_baseD0Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6thread10_Impl_baseD0Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt6thread10_Impl_baseD0Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt11atomic_flag12test_and_setESt12memory_order の逆アセンブル:

0000000000000000 <_ZNSt11atomic_flag12test_and_setESt12memory_order>:
    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11atomic_flag12test_and_setESt12memory_order+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
    {
      return __atomic_test_and_set (&_M_i, __m);
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	ba 01 00 00 00       	mov    $0x1,%edx
  1d:	86 10                	xchg   %dl,(%rax)
  1f:	89 d0                	mov    %edx,%eax
    }
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZStanSt6launchS_ の逆アセンブル:

0000000000000000 <_ZStanSt6launchS_>:
    async = 1,
    deferred = 2
  };

  constexpr launch operator&(launch __x, launch __y)
  {
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStanSt6launchS_+0xd>
   d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  10:	89 75 f8             	mov    %esi,-0x8(%rbp)
    return static_cast<launch>(
	static_cast<int>(__x) & static_cast<int>(__y));
  13:	8b 45 f8             	mov    -0x8(%rbp),%eax
  16:	8b 55 fc             	mov    -0x4(%rbp),%edx
  19:	21 d0                	and    %edx,%eax
  }
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZStorSt6launchS_ の逆アセンブル:

0000000000000000 <_ZStorSt6launchS_>:

  constexpr launch operator|(launch __x, launch __y)
  {
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStorSt6launchS_+0xd>
   d:	89 7d fc             	mov    %edi,-0x4(%rbp)
  10:	89 75 f8             	mov    %esi,-0x8(%rbp)
    return static_cast<launch>(
	static_cast<int>(__x) | static_cast<int>(__y));
  13:	8b 45 f8             	mov    -0x8(%rbp),%eax
  16:	8b 55 fc             	mov    -0x4(%rbp),%edx
  19:	09 d0                	or     %edx,%eax
  }
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNKSt13__future_base12_Result_base8_DeleterclEPS0_ の逆アセンブル:

0000000000000000 <_ZNKSt13__future_base12_Result_base8_DeleterclEPS0_>:
      // _M_destroy() allows derived classes to control deallocation
      virtual void _M_destroy() = 0;

      struct _Deleter
      {
	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13__future_base12_Result_base8_DeleterclEPS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  23:	48 89 d7             	mov    %rdx,%rdi
  26:	ff d0                	callq  *%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm2EIEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm2EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm2EIEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC2Ev>:

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC2Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Head() { }
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2Ev>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC2Ev>:
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC2Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_head_impl() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2Ev>:
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited(), _Base() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1Ev の逆アセンブル:

0000000000000000 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1Ev>:
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Inherited() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1Ev の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1Ev>:
      typedef typename _Pointer::type   pointer;
      typedef _Tp                       element_type;
      typedef _Dp                       deleter_type;

      // Constructors.
      constexpr unique_ptr() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_t()
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1Ev+0x1d>
      { static_assert(!is_pointer<deleter_type>::value,
		     "constructed with null function pointer deleter"); }
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_baseC2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_baseC1Ev>:
      condition_variable  	_M_cond;
      atomic_flag         	_M_retrieved;
      once_flag			_M_once;

    public:
      _State_base() noexcept : _M_result(), _M_retrieved(ATOMIC_FLAG_INIT) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base11_State_baseC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 08          	add    $0x8,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt13__future_base11_State_baseC1Ev+0x2c>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  37:	00 
  38:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  3f:	00 
  40:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  47:	00 
  48:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  4f:	00 
  50:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  57:	00 
  58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5c:	48 83 c0 38          	add    $0x38,%rax
  60:	48 89 c7             	mov    %rax,%rdi
  63:	e8 00 00 00 00       	callq  68 <_ZNSt13__future_base11_State_baseC1Ev+0x68>
  68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6c:	c6 40 68 00          	movb   $0x0,0x68(%rax)
  70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  74:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  7b:	c9                   	leaveq 
  7c:	c3                   	retq   

セクション .text._ZZNSt13__future_base11_State_base4waitEvENKUlvE_clEv の逆アセンブル:

0000000000000000 <_ZZNSt13__future_base11_State_base4waitEvENKUlvE_clEv>:
      _Result_base&
      wait()
      {
	_M_run_deferred();
	unique_lock<mutex> __lock(_M_mutex);
	_M_cond.wait(__lock, [&] { return _M_ready(); });
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZZNSt13__future_base11_State_base4waitEvENKUlvE_clEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZZNSt13__future_base11_State_base4waitEvENKUlvE_clEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_base4waitEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_base4waitEv>:
      _State_base(const _State_base&) = delete;
      _State_base& operator=(const _State_base&) = delete;
      virtual ~_State_base();

      _Result_base&
      wait()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt13__future_base11_State_base4waitEv+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	_M_run_deferred();
  12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  16:	48 8b 00             	mov    (%rax),%rax
  19:	48 83 c0 10          	add    $0x10,%rax
  1d:	48 8b 00             	mov    (%rax),%rax
  20:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  24:	48 89 d7             	mov    %rdx,%rdi
  27:	ff d0                	callq  *%rax
	unique_lock<mutex> __lock(_M_mutex);
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  31:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  35:	48 89 d6             	mov    %rdx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZNSt13__future_base11_State_base4waitEv+0x40>
	_M_cond.wait(__lock, [&] { return _M_ready(); });
  40:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 8d 48 38          	lea    0x38(%rax),%rcx
  4c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
  53:	48 89 cf             	mov    %rcx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt13__future_base11_State_base4waitEv+0x5b>
	return *_M_result;
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 83 c0 08          	add    $0x8,%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZNSt13__future_base11_State_base4waitEv+0x6b>
  6b:	48 89 c3             	mov    %rax,%rbx
  6e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	callq  7a <_ZNSt13__future_base11_State_base4waitEv+0x7a>
  7a:	48 89 d8             	mov    %rbx,%rax
  7d:	eb 1a                	jmp    99 <_ZNSt13__future_base11_State_base4waitEv+0x99>
  7f:	48 89 c3             	mov    %rax,%rbx
  82:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  86:	48 89 c7             	mov    %rax,%rdi
  89:	e8 00 00 00 00       	callq  8e <_ZNSt13__future_base11_State_base4waitEv+0x8e>
  8e:	48 89 d8             	mov    %rbx,%rax
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZNSt13__future_base11_State_base4waitEv+0x99>
      }
  99:	48 83 c4 28          	add    $0x28,%rsp
  9d:	5b                   	pop    %rbx
  9e:	5d                   	pop    %rbp
  9f:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb>:
	    return future_status::ready;
	  return future_status::timeout;
	}

      void
      _M_set_result(function<_Ptr_type()> __res, bool __ignore_failure = false)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	48 83 ec 60          	sub    $0x60,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0x11>
  11:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  15:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  19:	89 d0                	mov    %edx,%eax
  1b:	88 45 9c             	mov    %al,-0x64(%rbp)
      {
        bool __set = false;
  1e:	c6 45 bf 00          	movb   $0x0,-0x41(%rbp)
        // all calls to this function are serialized,
        // side-effects of invoking __res only happen once
        call_once(_M_once, &_State_base::_M_do_set, this, ref(__res),
            ref(__set));
  22:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  26:	48 8d 55 bf          	lea    -0x41(%rbp),%rdx
  2a:	48 89 d6             	mov    %rdx,%rsi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0x35>
  35:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  39:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  3d:	48 89 d6             	mov    %rdx,%rsi
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0x48>
  48:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  50:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  56:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  5c:	4c 89 65 e0          	mov    %r12,-0x20(%rbp)
  60:	4c 89 6d e8          	mov    %r13,-0x18(%rbp)
  64:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  68:	48 8d 78 6c          	lea    0x6c(%rax),%rdi
  6c:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  70:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  74:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  7c:	49 89 f0             	mov    %rsi,%r8
  7f:	48 89 c6             	mov    %rax,%rsi
  82:	e8 00 00 00 00       	callq  87 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0x87>
	if (__set)
  87:	0f b6 45 bf          	movzbl -0x41(%rbp),%eax
  8b:	84 c0                	test   %al,%al
  8d:	74 12                	je     a1 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0xa1>
	  _M_cond.notify_all();
  8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  93:	48 83 c0 38          	add    $0x38,%rax
  97:	48 89 c7             	mov    %rax,%rdi
  9a:	e8 00 00 00 00       	callq  9f <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0x9f>
  9f:	eb 15                	jmp    b6 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0xb6>
	else if (!__ignore_failure)
  a1:	0f b6 45 9c          	movzbl -0x64(%rbp),%eax
  a5:	83 f0 01             	xor    $0x1,%eax
  a8:	84 c0                	test   %al,%al
  aa:	74 0a                	je     b6 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0xb6>
          __throw_future_error(int(future_errc::promise_already_satisfied));
  ac:	bf 02 00 00 00       	mov    $0x2,%edi
  b1:	e8 00 00 00 00       	callq  b6 <_ZNSt13__future_base11_State_base13_M_set_resultESt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEb+0xb6>
      }
  b6:	48 83 c4 60          	add    $0x60,%rsp
  ba:	41 5c                	pop    %r12
  bc:	41 5d                	pop    %r13
  be:	5d                   	pop    %rbp
  bf:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv>:
	  }
      }

      // Called when this object is passed to a future.
      void
      _M_set_retrieved_flag()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (_M_retrieved.test_and_set())
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 68          	add    $0x68,%rax
  19:	be 05 00 00 00       	mov    $0x5,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv+0x26>
  26:	84 c0                	test   %al,%al
  28:	74 0a                	je     34 <_ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv+0x34>
	  __throw_future_error(int(future_errc::future_already_retrieved));
  2a:	bf 01 00 00 00       	mov    $0x1,%edi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt13__future_base11_State_base21_M_set_retrieved_flagEv+0x34>
      }
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb>:
            __throw_future_error((int)future_errc::no_state);
        }

    private:
      void
      _M_do_set(function<_Ptr_type()>& __f, bool& __set)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  16:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
      {
        _Ptr_type __res = __f();
  1a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  1e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  22:	48 89 d6             	mov    %rdx,%rsi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x2d>
        {
          lock_guard<mutex> __lock(_M_mutex);
  2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  31:	48 8d 50 10          	lea    0x10(%rax),%rdx
  35:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  39:	48 89 d6             	mov    %rdx,%rsi
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x44>
          _M_result.swap(__res);
  44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  48:	48 8d 50 08          	lea    0x8(%rax),%rdx
  4c:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
  53:	48 89 d7             	mov    %rdx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x5b>
  5b:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x67>
        }
        __set = true;
  67:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  6b:	c6 00 01             	movb   $0x1,(%rax)
  6e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	callq  7a <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x7a>
  7a:	eb 1a                	jmp    96 <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x96>
  7c:	48 89 c3             	mov    %rax,%rbx
  7f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	callq  8b <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x8b>
  8b:	48 89 d8             	mov    %rbx,%rax
  8e:	48 89 c7             	mov    %rax,%rdi
  91:	e8 00 00 00 00       	callq  96 <_ZNSt13__future_base11_State_base9_M_do_setERSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEERb+0x96>
      }
  96:	48 83 c4 48          	add    $0x48,%rsp
  9a:	5b                   	pop    %rbx
  9b:	5d                   	pop    %rbp
  9c:	c3                   	retq   

セクション .text._ZNKSt13__future_base11_State_base8_M_readyEv の逆アセンブル:

0000000000000000 <_ZNKSt13__future_base11_State_base8_M_readyEv>:

      bool _M_ready() const noexcept { return static_cast<bool>(_M_result); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13__future_base11_State_base8_M_readyEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNKSt13__future_base11_State_base8_M_readyEv+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt13__future_base7_ResultIvE10_M_destroyEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base7_ResultIvE10_M_destroyEv>:
    struct __future_base::_Result<void> : __future_base::_Result_base
    {
      typedef void result_type;

    private:
      void _M_destroy() { delete this; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base7_ResultIvE10_M_destroyEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  16:	74 17                	je     2f <_ZNSt13__future_base7_ResultIvE10_M_destroyEv+0x2f>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 83 c0 10          	add    $0x10,%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	48 89 d7             	mov    %rdx,%rdi
  2d:	ff d0                	callq  *%rax
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EED1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt10shared_ptrINSt13__future_base11_State_baseEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10shared_ptrINSt13__future_base11_State_baseEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10shared_ptrINSt13__future_base11_State_baseEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt14__basic_futureIvED2Ev の逆アセンブル:

0000000000000000 <_ZNSt14__basic_futureIvED1Ev>:
    };


  /// Common implementation for future and shared_future.
  template<typename _Res>
    class __basic_future : public __future_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__basic_futureIvED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt14__basic_futureIvED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6futureIvEC2ERKSt10shared_ptrINSt13__future_base11_State_baseEE の逆アセンブル:

0000000000000000 <_ZNSt6futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE>:

      typedef __basic_future<void> _Base_type;
      typedef typename _Base_type::__state_type __state_type;

      explicit
      future(const __state_type& __state) : _Base_type(__state) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt6futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt13__future_baseC2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_baseC1Ev>:

#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1) \
  && (ATOMIC_INT_LOCK_FREE > 1)

  /// Base class and enclosing scope.
  struct __future_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_baseC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev の逆アセンブル:

0000000000000000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      { }
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

セクション .text._ZSt4moveIRSt6futureIvEEONSt16remove_referenceIT_E4typeEOS4_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt6futureIvEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt6futureIvEEONSt16remove_referenceIT_E4typeEOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6futureIvEC2EOS0_ の逆アセンブル:

0000000000000000 <_ZNSt6futureIvEC1EOS0_>:

    public:
      constexpr future() noexcept : _Base_type() { }

      /// Move constructor
      future(future&& __uf) noexcept : _Base_type(std::move(__uf)) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6futureIvEC1EOS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6futureIvEC1EOS0_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt6futureIvEC1EOS0_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt6futureIvED2Ev の逆アセンブル:

0000000000000000 <_ZNSt6futureIvED1Ev>:
      shared_future<_Res&> share();
    };

  /// Explicit specialization for future<void>
  template<>
    class future<void> : public __basic_future<void>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6futureIvED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6futureIvED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6futureIvEaSEOS0_ の逆アセンブル:

0000000000000000 <_ZNSt6futureIvEaSEOS0_>:

      // Disable copying
      future(const future&) = delete;
      future& operator=(const future&) = delete;

      future& operator=(future&& __fut) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6futureIvEaSEOS0_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
        future(std::move(__fut))._M_swap(*this);
  16:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt6futureIvEaSEOS0_+0x26>
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZNSt6futureIvEaSEOS0_+0x38>
  38:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  3c:	48 89 de             	mov    %rbx,%rsi
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	callq  47 <_ZNSt6futureIvEaSEOS0_+0x47>
  47:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZNSt6futureIvEaSEOS0_+0x53>
        return *this;
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
  57:	48 83 c4 28          	add    $0x28,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	retq   

セクション .text._ZNSt13__future_base7_ResultIvEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base7_ResultIvEC1Ev>:
      void _M_destroy() { delete this; }
    };

  /// Explicit specialization for void.
  template<>
    struct __future_base::_Result<void> : __future_base::_Result_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base7_ResultIvEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base7_ResultIvEC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt4moveIRSt10shared_ptrINSt13__future_base11_State_baseEEEONSt16remove_referenceIT_E4typeEOS6_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt10shared_ptrINSt13__future_base11_State_baseEEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt10shared_ptrINSt13__future_base11_State_baseEEEONSt16remove_referenceIT_E4typeEOS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4moveIRSt10unique_ptrINSt13__future_base7_ResultIvEENS1_12_Result_base8_DeleterEEEONSt16remove_referenceIT_E4typeEOS9_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt10unique_ptrINSt13__future_base7_ResultIvEENS1_12_Result_base8_DeleterEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt10unique_ptrINSt13__future_base7_ResultIvEENS1_12_Result_base8_DeleterEEEONSt16remove_referenceIT_E4typeEOS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2ERKS4_ の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1ERKS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 d6             	mov    %rdx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1ERKS4_+0x3e>
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt10shared_ptrINSt13__future_base11_State_baseEEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1ERKS2_>:
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1ERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1ERKS2_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base19_Async_state_common15_M_run_deferredEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base19_Async_state_common15_M_run_deferredEv>:
    ~_Async_state_common() = default;
#endif

    // Allow non-timed waiting functions to block until the thread completes,
    // as if joined.
    virtual void _M_run_deferred() { _M_join(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base19_Async_state_common15_M_run_deferredEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base19_Async_state_common15_M_run_deferredEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base19_Async_state_common7_M_joinEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base19_Async_state_common7_M_joinEv>:

    void _M_join() { std::call_once(_M_once, &thread::join, ref(_M_thread)); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	48 83 ec 30          	sub    $0x30,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZNSt13__future_base19_Async_state_common7_M_joinEv+0x11>
  11:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  19:	48 8d 50 70          	lea    0x70(%rax),%rdx
  1d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt13__future_base19_Async_state_common7_M_joinEv+0x2c>
  2c:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  32:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  38:	4c 89 65 e0          	mov    %r12,-0x20(%rbp)
  3c:	4c 89 6d e8          	mov    %r13,-0x18(%rbp)
  40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  44:	48 8d 48 78          	lea    0x78(%rax),%rcx
  48:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  4c:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  50:	48 89 c6             	mov    %rax,%rsi
  53:	48 89 cf             	mov    %rcx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt13__future_base19_Async_state_common7_M_joinEv+0x5b>
  5b:	48 83 c4 30          	add    $0x30,%rsp
  5f:	41 5c                	pop    %r12
  61:	41 5d                	pop    %r13
  63:	5d                   	pop    %rbp
  64:	c3                   	retq   

セクション .text._ZN10DBAccessorC2ERKSs の逆アセンブル:

0000000000000000 <_ZN10DBAccessorC1ERKSs>:
private:
	std::string dbFileName;
	sqlite3 *db;
	sqlite3_stmt* stmt;
public:
	DBAccessor(const std::string& dbfilename):dbFileName(dbfilename),db(NULL),stmt(NULL)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN10DBAccessorC1ERKSs+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  1e:	48 89 d6             	mov    %rdx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZN10DBAccessorC1ERKSs+0x29>
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  34:	00 
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  40:	00 
	{
		int r = sqlite3_open(dbFileName.c_str(),&db);
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	48 8d 58 08          	lea    0x8(%rax),%rbx
  49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZN10DBAccessorC1ERKSs+0x55>
  55:	48 89 de             	mov    %rbx,%rsi
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZN10DBAccessorC1ERKSs+0x60>
  60:	89 45 ec             	mov    %eax,-0x14(%rbp)
		if(SQLITE_OK != r)
  63:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  67:	74 54                	je     bd <_ZN10DBAccessorC1ERKSs+0xbd>
		{
			//open失敗
			std::cout<<"DBへの接続に失敗しました。"<<std::endl;
  69:	be 00 00 00 00       	mov    $0x0,%esi
  6e:	bf 00 00 00 00       	mov    $0x0,%edi
  73:	e8 00 00 00 00       	callq  78 <_ZN10DBAccessorC1ERKSs+0x78>
  78:	be 00 00 00 00       	mov    $0x0,%esi
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	callq  85 <_ZN10DBAccessorC1ERKSs+0x85>
			sqlite3_close(db);
  85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  89:	48 8b 40 08          	mov    0x8(%rax),%rax
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	callq  95 <_ZN10DBAccessorC1ERKSs+0x95>
			db = NULL;
  95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  99:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  a0:	00 
  a1:	eb 1a                	jmp    bd <_ZN10DBAccessorC1ERKSs+0xbd>
  a3:	48 89 c3             	mov    %rax,%rbx
private:
	std::string dbFileName;
	sqlite3 *db;
	sqlite3_stmt* stmt;
public:
	DBAccessor(const std::string& dbfilename):dbFileName(dbfilename),db(NULL),stmt(NULL)
  a6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  aa:	48 89 c7             	mov    %rax,%rdi
  ad:	e8 00 00 00 00       	callq  b2 <_ZN10DBAccessorC1ERKSs+0xb2>
  b2:	48 89 d8             	mov    %rbx,%rax
  b5:	48 89 c7             	mov    %rax,%rdi
  b8:	e8 00 00 00 00       	callq  bd <_ZN10DBAccessorC1ERKSs+0xbd>
			//open失敗
			std::cout<<"DBへの接続に失敗しました。"<<std::endl;
			sqlite3_close(db);
			db = NULL;
		}
	}
  bd:	48 83 c4 28          	add    $0x28,%rsp
  c1:	5b                   	pop    %rbx
  c2:	5d                   	pop    %rbp
  c3:	c3                   	retq   

セクション .text._ZN10DBAccessorD2Ev の逆アセンブル:

0000000000000000 <_ZN10DBAccessorD1Ev>:
	~DBAccessor()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN10DBAccessorD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
		sqlite3_finalize(stmt);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN10DBAccessorD1Ev+0x21>
		
		sqlite3_close(db);
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 8b 40 08          	mov    0x8(%rax),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN10DBAccessorD1Ev+0x31>
		db = NULL;
  31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  35:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  3c:	00 
			sqlite3_close(db);
			db = NULL;
		}
	}
	~DBAccessor()
	{
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	callq  49 <_ZN10DBAccessorD1Ev+0x49>
		sqlite3_finalize(stmt);
		
		sqlite3_close(db);
		db = NULL;
	}
  49:	c9                   	leaveq 
  4a:	c3                   	retq   

セクション .text._ZN10DBAccessor8setQueryERKSs の逆アセンブル:

0000000000000000 <_ZN10DBAccessor8setQueryERKSs>:
	void setQuery(const std::string& sql)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN10DBAccessor8setQueryERKSs+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
		//予めstmtを開放しておく
		sqlite3_finalize(stmt);
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 8b 40 10          	mov    0x10(%rax),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN10DBAccessor8setQueryERKSs+0x26>
		//sql文字列からstmtを生成
		sqlite3_prepare(db, sql.c_str(), -1, &stmt,NULL);
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 8d 58 10          	lea    0x10(%rax),%rbx
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN10DBAccessor8setQueryERKSs+0x3a>
  3a:	48 89 c6             	mov    %rax,%rsi
  3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  41:	48 8b 40 08          	mov    0x8(%rax),%rax
  45:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  4b:	48 89 d9             	mov    %rbx,%rcx
  4e:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZN10DBAccessor8setQueryERKSs+0x5b>
		//stmtの内部バッファを一旦クリア
		sqlite3_reset(stmt);
  5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5f:	48 8b 40 10          	mov    0x10(%rax),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZN10DBAccessor8setQueryERKSs+0x6b>
	}
  6b:	48 83 c4 18          	add    $0x18,%rsp
  6f:	5b                   	pop    %rbx
  70:	5d                   	pop    %rbp
  71:	c3                   	retq   

セクション .text._ZN10DBAccessor11step_selectEv の逆アセンブル:

0000000000000000 <_ZN10DBAccessor11step_selectEv>:
	}
	void commit()
	{
		sqlite3_exec(db, "COMMIT", NULL, NULL, NULL);
	}
	int step_select()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN10DBAccessor11step_selectEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
		return sqlite3_step(stmt);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN10DBAccessor11step_selectEv+0x21>
	}
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZN10DBAccessor12getColumnIntEi の逆アセンブル:

0000000000000000 <_ZN10DBAccessor12getColumnIntEi>:
	int getColumnInt(int i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN10DBAccessor12getColumnIntEi+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		return sqlite3_column_int(stmt,i);
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 40 10          	mov    0x10(%rax),%rax
  1c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1f:	89 d6                	mov    %edx,%esi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZN10DBAccessor12getColumnIntEi+0x29>
	}
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZN10DBAccessor17getColumnLongLongEi の逆アセンブル:

0000000000000000 <_ZN10DBAccessor17getColumnLongLongEi>:
	long long getColumnLongLong(int i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN10DBAccessor17getColumnLongLongEi+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		return (long long)sqlite3_column_int64(stmt,i);
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 40 10          	mov    0x10(%rax),%rax
  1c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1f:	89 d6                	mov    %edx,%esi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZN10DBAccessor17getColumnLongLongEi+0x29>
	}
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZN10DBAccessor15getColumnDoubleEi の逆アセンブル:

0000000000000000 <_ZN10DBAccessor15getColumnDoubleEi>:
	double getColumnDouble(int i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN10DBAccessor15getColumnDoubleEi+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
	{
		return sqlite3_column_double(stmt,i);
  14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  18:	48 8b 40 10          	mov    0x10(%rax),%rax
  1c:	8b 55 f4             	mov    -0xc(%rbp),%edx
  1f:	89 d6                	mov    %edx,%esi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZN10DBAccessor15getColumnDoubleEi+0x29>
  29:	f2 0f 11 45 e8       	movsd  %xmm0,-0x18(%rbp)
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	}
  32:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  36:	f2 0f 10 45 e8       	movsd  -0x18(%rbp),%xmm0
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZN10DBAccessor15getColumnStringEi の逆アセンブル:

0000000000000000 <_ZN10DBAccessor15getColumnStringEi>:
	std::string getColumnString(int i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN10DBAccessor15getColumnStringEi+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	89 55 cc             	mov    %edx,-0x34(%rbp)
	{
		return std::string((const char*)sqlite3_column_text(stmt,i));
  19:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN10DBAccessor15getColumnStringEi+0x25>
  25:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  29:	48 8b 40 10          	mov    0x10(%rax),%rax
  2d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  30:	89 d6                	mov    %edx,%esi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZN10DBAccessor15getColumnStringEi+0x3a>
  3a:	48 89 c1             	mov    %rax,%rcx
  3d:	48 8d 55 ef          	lea    -0x11(%rbp),%rdx
  41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN10DBAccessor15getColumnStringEi+0x50>
  50:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZN10DBAccessor15getColumnStringEi+0x5c>
  5c:	eb 1a                	jmp    78 <_ZN10DBAccessor15getColumnStringEi+0x78>
  5e:	48 89 c3             	mov    %rax,%rbx
  61:	48 8d 45 ef          	lea    -0x11(%rbp),%rax
  65:	48 89 c7             	mov    %rax,%rdi
  68:	e8 00 00 00 00       	callq  6d <_ZN10DBAccessor15getColumnStringEi+0x6d>
  6d:	48 89 d8             	mov    %rbx,%rax
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	callq  78 <_ZN10DBAccessor15getColumnStringEi+0x78>
	}
  78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7c:	48 83 c4 38          	add    $0x38,%rsp
  80:	5b                   	pop    %rbx
  81:	5d                   	pop    %rbp
  82:	c3                   	retq   

セクション .text._ZN9PathPointC2EddixSs の逆アセンブル:

0000000000000000 <_ZN9PathPointC1EddixSs>:
	double longitude;
	double latitude;
	int altitude;
	time_t time;
	std::string arrival;
	PathPoint(double lo,double la, int a, long long t, const std::string ar)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9PathPointC1EddixSs+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	f2 0f 11 45 e0       	movsd  %xmm0,-0x20(%rbp)
  17:	f2 0f 11 4d d8       	movsd  %xmm1,-0x28(%rbp)
  1c:	89 75 d4             	mov    %esi,-0x2c(%rbp)
  1f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  23:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	{
  27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2b:	48 83 c0 20          	add    $0x20,%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZN9PathPointC1EddixSs+0x37>
		longitude = lo;
  37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  3f:	48 89 02             	mov    %rax,(%rdx)
		latitude = la;
  42:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4a:	48 89 42 08          	mov    %rax,0x8(%rdx)
		altitude = a;
  4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  52:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  55:	89 50 10             	mov    %edx,0x10(%rax)
		time = t;
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  60:	48 89 50 18          	mov    %rdx,0x18(%rax)
		arrival = ar;
  64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  68:	48 8d 50 20          	lea    0x20(%rax),%rdx
  6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  70:	48 89 c6             	mov    %rax,%rsi
  73:	48 89 d7             	mov    %rdx,%rdi
  76:	e8 00 00 00 00       	callq  7b <_ZN9PathPointC1EddixSs+0x7b>
	}
  7b:	eb 1e                	jmp    9b <_ZN9PathPointC1EddixSs+0x9b>
  7d:	48 89 c3             	mov    %rax,%rbx
	double latitude;
	int altitude;
	time_t time;
	std::string arrival;
	PathPoint(double lo,double la, int a, long long t, const std::string ar)
	{
  80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  84:	48 83 c0 20          	add    $0x20,%rax
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	callq  90 <_ZN9PathPointC1EddixSs+0x90>
  90:	48 89 d8             	mov    %rbx,%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN9PathPointC1EddixSs+0x9b>
		longitude = lo;
		latitude = la;
		altitude = a;
		time = t;
		arrival = ar;
	}
  9b:	48 83 c4 38          	add    $0x38,%rsp
  9f:	5b                   	pop    %rbx
  a0:	5d                   	pop    %rbp
  a1:	c3                   	retq   

セクション .text._ZN11TimeManager5todayEl の逆アセンブル:

0000000000000000 <_ZN11TimeManager5todayEl>:
{
private:
	
public:
	//引数の時刻の日付(00:00:00)をtime_t型で返却する
	static time_t today(time_t t)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN11TimeManager5todayEl+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
		tm* t_tm = localtime(&t);
  11:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN11TimeManager5todayEl+0x1d>
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		t_tm->tm_hour = 0;
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
		t_tm->tm_min = 0;
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
		t_tm->tm_sec = 0;
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
		return mktime(t_tm);
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZN11TimeManager5todayEl+0x4d>
	}
  4d:	c9                   	leaveq 
  4e:	c3                   	retq   

セクション .text._ZN11TimeManager11nextDayTimeEl の逆アセンブル:

0000000000000000 <_ZN11TimeManager11nextDayTimeEl>:
	//引数の時刻の24時間後の日時をtime_t型で返却する
	static time_t nextDayTime(time_t t)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN11TimeManager11nextDayTimeEl+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
		tm* t_tm = localtime(&t);
  11:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN11TimeManager11nextDayTimeEl+0x1d>
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		t_tm->tm_mday += 1;
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	8b 40 0c             	mov    0xc(%rax),%eax
  28:	8d 50 01             	lea    0x1(%rax),%edx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	89 50 0c             	mov    %edx,0xc(%rax)
		return mktime(t_tm);
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN11TimeManager11nextDayTimeEl+0x3e>
	}
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZN16TrackDataManager14makeDBFileNameElRSs の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager14makeDBFileNameElRSs>:
#include "TimeManager.h"

class TrackDataManager
{
private:
	void makeDBFileName(time_t day, std::string& dbfilenamestr)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 81 ec e8 01 00 00 	sub    $0x1e8,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x11>
  11:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
  18:	48 89 b5 20 fe ff ff 	mov    %rsi,-0x1e0(%rbp)
  1f:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  26:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  2d:	00 00 
  2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  33:	31 c0                	xor    %eax,%eax
	{
		//日付に対応するTrackDataのファイル名を生成
		char day_str[32];
		strftime(day_str, 31, "%Y%m%d", localtime(&day));
  35:	48 8d 85 20 fe ff ff 	lea    -0x1e0(%rbp),%rax
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x44>
  44:	48 89 c2             	mov    %rax,%rdx
  47:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  4b:	48 89 d1             	mov    %rdx,%rcx
  4e:	ba 00 00 00 00       	mov    $0x0,%edx
  53:	be 1f 00 00 00       	mov    $0x1f,%esi
  58:	48 89 c7             	mov    %rax,%rdi
  5b:	e8 00 00 00 00       	callq  60 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x60>
		std::stringstream dbfilename("");
  60:	be 08 00 00 00       	mov    $0x8,%esi
  65:	bf 10 00 00 00       	mov    $0x10,%edi
  6a:	e8 00 00 00 00       	callq  6f <_ZN16TrackDataManager14makeDBFileNameElRSs+0x6f>
  6f:	89 c3                	mov    %eax,%ebx
  71:	48 8d 85 3f fe ff ff 	lea    -0x1c1(%rbp),%rax
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x80>
  80:	48 8d 95 3f fe ff ff 	lea    -0x1c1(%rbp),%rdx
  87:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  8e:	be 00 00 00 00       	mov    $0x0,%esi
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN16TrackDataManager14makeDBFileNameElRSs+0x9b>
  9b:	48 8d 8d 40 fe ff ff 	lea    -0x1c0(%rbp),%rcx
  a2:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  a9:	89 da                	mov    %ebx,%edx
  ab:	48 89 ce             	mov    %rcx,%rsi
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN16TrackDataManager14makeDBFileNameElRSs+0xb6>
  b6:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	callq  c5 <_ZN16TrackDataManager14makeDBFileNameElRSs+0xc5>
  c5:	48 8d 85 3f fe ff ff 	lea    -0x1c1(%rbp),%rax
  cc:	48 89 c7             	mov    %rax,%rdi
  cf:	e8 00 00 00 00       	callq  d4 <_ZN16TrackDataManager14makeDBFileNameElRSs+0xd4>
		dbfilename << "../../db/TrackData/TrackData_";
  d4:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
  db:	48 83 c0 10          	add    $0x10,%rax
  df:	be 00 00 00 00       	mov    $0x0,%esi
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN16TrackDataManager14makeDBFileNameElRSs+0xec>
		dbfilename << day_str;
  ec:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  f0:	48 8d 95 50 fe ff ff 	lea    -0x1b0(%rbp),%rdx
  f7:	48 83 c2 10          	add    $0x10,%rdx
  fb:	48 89 c6             	mov    %rax,%rsi
  fe:	48 89 d7             	mov    %rdx,%rdi
 101:	e8 00 00 00 00       	callq  106 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x106>
		dbfilename << ".db";
 106:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
 10d:	48 83 c0 10          	add    $0x10,%rax
 111:	be 00 00 00 00       	mov    $0x0,%esi
 116:	48 89 c7             	mov    %rax,%rdi
 119:	e8 00 00 00 00       	callq  11e <_ZN16TrackDataManager14makeDBFileNameElRSs+0x11e>
		dbfilenamestr =  dbfilename.str();
 11e:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
 125:	48 8d 95 50 fe ff ff 	lea    -0x1b0(%rbp),%rdx
 12c:	48 89 d6             	mov    %rdx,%rsi
 12f:	48 89 c7             	mov    %rax,%rdi
 132:	e8 00 00 00 00       	callq  137 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x137>
 137:	48 8d 95 40 fe ff ff 	lea    -0x1c0(%rbp),%rdx
 13e:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
 145:	48 89 d6             	mov    %rdx,%rsi
 148:	48 89 c7             	mov    %rax,%rdi
 14b:	e8 00 00 00 00       	callq  150 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x150>
 150:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
 157:	48 89 c7             	mov    %rax,%rdi
 15a:	e8 00 00 00 00       	callq  15f <_ZN16TrackDataManager14makeDBFileNameElRSs+0x15f>
 15f:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
 166:	48 89 c7             	mov    %rax,%rdi
 169:	e8 00 00 00 00       	callq  16e <_ZN16TrackDataManager14makeDBFileNameElRSs+0x16e>
	}
 16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 172:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 179:	00 00 
 17b:	74 69                	je     1e6 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1e6>
 17d:	eb 62                	jmp    1e1 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1e1>
 17f:	48 89 c3             	mov    %rax,%rbx
 182:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
 189:	48 89 c7             	mov    %rax,%rdi
 18c:	e8 00 00 00 00       	callq  191 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x191>
 191:	eb 03                	jmp    196 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x196>
 193:	48 89 c3             	mov    %rax,%rbx
 196:	48 8d 85 3f fe ff ff 	lea    -0x1c1(%rbp),%rax
 19d:	48 89 c7             	mov    %rax,%rdi
 1a0:	e8 00 00 00 00       	callq  1a5 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1a5>
 1a5:	48 89 d8             	mov    %rbx,%rax
 1a8:	48 89 c7             	mov    %rax,%rdi
 1ab:	e8 00 00 00 00       	callq  1b0 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1b0>
 1b0:	48 89 c3             	mov    %rax,%rbx
		strftime(day_str, 31, "%Y%m%d", localtime(&day));
		std::stringstream dbfilename("");
		dbfilename << "../../db/TrackData/TrackData_";
		dbfilename << day_str;
		dbfilename << ".db";
		dbfilenamestr =  dbfilename.str();
 1b3:	48 8d 85 40 fe ff ff 	lea    -0x1c0(%rbp),%rax
 1ba:	48 89 c7             	mov    %rax,%rdi
 1bd:	e8 00 00 00 00       	callq  1c2 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1c2>
 1c2:	eb 03                	jmp    1c7 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1c7>
 1c4:	48 89 c3             	mov    %rax,%rbx
 1c7:	48 8d 85 50 fe ff ff 	lea    -0x1b0(%rbp),%rax
 1ce:	48 89 c7             	mov    %rax,%rdi
 1d1:	e8 00 00 00 00       	callq  1d6 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1d6>
 1d6:	48 89 d8             	mov    %rbx,%rax
 1d9:	48 89 c7             	mov    %rax,%rdi
 1dc:	e8 00 00 00 00       	callq  1e1 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1e1>
	}
 1e1:	e8 00 00 00 00       	callq  1e6 <_ZN16TrackDataManager14makeDBFileNameElRSs+0x1e6>
 1e6:	48 81 c4 e8 01 00 00 	add    $0x1e8,%rsp
 1ed:	5b                   	pop    %rbx
 1ee:	5d                   	pop    %rbp
 1ef:	c3                   	retq   

セクション .text._ZN16TrackDataManager8setQueryER10DBAccessorllc の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager8setQueryER10DBAccessorllc>:
	void setQuery(DBAccessor& dba, time_t start, time_t end, char n = ' ')
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x11>
  11:	48 89 bd 58 fe ff ff 	mov    %rdi,-0x1a8(%rbp)
  18:	48 89 b5 50 fe ff ff 	mov    %rsi,-0x1b0(%rbp)
  1f:	48 89 95 48 fe ff ff 	mov    %rdx,-0x1b8(%rbp)
  26:	48 89 8d 40 fe ff ff 	mov    %rcx,-0x1c0(%rbp)
  2d:	44 89 c0             	mov    %r8d,%eax
  30:	88 85 3c fe ff ff    	mov    %al,-0x1c4(%rbp)
	{
		//クエリを実行
		std::stringstream query("");
  36:	be 08 00 00 00       	mov    $0x8,%esi
  3b:	bf 10 00 00 00       	mov    $0x10,%edi
  40:	e8 00 00 00 00       	callq  45 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x45>
  45:	89 c3                	mov    %eax,%ebx
  47:	48 8d 85 6f fe ff ff 	lea    -0x191(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x56>
  56:	48 8d 95 6f fe ff ff 	lea    -0x191(%rbp),%rdx
  5d:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  64:	be 00 00 00 00       	mov    $0x0,%esi
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	callq  71 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x71>
  71:	48 8d 8d 70 fe ff ff 	lea    -0x190(%rbp),%rcx
  78:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
  7f:	89 da                	mov    %ebx,%edx
  81:	48 89 ce             	mov    %rcx,%rsi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x8c>
  8c:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
  93:	48 89 c7             	mov    %rax,%rdi
  96:	e8 00 00 00 00       	callq  9b <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x9b>
  9b:	48 8d 85 6f fe ff ff 	lea    -0x191(%rbp),%rax
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	e8 00 00 00 00       	callq  aa <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0xaa>
		query << "select id,longitude,latitude,altitude,time,arrival from TrackData where time >= ";
  aa:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
  b1:	48 83 c0 10          	add    $0x10,%rax
  b5:	be 00 00 00 00       	mov    $0x0,%esi
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0xc2>
		query << start << " and time < ";
  c2:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
  c9:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
  d0:	48 83 c2 10          	add    $0x10,%rdx
  d4:	48 89 c6             	mov    %rax,%rsi
  d7:	48 89 d7             	mov    %rdx,%rdi
  da:	e8 00 00 00 00       	callq  df <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0xdf>
  df:	be 00 00 00 00       	mov    $0x0,%esi
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0xec>
		query << end;
  ec:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
  f3:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
  fa:	48 83 c2 10          	add    $0x10,%rdx
  fe:	48 89 c6             	mov    %rax,%rsi
 101:	48 89 d7             	mov    %rdx,%rdi
 104:	e8 00 00 00 00       	callq  109 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x109>
		if(n != ' ')
 109:	80 bd 3c fe ff ff 20 	cmpb   $0x20,-0x1c4(%rbp)
 110:	74 36                	je     148 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x148>
		{
			query << " and substr(id,-1,1) = '" << n << "'";
 112:	0f be 9d 3c fe ff ff 	movsbl -0x1c4(%rbp),%ebx
 119:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
 120:	48 83 c0 10          	add    $0x10,%rax
 124:	be 00 00 00 00       	mov    $0x0,%esi
 129:	48 89 c7             	mov    %rax,%rdi
 12c:	e8 00 00 00 00       	callq  131 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x131>
 131:	89 de                	mov    %ebx,%esi
 133:	48 89 c7             	mov    %rax,%rdi
 136:	e8 00 00 00 00       	callq  13b <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x13b>
 13b:	be 00 00 00 00       	mov    $0x0,%esi
 140:	48 89 c7             	mov    %rax,%rdi
 143:	e8 00 00 00 00       	callq  148 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x148>
		}
		query << " order by id,time;";
 148:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
 14f:	48 83 c0 10          	add    $0x10,%rax
 153:	be 00 00 00 00       	mov    $0x0,%esi
 158:	48 89 c7             	mov    %rax,%rdi
 15b:	e8 00 00 00 00       	callq  160 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x160>
		dba.setQuery(query.str());
 160:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
 167:	48 8d 95 80 fe ff ff 	lea    -0x180(%rbp),%rdx
 16e:	48 89 d6             	mov    %rdx,%rsi
 171:	48 89 c7             	mov    %rax,%rdi
 174:	e8 00 00 00 00       	callq  179 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x179>
 179:	48 8d 95 70 fe ff ff 	lea    -0x190(%rbp),%rdx
 180:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
 187:	48 89 d6             	mov    %rdx,%rsi
 18a:	48 89 c7             	mov    %rax,%rdi
 18d:	e8 00 00 00 00       	callq  192 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x192>
 192:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
 199:	48 89 c7             	mov    %rax,%rdi
 19c:	e8 00 00 00 00       	callq  1a1 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1a1>
 1a1:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
 1a8:	48 89 c7             	mov    %rax,%rdi
 1ab:	e8 00 00 00 00       	callq  1b0 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1b0>
 1b0:	eb 62                	jmp    214 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x214>
 1b2:	48 89 c3             	mov    %rax,%rbx
 1b5:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
 1bc:	48 89 c7             	mov    %rax,%rdi
 1bf:	e8 00 00 00 00       	callq  1c4 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1c4>
 1c4:	eb 03                	jmp    1c9 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1c9>
 1c6:	48 89 c3             	mov    %rax,%rbx
 1c9:	48 8d 85 6f fe ff ff 	lea    -0x191(%rbp),%rax
 1d0:	48 89 c7             	mov    %rax,%rdi
 1d3:	e8 00 00 00 00       	callq  1d8 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1d8>
 1d8:	48 89 d8             	mov    %rbx,%rax
 1db:	48 89 c7             	mov    %rax,%rdi
 1de:	e8 00 00 00 00       	callq  1e3 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1e3>
 1e3:	48 89 c3             	mov    %rax,%rbx
 1e6:	48 8d 85 70 fe ff ff 	lea    -0x190(%rbp),%rax
 1ed:	48 89 c7             	mov    %rax,%rdi
 1f0:	e8 00 00 00 00       	callq  1f5 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1f5>
 1f5:	eb 03                	jmp    1fa <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x1fa>
 1f7:	48 89 c3             	mov    %rax,%rbx
 1fa:	48 8d 85 80 fe ff ff 	lea    -0x180(%rbp),%rax
 201:	48 89 c7             	mov    %rax,%rdi
 204:	e8 00 00 00 00       	callq  209 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x209>
 209:	48 89 d8             	mov    %rbx,%rax
 20c:	48 89 c7             	mov    %rax,%rdi
 20f:	e8 00 00 00 00       	callq  214 <_ZN16TrackDataManager8setQueryER10DBAccessorllc+0x214>
	}
 214:	48 81 c4 c8 01 00 00 	add    $0x1c8,%rsp
 21b:	5b                   	pop    %rbx
 21c:	5d                   	pop    %rbp
 21d:	c3                   	retq   

セクション .text._ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_ の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_>:

	void getColumn(DBAccessor& dba, std::string& id, double& lo, double& la, int& a, long long& t, std::string& ar)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 58          	sub    $0x58,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  1a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  1e:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  22:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	{
		id = dba.getColumnString(0);
  26:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  2a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  2e:	ba 00 00 00 00       	mov    $0x0,%edx
  33:	48 89 ce             	mov    %rcx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x3e>
  3e:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  42:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  46:	48 89 d6             	mov    %rdx,%rsi
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x51>
  51:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	callq  5d <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x5d>
		lo = dba.getColumnDouble(1);
  5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  61:	be 01 00 00 00       	mov    $0x1,%esi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x6e>
  6e:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
  73:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  77:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  7b:	48 89 02             	mov    %rax,(%rdx)
		la = dba.getColumnDouble(2);
  7e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  82:	be 02 00 00 00       	mov    $0x2,%esi
  87:	48 89 c7             	mov    %rax,%rdi
  8a:	e8 00 00 00 00       	callq  8f <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x8f>
  8f:	f2 0f 11 45 a8       	movsd  %xmm0,-0x58(%rbp)
  94:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  98:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  9c:	48 89 02             	mov    %rax,(%rdx)
		a = dba.getColumnInt(3);
  9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  a3:	be 03 00 00 00       	mov    $0x3,%esi
  a8:	48 89 c7             	mov    %rax,%rdi
  ab:	e8 00 00 00 00       	callq  b0 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0xb0>
  b0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  b4:	89 02                	mov    %eax,(%rdx)
		t = dba.getColumnLongLong(4);
  b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  ba:	be 04 00 00 00       	mov    $0x4,%esi
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	callq  c7 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0xc7>
  c7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  cb:	48 89 02             	mov    %rax,(%rdx)
		ar = dba.getColumnString(5);
  ce:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  d2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  d6:	ba 05 00 00 00       	mov    $0x5,%edx
  db:	48 89 ce             	mov    %rcx,%rsi
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	callq  e6 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0xe6>
  e6:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  ea:	48 8b 45 18          	mov    0x18(%rbp),%rax
  ee:	48 89 d6             	mov    %rdx,%rsi
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	callq  f9 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0xf9>
  f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	e8 00 00 00 00       	callq  105 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x105>
 105:	eb 34                	jmp    13b <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x13b>
 107:	48 89 c3             	mov    %rax,%rbx
		dba.setQuery(query.str());
	}

	void getColumn(DBAccessor& dba, std::string& id, double& lo, double& la, int& a, long long& t, std::string& ar)
	{
		id = dba.getColumnString(0);
 10a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 10e:	48 89 c7             	mov    %rax,%rdi
 111:	e8 00 00 00 00       	callq  116 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x116>
 116:	48 89 d8             	mov    %rbx,%rax
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x121>
 121:	48 89 c3             	mov    %rax,%rbx
		lo = dba.getColumnDouble(1);
		la = dba.getColumnDouble(2);
		a = dba.getColumnInt(3);
		t = dba.getColumnLongLong(4);
		ar = dba.getColumnString(5);
 124:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
 128:	48 89 c7             	mov    %rax,%rdi
 12b:	e8 00 00 00 00       	callq  130 <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x130>
 130:	48 89 d8             	mov    %rbx,%rax
 133:	48 89 c7             	mov    %rax,%rdi
 136:	e8 00 00 00 00       	callq  13b <_ZN16TrackDataManager9getColumnER10DBAccessorRSsRdS3_RiRxS2_+0x13b>
	}
 13b:	48 83 c4 58          	add    $0x58,%rsp
 13f:	5b                   	pop    %rbx
 140:	5d                   	pop    %rbp
 141:	c3                   	retq   

セクション .text._ZN4PathC2Ev の逆アセンブル:

0000000000000000 <_ZN4PathC1Ev>:
	{
		return !((*this) == p);
	}
};

struct Path
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN4PathC1Ev+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  16:	48 89 c7             	mov    %rax,%rdi
  19:	e8 00 00 00 00       	callq  1e <_ZN4PathC1Ev+0x1e>
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 83 c0 08          	add    $0x8,%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZN4PathC1Ev+0x2e>
  2e:	eb 1a                	jmp    4a <_ZN4PathC1Ev+0x4a>
  30:	48 89 c3             	mov    %rax,%rbx
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZN4PathC1Ev+0x3f>
  3f:	48 89 d8             	mov    %rbx,%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZN4PathC1Ev+0x4a>
  4a:	48 83 c4 18          	add    $0x18,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZN4PathD2Ev の逆アセンブル:

0000000000000000 <_ZN4PathD1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN4PathD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN4PathD1Ev+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN4PathD1Ev+0x2d>
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZN9PathPointD2Ev の逆アセンブル:

0000000000000000 <_ZN9PathPointD1Ev>:

#include <vector>
#include <string>
#include <ctime>

struct PathPoint
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9PathPointD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 20          	add    $0x20,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN9PathPointD1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1Ev の逆アセンブル:

0000000000000000 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1Ev>:

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 265.  std::pair::pair() effects overly restrictive
      /** The default constructor creates @c first and @c second using their
       *  respective default constructors.  */
      _GLIBCXX_CONSTEXPR pair()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : first(), second() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZSt7forwardIRSsEOT_RNSt16remove_referenceIS1_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRSsEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRSsEOT_RNSt16remove_referenceIS1_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardI4PathEOT_RNSt16remove_referenceIS1_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardI4PathEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardI4PathEOT_RNSt16remove_referenceIS1_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZN4PathC2EOS_ の逆アセンブル:

0000000000000000 <_ZN4PathC1EOS_>:
	{
		return !((*this) == p);
	}
};

struct Path
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN4PathC1EOS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN4PathC1EOS_+0x28>
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 83 c0 08          	add    $0x8,%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZN4PathC1EOS_+0x43>
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	8b 50 20             	mov    0x20(%rax),%edx
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	89 50 20             	mov    %edx,0x20(%rax)
  51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  55:	8b 50 24             	mov    0x24(%rax),%edx
  58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5c:	89 50 24             	mov    %edx,0x24(%rax)
  5f:	c9                   	leaveq 
  60:	c3                   	retq   

セクション .text._ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_>:
	: first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_+0x37>
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	48 83 c2 08          	add    $0x8,%rdx
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	48 89 d7             	mov    %rdx,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt4pairISs4PathEC1IRSsS0_vEEOT_OT0_+0x56>
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNSt4pairISs4PathED2Ev の逆アセンブル:

0000000000000000 <_ZNSt4pairISs4PathED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<class _T1, class _T2>
    struct pair
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairISs4PathED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt4pairISs4PathED1Ev+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt4pairISs4PathED1Ev+0x2d>
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_ の逆アセンブル:

0000000000000000 <_ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_>:
#if __cplusplus >= 201103L
  // NB: DR 706.
  template<class _T1, class _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt9make_pairIRSs4PathESt4pairINSt17__decay_and_stripIT_E6__typeENS3_IT0_E6__typeEEOS4_OS7_+0x4a>
    }
  4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4e:	48 83 c4 28          	add    $0x28,%rsp
  52:	5b                   	pop    %rbx
  53:	5d                   	pop    %rbp
  54:	c3                   	retq   

セクション .text._ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISsEOT_RNSt16remove_referenceIS0_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E の逆アセンブル:

0000000000000000 <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E>:
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(pair<_U1, _U2>&& __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: first(std::forward<_U1>(__p.first)),
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
	  second(std::forward<_U2>(__p.second)) { }
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E+0x33>
  33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  37:	48 83 c0 08          	add    $0x8,%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	48 83 c2 08          	add    $0x8,%rdx
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	48 89 d7             	mov    %rdx,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt4pairIKSs4PathEC1ISsS1_vEEOS_IT_T0_E+0x56>
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc>:
			}
			i->pathPoint.push_back(PathPoint(lo,la,a,t,ar));
		}

	}
	void getTrackDataFromDBToMapWithDay
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 81 ec 88 01 00 00 	sub    $0x188,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x11>
  11:	48 89 bd b8 fe ff ff 	mov    %rdi,-0x148(%rbp)
  18:	48 89 b5 b0 fe ff ff 	mov    %rsi,-0x150(%rbp)
  1f:	48 89 95 a8 fe ff ff 	mov    %rdx,-0x158(%rbp)
  26:	48 89 8d a0 fe ff ff 	mov    %rcx,-0x160(%rbp)
  2d:	4c 89 85 98 fe ff ff 	mov    %r8,-0x168(%rbp)
  34:	44 89 c8             	mov    %r9d,%eax
  37:	88 85 94 fe ff ff    	mov    %al,-0x16c(%rbp)
			time_t day,
			char n = ' '
		)
	{
		//DBのファイル名
		std::string dbfilename;
  3d:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x4c>
		//dayに従ってアクセスするDBのファイル名を設定する
		makeDBFileName(day, dbfilename);
  4c:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  53:	48 8b 8d 98 fe ff ff 	mov    -0x168(%rbp),%rcx
  5a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  61:	48 89 ce             	mov    %rcx,%rsi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x6c>
		//DBに接続
		DBAccessor dba(dbfilename);
  6c:	48 8d 95 d0 fe ff ff 	lea    -0x130(%rbp),%rdx
  73:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
  7a:	48 89 d6             	mov    %rdx,%rsi
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	callq  85 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x85>
		//クエリを実行
		setQuery(dba, start, end, n);
  85:	0f be bd 94 fe ff ff 	movsbl -0x16c(%rbp),%edi
  8c:	48 8b 8d a0 fe ff ff 	mov    -0x160(%rbp),%rcx
  93:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  9a:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
  a1:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  a8:	41 89 f8             	mov    %edi,%r8d
  ab:	48 89 c7             	mov    %rax,%rdi
  ae:	e8 00 00 00 00       	callq  b3 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0xb3>
		
		//pathの追加先を指すイテレータ
		std::map<std::string, Path>::iterator i = paths.end();
  b3:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0xc2>
  c2:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
		
		//クエリの結果の取得
		while(SQLITE_ROW == dba.step_select())
  c9:	e9 08 03 00 00       	jmpq   3d6 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3d6>
		{
			//1レコード分のカラムデータ
			std::string id;
  ce:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  d5:	48 89 c7             	mov    %rax,%rdi
  d8:	e8 00 00 00 00       	callq  dd <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0xdd>
			double lo;
			double la;
			int a;
			long long t;
			std::string ar;
  dd:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0xec>
			
			//カラムの取得
			getColumn(dba, id, lo, la, a, t, ar);
  ec:	4c 8d 8d cc fe ff ff 	lea    -0x134(%rbp),%r9
  f3:	4c 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%r8
  fa:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
 101:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
 108:	48 8d b5 40 ff ff ff 	lea    -0xc0(%rbp),%rsi
 10f:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
 116:	48 8d bd 00 ff ff ff 	lea    -0x100(%rbp),%rdi
 11d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
 122:	48 8d bd 28 ff ff ff 	lea    -0xd8(%rbp),%rdi
 129:	48 89 3c 24          	mov    %rdi,(%rsp)
 12d:	48 89 c7             	mov    %rax,%rdi
 130:	e8 00 00 00 00       	callq  135 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x135>
			
			//map::find()が要るかどうかを示す
			bool need_find = false;
 135:	c6 85 cb fe ff ff 00 	movb   $0x0,-0x135(%rbp)
			//iがend()を示すときはfind()を実行する
			if(i == paths.end())
 13c:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
 143:	48 89 c7             	mov    %rax,%rdi
 146:	e8 00 00 00 00       	callq  14b <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x14b>
 14b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 14f:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 153:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
 15a:	48 89 d6             	mov    %rdx,%rsi
 15d:	48 89 c7             	mov    %rax,%rdi
 160:	e8 00 00 00 00       	callq  165 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x165>
 165:	84 c0                	test   %al,%al
 167:	74 09                	je     172 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x172>
			{
				need_find = true;
 169:	c6 85 cb fe ff ff 01 	movb   $0x1,-0x135(%rbp)
 170:	eb 2c                	jmp    19e <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x19e>
			}
			else
			{
				//iが異なるidの要素を指している場合はfind()を実行する
				if(i->first != id)
 172:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
 179:	48 89 c7             	mov    %rax,%rdi
 17c:	e8 00 00 00 00       	callq  181 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x181>
 181:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
 188:	48 89 d6             	mov    %rdx,%rsi
 18b:	48 89 c7             	mov    %rax,%rdi
 18e:	e8 00 00 00 00       	callq  193 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x193>
 193:	84 c0                	test   %al,%al
 195:	74 07                	je     19e <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x19e>
				{
					need_find = true;
 197:	c6 85 cb fe ff ff 01 	movb   $0x1,-0x135(%rbp)
				}
			}
			if(need_find)
 19e:	80 bd cb fe ff ff 00 	cmpb   $0x0,-0x135(%rbp)
 1a5:	0f 84 6b 01 00 00    	je     316 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x316>
			{
				//idを検索
				i = paths.find(id);
 1ab:	48 8d 95 f0 fe ff ff 	lea    -0x110(%rbp),%rdx
 1b2:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
 1b9:	48 89 d6             	mov    %rdx,%rsi
 1bc:	48 89 c7             	mov    %rax,%rdi
 1bf:	e8 00 00 00 00       	callq  1c4 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x1c4>
 1c4:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
				//見つからなければ初期化したPathを追加
				if(i == paths.end())
 1cb:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
 1d2:	48 89 c7             	mov    %rax,%rdi
 1d5:	e8 00 00 00 00       	callq  1da <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x1da>
 1da:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 1de:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 1e2:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
 1e9:	48 89 d6             	mov    %rdx,%rsi
 1ec:	48 89 c7             	mov    %rax,%rdi
 1ef:	e8 00 00 00 00       	callq  1f4 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x1f4>
 1f4:	84 c0                	test   %al,%al
 1f6:	0f 84 1a 01 00 00    	je     316 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x316>
				{
					//追加された要素を指すイテレータと追加の成否のペア
					std::pair<std::map<std::string, Path>::iterator, bool> ins;
 1fc:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 200:	48 89 c7             	mov    %rax,%rdi
 203:	e8 00 00 00 00       	callq  208 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x208>
					//要素の追加
					ins = paths.insert(std::make_pair(id, Path()));
 208:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
 20f:	00 00 00 00 
 213:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
 21a:	00 00 00 00 
 21e:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
 225:	00 00 00 00 
 229:	48 c7 85 78 ff ff ff 	movq   $0x0,-0x88(%rbp)
 230:	00 00 00 00 
 234:	c7 45 80 00 00 00 00 	movl   $0x0,-0x80(%rbp)
 23b:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
 242:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
 249:	48 89 c7             	mov    %rax,%rdi
 24c:	e8 00 00 00 00       	callq  251 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x251>
 251:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
 255:	48 8d 95 60 ff ff ff 	lea    -0xa0(%rbp),%rdx
 25c:	48 8d 8d f0 fe ff ff 	lea    -0x110(%rbp),%rcx
 263:	48 89 ce             	mov    %rcx,%rsi
 266:	48 89 c7             	mov    %rax,%rdi
 269:	e8 00 00 00 00       	callq  26e <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x26e>
 26e:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 272:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
 279:	48 89 d6             	mov    %rdx,%rsi
 27c:	48 89 c7             	mov    %rax,%rdi
 27f:	e8 00 00 00 00       	callq  284 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x284>
 284:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
 28b:	48 89 95 38 ff ff ff 	mov    %rdx,-0xc8(%rbp)
 292:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
 299:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 29d:	48 89 d6             	mov    %rdx,%rsi
 2a0:	48 89 c7             	mov    %rax,%rdi
 2a3:	e8 00 00 00 00       	callq  2a8 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2a8>
 2a8:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
 2ac:	48 89 c7             	mov    %rax,%rdi
 2af:	e8 00 00 00 00       	callq  2b4 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2b4>
 2b4:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
 2bb:	48 89 c7             	mov    %rax,%rdi
 2be:	e8 00 00 00 00       	callq  2c3 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2c3>
					//findで見つからないことはわかっているので追加に成功した前提で継続
					//Pathの初期化
					ins.first->second.id = id;
 2c3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 2c7:	48 89 c7             	mov    %rax,%rdi
 2ca:	e8 00 00 00 00       	callq  2cf <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2cf>
 2cf:	48 8d 50 08          	lea    0x8(%rax),%rdx
 2d3:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 2da:	48 89 c6             	mov    %rax,%rsi
 2dd:	48 89 d7             	mov    %rdx,%rdi
 2e0:	e8 00 00 00 00       	callq  2e5 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2e5>
					ins.first->second.past_time_index = 0;
 2e5:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 2e9:	48 89 c7             	mov    %rax,%rdi
 2ec:	e8 00 00 00 00       	callq  2f1 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x2f1>
 2f1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
					ins.first->second.now_index = 0;
 2f8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 2fc:	48 89 c7             	mov    %rax,%rdi
 2ff:	e8 00 00 00 00       	callq  304 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x304>
 304:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
					//iに追加したデータを指すように設定する
					i = ins.first;
 30b:	48 8b 45 90          	mov    -0x70(%rbp),%rax
 30f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
 316:	48 8d 95 00 ff ff ff 	lea    -0x100(%rbp),%rdx
 31d:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
 324:	48 89 d6             	mov    %rdx,%rsi
 327:	48 89 c7             	mov    %rax,%rdi
 32a:	e8 00 00 00 00       	callq  32f <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x32f>
 32f:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
 336:	8b b5 cc fe ff ff    	mov    -0x134(%rbp),%esi
 33c:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
 343:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
 34a:	48 8d 8d 10 ff ff ff 	lea    -0xf0(%rbp),%rcx
 351:	4c 8d 45 90          	lea    -0x70(%rbp),%r8
 355:	48 89 bd 88 fe ff ff 	mov    %rdi,-0x178(%rbp)
 35c:	f2 0f 10 8d 88 fe ff 	movsd  -0x178(%rbp),%xmm1
 363:	ff 
 364:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
 36b:	f2 0f 10 85 88 fe ff 	movsd  -0x178(%rbp),%xmm0
 372:	ff 
 373:	4c 89 c7             	mov    %r8,%rdi
 376:	e8 00 00 00 00       	callq  37b <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x37b>
 37b:	48 8d 85 e0 fe ff ff 	lea    -0x120(%rbp),%rax
 382:	48 89 c7             	mov    %rax,%rdi
 385:	e8 00 00 00 00       	callq  38a <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x38a>
 38a:	48 8d 50 10          	lea    0x10(%rax),%rdx
 38e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 392:	48 89 c6             	mov    %rax,%rsi
 395:	48 89 d7             	mov    %rdx,%rdi
 398:	e8 00 00 00 00       	callq  39d <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x39d>
 39d:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 3a1:	48 89 c7             	mov    %rax,%rdi
 3a4:	e8 00 00 00 00       	callq  3a9 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3a9>
 3a9:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
 3b0:	48 89 c7             	mov    %rax,%rdi
 3b3:	e8 00 00 00 00       	callq  3b8 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3b8>
			std::string id;
			double lo;
			double la;
			int a;
			long long t;
			std::string ar;
 3b8:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
 3bf:	48 89 c7             	mov    %rax,%rdi
 3c2:	e8 00 00 00 00       	callq  3c7 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3c7>
					i = ins.first;
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
		}
 3c7:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 3ce:	48 89 c7             	mov    %rax,%rdi
 3d1:	e8 00 00 00 00       	callq  3d6 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3d6>
		
		//pathの追加先を指すイテレータ
		std::map<std::string, Path>::iterator i = paths.end();
		
		//クエリの結果の取得
		while(SQLITE_ROW == dba.step_select())
 3d6:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
 3dd:	48 89 c7             	mov    %rax,%rdi
 3e0:	e8 00 00 00 00       	callq  3e5 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x3e5>
 3e5:	83 f8 64             	cmp    $0x64,%eax
 3e8:	0f 94 c0             	sete   %al
 3eb:	84 c0                	test   %al,%al
 3ed:	0f 85 db fc ff ff    	jne    ce <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0xce>
		//DBのファイル名
		std::string dbfilename;
		//dayに従ってアクセスするDBのファイル名を設定する
		makeDBFileName(day, dbfilename);
		//DBに接続
		DBAccessor dba(dbfilename);
 3f3:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
 3fa:	48 89 c7             	mov    %rax,%rdi
 3fd:	e8 00 00 00 00       	callq  402 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x402>
					i = ins.first;
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
		}
 402:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
 409:	48 89 c7             	mov    %rax,%rdi
 40c:	e8 00 00 00 00       	callq  411 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x411>
 411:	e9 a3 00 00 00       	jmpq   4b9 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x4b9>
 416:	48 89 c3             	mov    %rax,%rbx
				if(i == paths.end())
				{
					//追加された要素を指すイテレータと追加の成否のペア
					std::pair<std::map<std::string, Path>::iterator, bool> ins;
					//要素の追加
					ins = paths.insert(std::make_pair(id, Path()));
 419:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
 41d:	48 89 c7             	mov    %rax,%rdi
 420:	e8 00 00 00 00       	callq  425 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x425>
 425:	eb 03                	jmp    42a <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x42a>
 427:	48 89 c3             	mov    %rax,%rbx
 42a:	48 8d 85 60 ff ff ff 	lea    -0xa0(%rbp),%rax
 431:	48 89 c7             	mov    %rax,%rdi
 434:	e8 00 00 00 00       	callq  439 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x439>
 439:	eb 28                	jmp    463 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x463>
 43b:	48 89 c3             	mov    %rax,%rbx
					//iに追加したデータを指すように設定する
					i = ins.first;
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
 43e:	48 8d 45 90          	lea    -0x70(%rbp),%rax
 442:	48 89 c7             	mov    %rax,%rdi
 445:	e8 00 00 00 00       	callq  44a <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x44a>
 44a:	eb 03                	jmp    44f <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x44f>
 44c:	48 89 c3             	mov    %rax,%rbx
 44f:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
 456:	48 89 c7             	mov    %rax,%rdi
 459:	e8 00 00 00 00       	callq  45e <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x45e>
 45e:	eb 03                	jmp    463 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x463>
 460:	48 89 c3             	mov    %rax,%rbx
			std::string id;
			double lo;
			double la;
			int a;
			long long t;
			std::string ar;
 463:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
 46a:	48 89 c7             	mov    %rax,%rdi
 46d:	e8 00 00 00 00       	callq  472 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x472>
 472:	eb 03                	jmp    477 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x477>
 474:	48 89 c3             	mov    %rax,%rbx
					i = ins.first;
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
		}
 477:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
 47e:	48 89 c7             	mov    %rax,%rdi
 481:	e8 00 00 00 00       	callq  486 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x486>
 486:	eb 03                	jmp    48b <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x48b>
 488:	48 89 c3             	mov    %rax,%rbx
		//DBのファイル名
		std::string dbfilename;
		//dayに従ってアクセスするDBのファイル名を設定する
		makeDBFileName(day, dbfilename);
		//DBに接続
		DBAccessor dba(dbfilename);
 48b:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
 492:	48 89 c7             	mov    %rax,%rdi
 495:	e8 00 00 00 00       	callq  49a <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x49a>
 49a:	eb 03                	jmp    49f <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x49f>
 49c:	48 89 c3             	mov    %rax,%rbx
					i = ins.first;
				}
			}
			//取得したデータの追加
			i->second.pathPoint.push_back(PathPoint(lo,la,a,t,ar));
		}
 49f:	48 8d 85 d0 fe ff ff 	lea    -0x130(%rbp),%rax
 4a6:	48 89 c7             	mov    %rax,%rdi
 4a9:	e8 00 00 00 00       	callq  4ae <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x4ae>
 4ae:	48 89 d8             	mov    %rbx,%rax
 4b1:	48 89 c7             	mov    %rax,%rdi
 4b4:	e8 00 00 00 00       	callq  4b9 <_ZN16TrackDataManager30getTrackDataFromDBToMapWithDayERSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEElllc+0x4b9>
	}
 4b9:	48 81 c4 88 01 00 00 	add    $0x188,%rsp
 4c0:	5b                   	pop    %rbx
 4c1:	5d                   	pop    %rbp
 4c2:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEED1Ev>:
   *  multimap; the distinction is made entirely in how the tree functions are
   *  called (*_unique versus *_equal, same as the standard).
  */
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli>:
			getTrackDataFromDBToMapWithDay(p, start, end, d);
		}
	}
	//OpenMPで並列化したgetTrackDataFromDBToMap()
	//mapからなるvectorに結果を格納する。vectorの要素が各スレッドに割り当てられる
	void getTrackDataFromDBToMapParallel(std::vector<std::map<std::string, Path> >& p, time_t start, time_t end, int thread_count = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x11>
  11:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  15:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  19:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  20:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  27:	44 89 85 6c ff ff ff 	mov    %r8d,-0x94(%rbp)
  2e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  35:	00 00 
  37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3b:	31 c0                	xor    %eax,%eax
	{
		//開始日を求める
		time_t start_day = TimeManager::today(start);
  3d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x4c>
  4c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		
		const int N = 16;
  50:	c7 45 94 10 00 00 00 	movl   $0x10,-0x6c(%rbp)
		char id_last_char[N] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
  57:	c6 45 d0 30          	movb   $0x30,-0x30(%rbp)
  5b:	c6 45 d1 31          	movb   $0x31,-0x2f(%rbp)
  5f:	c6 45 d2 32          	movb   $0x32,-0x2e(%rbp)
  63:	c6 45 d3 33          	movb   $0x33,-0x2d(%rbp)
  67:	c6 45 d4 34          	movb   $0x34,-0x2c(%rbp)
  6b:	c6 45 d5 35          	movb   $0x35,-0x2b(%rbp)
  6f:	c6 45 d6 36          	movb   $0x36,-0x2a(%rbp)
  73:	c6 45 d7 37          	movb   $0x37,-0x29(%rbp)
  77:	c6 45 d8 38          	movb   $0x38,-0x28(%rbp)
  7b:	c6 45 d9 39          	movb   $0x39,-0x27(%rbp)
  7f:	c6 45 da 61          	movb   $0x61,-0x26(%rbp)
  83:	c6 45 db 62          	movb   $0x62,-0x25(%rbp)
  87:	c6 45 dc 63          	movb   $0x63,-0x24(%rbp)
  8b:	c6 45 dd 64          	movb   $0x64,-0x23(%rbp)
  8f:	c6 45 de 65          	movb   $0x65,-0x22(%rbp)
  93:	c6 45 df 66          	movb   $0x66,-0x21(%rbp)
		
		//結果格納用のコンテナのクリア
		p.clear();
  97:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  9b:	48 89 c7             	mov    %rax,%rdi
  9e:	e8 00 00 00 00       	callq  a3 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xa3>
		//コンテナの各要素の初期化
		for(int i = 0; i < N; i++)
  a3:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  aa:	eb 2f                	jmp    db <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xdb>
		{
			p.push_back(std::map<std::string, Path>());
  ac:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  b0:	48 89 c7             	mov    %rax,%rdi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xb8>
  b8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  bc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  c0:	48 89 d6             	mov    %rdx,%rsi
  c3:	48 89 c7             	mov    %rax,%rdi
  c6:	e8 00 00 00 00       	callq  cb <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xcb>
  cb:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  cf:	48 89 c7             	mov    %rax,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xd7>
		char id_last_char[N] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
		
		//結果格納用のコンテナのクリア
		p.clear();
		//コンテナの各要素の初期化
		for(int i = 0; i < N; i++)
  d7:	83 45 90 01          	addl   $0x1,-0x70(%rbp)
  db:	83 7d 90 0f          	cmpl   $0xf,-0x70(%rbp)
  df:	7e cb                	jle    ac <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xac>
		{
			p.push_back(std::map<std::string, Path>());
		}
		
		//起動するスレッド数の設定
		if(thread_count <= 0)
  e1:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%rbp)
  e8:	7f 0e                	jg     f8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xf8>
		{
			omp_set_num_threads(omp_get_max_threads());
  ea:	e8 00 00 00 00       	callq  ef <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xef>
  ef:	89 c7                	mov    %eax,%edi
  f1:	e8 00 00 00 00       	callq  f6 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0xf6>
  f6:	eb 0d                	jmp    105 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x105>
		}
		else
		{
			omp_set_num_threads(thread_count);
  f8:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  fe:	89 c7                	mov    %eax,%edi
 100:	e8 00 00 00 00       	callq  105 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x105>
		}
		std::cout << "pragma omp parallel for start." << std::endl;
 105:	be 00 00 00 00       	mov    $0x0,%esi
 10a:	bf 00 00 00 00       	mov    $0x0,%edi
 10f:	e8 00 00 00 00       	callq  114 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x114>
 114:	be 00 00 00 00       	mov    $0x0,%esi
 119:	48 89 c7             	mov    %rax,%rdi
 11c:	e8 00 00 00 00       	callq  121 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x121>
		//これ以降が並列化
		#pragma omp parallel for
 121:	48 8b 45 88          	mov    -0x78(%rbp),%rax
 125:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
 129:	48 8b 45 80          	mov    -0x80(%rbp),%rax
 12d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
 131:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
 138:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
 13c:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
 143:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
 147:	48 8b 45 98          	mov    -0x68(%rbp),%rax
 14b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 14f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 153:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
 157:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 15b:	ba 00 00 00 00       	mov    $0x0,%edx
 160:	48 89 c6             	mov    %rax,%rsi
 163:	bf 00 00 00 00       	mov    $0x0,%edi
 168:	e8 00 00 00 00       	callq  16d <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x16d>
 16d:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 171:	48 89 c7             	mov    %rax,%rdi
 174:	e8 00 00 00 00       	callq  179 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x179>
 179:	e8 00 00 00 00       	callq  17e <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x17e>
 17e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
 182:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
 189:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
 18d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
 194:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
 198:	48 89 45 98          	mov    %rax,-0x68(%rbp)
			for(time_t d = start_day; d < end; d = TimeManager::nextDayTime(d))
			{
				getTrackDataFromDBToMapWithDay(p[i], start, end, d,id_last_char[i]);
			}
		}
		std::cout << "pragma omp parallel for end." << std::endl;
 19c:	be 00 00 00 00       	mov    $0x0,%esi
 1a1:	bf 00 00 00 00       	mov    $0x0,%edi
 1a6:	e8 00 00 00 00       	callq  1ab <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1ab>
 1ab:	be 00 00 00 00       	mov    $0x0,%esi
 1b0:	48 89 c7             	mov    %rax,%rdi
 1b3:	e8 00 00 00 00       	callq  1b8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1b8>
	}
 1b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1bc:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 1c3:	00 00 
 1c5:	74 21                	je     1e8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1e8>
 1c7:	eb 1a                	jmp    1e3 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1e3>
 1c9:	48 89 c3             	mov    %rax,%rbx
		//結果格納用のコンテナのクリア
		p.clear();
		//コンテナの各要素の初期化
		for(int i = 0; i < N; i++)
		{
			p.push_back(std::map<std::string, Path>());
 1cc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
 1d0:	48 89 c7             	mov    %rax,%rdi
 1d3:	e8 00 00 00 00       	callq  1d8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1d8>
 1d8:	48 89 d8             	mov    %rbx,%rax
 1db:	48 89 c7             	mov    %rax,%rdi
 1de:	e8 00 00 00 00       	callq  1e3 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1e3>
			{
				getTrackDataFromDBToMapWithDay(p[i], start, end, d,id_last_char[i]);
			}
		}
		std::cout << "pragma omp parallel for end." << std::endl;
	}
 1e3:	e8 00 00 00 00       	callq  1e8 <_ZN16TrackDataManager31getTrackDataFromDBToMapParallelERSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEESaIS9_EElli+0x1e8>
 1e8:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
 1ef:	5b                   	pop    %rbx
 1f0:	5d                   	pop    %rbp
 1f1:	c3                   	retq   

セクション .text._ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli の逆アセンブル:

0000000000000000 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli>:
	void getTrackDataFromDBParallel
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
   c:	e8 00 00 00 00       	callq  11 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x11>
  11:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  15:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  19:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  1d:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  21:	44 89 85 7c ff ff ff 	mov    %r8d,-0x84(%rbp)
			time_t start,
			time_t end,
			int thread_count = 0
		)
	{
		std::cout << "getTrackDataFromDBParallel() start." << std::endl;
  28:	be 00 00 00 00       	mov    $0x0,%esi
  2d:	bf 00 00 00 00       	mov    $0x0,%edi
  32:	e8 00 00 00 00       	callq  37 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x37>
  37:	be 00 00 00 00       	mov    $0x0,%esi
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x44>
		
		std::vector<std::map<std::string, Path> > mp;
  44:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x50>
		std::cout << "getTrackDataFromDBToMapParallel() start." << std::endl;
  50:	be 00 00 00 00       	mov    $0x0,%esi
  55:	bf 00 00 00 00       	mov    $0x0,%edi
  5a:	e8 00 00 00 00       	callq  5f <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x5f>
  5f:	be 00 00 00 00       	mov    $0x0,%esi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x6c>
		getTrackDataFromDBToMapParallel(mp, start, end, thread_count);
  6c:	8b bd 7c ff ff ff    	mov    -0x84(%rbp),%edi
  72:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
  76:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  7a:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  7e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  82:	41 89 f8             	mov    %edi,%r8d
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	callq  8d <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x8d>
		std::cout << "getTrackDataFromDBToMapParallel() end." << std::endl;
  8d:	be 00 00 00 00       	mov    $0x0,%esi
  92:	bf 00 00 00 00       	mov    $0x0,%edi
  97:	e8 00 00 00 00       	callq  9c <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x9c>
  9c:	be 00 00 00 00       	mov    $0x0,%esi
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xa9>
		
		std::cout << "reserve p start." << std::endl;
  a9:	be 00 00 00 00       	mov    $0x0,%esi
  ae:	bf 00 00 00 00       	mov    $0x0,%edi
  b3:	e8 00 00 00 00       	callq  b8 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xb8>
  b8:	be 00 00 00 00       	mov    $0x0,%esi
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	callq  c5 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xc5>
		//pの領域確保
		int mp_totalsize = 0;
  c5:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%rbp)
		int mp_size = mp.size();
  cc:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  d0:	48 89 c7             	mov    %rax,%rdi
  d3:	e8 00 00 00 00       	callq  d8 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xd8>
  d8:	89 45 ac             	mov    %eax,-0x54(%rbp)
		for(int i = 0; i < mp_size; i++)
  db:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%rbp)
  e2:	eb 2b                	jmp    10f <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x10f>
		{
			mp_totalsize += mp[i].size();
  e4:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  e7:	48 63 d0             	movslq %eax,%rdx
  ea:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  ee:	48 89 d6             	mov    %rdx,%rsi
  f1:	48 89 c7             	mov    %rax,%rdi
  f4:	e8 00 00 00 00       	callq  f9 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xf9>
  f9:	48 89 c7             	mov    %rax,%rdi
  fc:	e8 00 00 00 00       	callq  101 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x101>
 101:	89 c2                	mov    %eax,%edx
 103:	8b 45 a0             	mov    -0x60(%rbp),%eax
 106:	01 d0                	add    %edx,%eax
 108:	89 45 a0             	mov    %eax,-0x60(%rbp)
		
		std::cout << "reserve p start." << std::endl;
		//pの領域確保
		int mp_totalsize = 0;
		int mp_size = mp.size();
		for(int i = 0; i < mp_size; i++)
 10b:	83 45 a4 01          	addl   $0x1,-0x5c(%rbp)
 10f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
 112:	3b 45 ac             	cmp    -0x54(%rbp),%eax
 115:	7c cd                	jl     e4 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0xe4>
		{
			mp_totalsize += mp[i].size();
		}
		p.reserve(mp_totalsize);
 117:	8b 45 a0             	mov    -0x60(%rbp),%eax
 11a:	48 63 d0             	movslq %eax,%rdx
 11d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
 121:	48 89 d6             	mov    %rdx,%rsi
 124:	48 89 c7             	mov    %rax,%rdi
 127:	e8 00 00 00 00       	callq  12c <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x12c>
		std::cout << "reserve p end." << std::endl;
 12c:	be 00 00 00 00       	mov    $0x0,%esi
 131:	bf 00 00 00 00       	mov    $0x0,%edi
 136:	e8 00 00 00 00       	callq  13b <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x13b>
 13b:	be 00 00 00 00       	mov    $0x0,%esi
 140:	48 89 c7             	mov    %rax,%rdi
 143:	e8 00 00 00 00       	callq  148 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x148>
		
		std::cout << "copy mp to p start." << std::endl;
 148:	be 00 00 00 00       	mov    $0x0,%esi
 14d:	bf 00 00 00 00       	mov    $0x0,%edi
 152:	e8 00 00 00 00       	callq  157 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x157>
 157:	be 00 00 00 00       	mov    $0x0,%esi
 15c:	48 89 c7             	mov    %rax,%rdi
 15f:	e8 00 00 00 00       	callq  164 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x164>
		//mpからpへコピー
		for(int i = 0; i < mp_size; i++)
 164:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
 16b:	e9 9b 00 00 00       	jmpq   20b <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x20b>
		{
			std::map<std::string, Path>::iterator j;
 170:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
 174:	48 89 c7             	mov    %rax,%rdi
 177:	e8 00 00 00 00       	callq  17c <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x17c>
			
			for(j = mp[i].begin(); j != mp[i].end(); j++)
 17c:	8b 45 a8             	mov    -0x58(%rbp),%eax
 17f:	48 63 d0             	movslq %eax,%rdx
 182:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 186:	48 89 d6             	mov    %rdx,%rsi
 189:	48 89 c7             	mov    %rax,%rdi
 18c:	e8 00 00 00 00       	callq  191 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x191>
 191:	48 89 c7             	mov    %rax,%rdi
 194:	e8 00 00 00 00       	callq  199 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x199>
 199:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
 19d:	eb 30                	jmp    1cf <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1cf>
			{
				p.push_back(j->second);
 19f:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
 1a3:	48 89 c7             	mov    %rax,%rdi
 1a6:	e8 00 00 00 00       	callq  1ab <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1ab>
 1ab:	48 8d 50 08          	lea    0x8(%rax),%rdx
 1af:	48 8b 45 90          	mov    -0x70(%rbp),%rax
 1b3:	48 89 d6             	mov    %rdx,%rsi
 1b6:	48 89 c7             	mov    %rax,%rdi
 1b9:	e8 00 00 00 00       	callq  1be <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1be>
		//mpからpへコピー
		for(int i = 0; i < mp_size; i++)
		{
			std::map<std::string, Path>::iterator j;
			
			for(j = mp[i].begin(); j != mp[i].end(); j++)
 1be:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
 1c2:	be 00 00 00 00       	mov    $0x0,%esi
 1c7:	48 89 c7             	mov    %rax,%rdi
 1ca:	e8 00 00 00 00       	callq  1cf <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1cf>
 1cf:	8b 45 a8             	mov    -0x58(%rbp),%eax
 1d2:	48 63 d0             	movslq %eax,%rdx
 1d5:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 1d9:	48 89 d6             	mov    %rdx,%rsi
 1dc:	48 89 c7             	mov    %rax,%rdi
 1df:	e8 00 00 00 00       	callq  1e4 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1e4>
 1e4:	48 89 c7             	mov    %rax,%rdi
 1e7:	e8 00 00 00 00       	callq  1ec <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x1ec>
 1ec:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
 1f0:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
 1f4:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
 1f8:	48 89 d6             	mov    %rdx,%rsi
 1fb:	48 89 c7             	mov    %rax,%rdi
 1fe:	e8 00 00 00 00       	callq  203 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x203>
 203:	84 c0                	test   %al,%al
 205:	75 98                	jne    19f <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x19f>
		p.reserve(mp_totalsize);
		std::cout << "reserve p end." << std::endl;
		
		std::cout << "copy mp to p start." << std::endl;
		//mpからpへコピー
		for(int i = 0; i < mp_size; i++)
 207:	83 45 a8 01          	addl   $0x1,-0x58(%rbp)
 20b:	8b 45 a8             	mov    -0x58(%rbp),%eax
 20e:	3b 45 ac             	cmp    -0x54(%rbp),%eax
 211:	0f 8c 59 ff ff ff    	jl     170 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x170>
			for(j = mp[i].begin(); j != mp[i].end(); j++)
			{
				p.push_back(j->second);
			}
		}
		std::cout << "copy mp to p end." << std::endl;
 217:	be 00 00 00 00       	mov    $0x0,%esi
 21c:	bf 00 00 00 00       	mov    $0x0,%edi
 221:	e8 00 00 00 00       	callq  226 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x226>
 226:	be 00 00 00 00       	mov    $0x0,%esi
 22b:	48 89 c7             	mov    %rax,%rdi
 22e:	e8 00 00 00 00       	callq  233 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x233>
		std::cout << "getTrackDataFromDBParallel() end." << std::endl;
 233:	be 00 00 00 00       	mov    $0x0,%esi
 238:	bf 00 00 00 00       	mov    $0x0,%edi
 23d:	e8 00 00 00 00       	callq  242 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x242>
 242:	be 00 00 00 00       	mov    $0x0,%esi
 247:	48 89 c7             	mov    %rax,%rdi
 24a:	e8 00 00 00 00       	callq  24f <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x24f>
 24f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 253:	48 89 c7             	mov    %rax,%rdi
 256:	e8 00 00 00 00       	callq  25b <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x25b>
 25b:	eb 1a                	jmp    277 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x277>
 25d:	48 89 c3             	mov    %rax,%rbx
 260:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
 264:	48 89 c7             	mov    %rax,%rdi
 267:	e8 00 00 00 00       	callq  26c <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x26c>
 26c:	48 89 d8             	mov    %rbx,%rax
 26f:	48 89 c7             	mov    %rax,%rdi
 272:	e8 00 00 00 00       	callq  277 <_ZN16TrackDataManager26getTrackDataFromDBParallelERSt6vectorI4PathSaIS1_EElli+0x277>
	}
 277:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
 27e:	5b                   	pop    %rbx
 27f:	5d                   	pop    %rbp
 280:	c3                   	retq   

セクション .text._ZN14TimeSeparation13inTheIntervalEjl の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation13inTheIntervalEjl>:
	time_t max;
	time_t width;
	std::vector< time_t > timeSequence;
	unsigned int currentIndex;
	//指定した区間に時刻tが含まれているか判定する
	bool inTheInterval(unsigned int i, time_t t)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation13inTheIntervalEjl+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{
		return (timeSequence[i] <= t) && (t < timeSequence[i + 1]);
  18:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  1f:	48 83 c2 18          	add    $0x18,%rdx
  23:	48 89 c6             	mov    %rax,%rsi
  26:	48 89 d7             	mov    %rdx,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZN14TimeSeparation13inTheIntervalEjl+0x2e>
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  35:	7f 2b                	jg     62 <_ZN14TimeSeparation13inTheIntervalEjl+0x62>
  37:	8b 45 f4             	mov    -0xc(%rbp),%eax
  3a:	83 c0 01             	add    $0x1,%eax
  3d:	89 c0                	mov    %eax,%eax
  3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  43:	48 83 c2 18          	add    $0x18,%rdx
  47:	48 89 c6             	mov    %rax,%rsi
  4a:	48 89 d7             	mov    %rdx,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZN14TimeSeparation13inTheIntervalEjl+0x52>
  52:	48 8b 00             	mov    (%rax),%rax
  55:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  59:	7e 07                	jle    62 <_ZN14TimeSeparation13inTheIntervalEjl+0x62>
  5b:	b8 01 00 00 00       	mov    $0x1,%eax
  60:	eb 05                	jmp    67 <_ZN14TimeSeparation13inTheIntervalEjl+0x67>
  62:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  67:	c9                   	leaveq 
  68:	c3                   	retq   

セクション .text._ZN14TimeSeparation12getNextIndexEv の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation12getNextIndexEv>:
	//currentの次の区間のインデックスを取得する
	unsigned int getNextIndex()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation12getNextIndexEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
		return getNextIndex(currentIndex);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	8b 50 30             	mov    0x30(%rax),%edx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	89 d6                	mov    %edx,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN14TimeSeparation12getNextIndexEv+0x26>
	}
  26:	c9                   	leaveq 
  27:	c3                   	retq   

セクション .text._ZN14TimeSeparation12getNextIndexEj の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation12getNextIndexEj>:
	//次の区間のインデックスを取得する
	//currentが末尾の区間の場合は最初の区間のインデックスを取得する
	unsigned int getNextIndex(unsigned int i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN14TimeSeparation12getNextIndexEj+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	{
		if(i + 1 >= timeSequence.size() - 1)
  15:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  18:	83 c0 01             	add    $0x1,%eax
  1b:	89 c3                	mov    %eax,%ebx
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 83 c0 18          	add    $0x18,%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZN14TimeSeparation12getNextIndexEj+0x2d>
  2d:	48 83 e8 01          	sub    $0x1,%rax
  31:	48 39 c3             	cmp    %rax,%rbx
  34:	0f 93 c0             	setae  %al
  37:	84 c0                	test   %al,%al
  39:	74 07                	je     42 <_ZN14TimeSeparation12getNextIndexEj+0x42>
		{
			return 0;
  3b:	b8 00 00 00 00       	mov    $0x0,%eax
  40:	eb 06                	jmp    48 <_ZN14TimeSeparation12getNextIndexEj+0x48>
		}
		return i + 1;
  42:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  45:	83 c0 01             	add    $0x1,%eax
	}
  48:	48 83 c4 18          	add    $0x18,%rsp
  4c:	5b                   	pop    %rbx
  4d:	5d                   	pop    %rbp
  4e:	c3                   	retq   

セクション .text._ZN14TimeSeparation16initTimeSequenceEv の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation16initTimeSequenceEv>:
	//開始・終了時刻を区間幅からtimeSequenceを初期化する
	void initTimeSequence()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation16initTimeSequenceEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
		timeSequence.push_back(min);
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  19:	48 83 c2 18          	add    $0x18,%rdx
  1d:	48 89 c6             	mov    %rax,%rsi
  20:	48 89 d7             	mov    %rdx,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN14TimeSeparation16initTimeSequenceEv+0x28>
		for(time_t t = min + width; t < max - width; t += width)
  28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2c:	48 8b 10             	mov    (%rax),%rdx
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 40 10          	mov    0x10(%rax),%rax
  37:	48 01 d0             	add    %rdx,%rax
  3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  3e:	eb 2a                	jmp    6a <_ZN14TimeSeparation16initTimeSequenceEv+0x6a>
		{
			timeSequence.push_back(t);
  40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  44:	48 8d 50 18          	lea    0x18(%rax),%rdx
  48:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  4c:	48 89 c6             	mov    %rax,%rsi
  4f:	48 89 d7             	mov    %rdx,%rdi
  52:	e8 00 00 00 00       	callq  57 <_ZN14TimeSeparation16initTimeSequenceEv+0x57>
	}
	//開始・終了時刻を区間幅からtimeSequenceを初期化する
	void initTimeSequence()
	{
		timeSequence.push_back(min);
		for(time_t t = min + width; t < max - width; t += width)
  57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  63:	48 01 d0             	add    %rdx,%rax
  66:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6e:	48 8b 50 08          	mov    0x8(%rax),%rdx
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	48 8b 40 10          	mov    0x10(%rax),%rax
  7a:	48 29 c2             	sub    %rax,%rdx
  7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  81:	48 39 c2             	cmp    %rax,%rdx
  84:	7f ba                	jg     40 <_ZN14TimeSeparation16initTimeSequenceEv+0x40>
		{
			timeSequence.push_back(t);
		}
		timeSequence.push_back(max);
  86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8a:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  92:	48 83 c0 18          	add    $0x18,%rax
  96:	48 89 d6             	mov    %rdx,%rsi
  99:	48 89 c7             	mov    %rax,%rdi
  9c:	e8 00 00 00 00       	callq  a1 <_ZN14TimeSeparation16initTimeSequenceEv+0xa1>
	}
  a1:	c9                   	leaveq 
  a2:	c3                   	retq   

セクション .text._ZN14TimeSeparationC2Elll の逆アセンブル:

0000000000000000 <_ZN14TimeSeparationC1Elll>:
		current = 0,
		next = 1
	};
	//コンストラクタ
	//デフォルト引数はデフォルトコンストラクタとするための仮の値で意味は無い
	TimeSeparation(time_t _min = 0, time_t _max = 10, time_t _width = 100):min(_min), max(_max), width(_width), timeSequence()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN14TimeSeparationC1Elll+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  22:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  26:	48 89 10             	mov    %rdx,(%rax)
  29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  31:	48 89 50 08          	mov    %rdx,0x8(%rax)
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  3d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 83 c0 18          	add    $0x18,%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN14TimeSeparationC1Elll+0x51>
	{
		initTimeSequence();
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	48 89 c7             	mov    %rax,%rdi
  58:	e8 00 00 00 00       	callq  5d <_ZN14TimeSeparationC1Elll+0x5d>
		currentIndex = 0;
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%rax)
  68:	eb 1e                	jmp    88 <_ZN14TimeSeparationC1Elll+0x88>
  6a:	48 89 c3             	mov    %rax,%rbx
		current = 0,
		next = 1
	};
	//コンストラクタ
	//デフォルト引数はデフォルトコンストラクタとするための仮の値で意味は無い
	TimeSeparation(time_t _min = 0, time_t _max = 10, time_t _width = 100):min(_min), max(_max), width(_width), timeSequence()
  6d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  71:	48 83 c0 18          	add    $0x18,%rax
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZN14TimeSeparationC1Elll+0x7d>
  7d:	48 89 d8             	mov    %rbx,%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZN14TimeSeparationC1Elll+0x88>
	{
		initTimeSequence();
		currentIndex = 0;
	}
  88:	48 83 c4 28          	add    $0x28,%rsp
  8c:	5b                   	pop    %rbx
  8d:	5d                   	pop    %rbp
  8e:	c3                   	retq   

セクション .text._ZN14TimeSeparation14inNextIntervalEl の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation14inNextIntervalEl>:
	bool inCurrentInterval(time_t t)
	{
		return inTheInterval(currentIndex, t);
	}
	//次の区間に含まれているか判定する
	bool inNextInterval(time_t t)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation14inNextIntervalEl+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
		return inTheInterval(getNextIndex(currentIndex), t);
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	8b 50 30             	mov    0x30(%rax),%edx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	89 d6                	mov    %edx,%esi
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZN14TimeSeparation14inNextIntervalEl+0x2a>
  2a:	89 c1                	mov    %eax,%ecx
  2c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	89 ce                	mov    %ecx,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZN14TimeSeparation14inNextIntervalEl+0x3e>
	}
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_ の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_>:
	//指定した区間の開始・終了時刻を取得する
	void getIntervalStatus(Position p,time_t& start, time_t& end)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	89 75 f4             	mov    %esi,-0xc(%rbp)
  14:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  18:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
	{
		switch(p)
  1c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  1f:	85 c0                	test   %eax,%eax
  21:	74 0a                	je     2d <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x2d>
  23:	83 f8 01             	cmp    $0x1,%eax
  26:	74 72                	je     9a <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x9a>
  28:	e9 e3 00 00 00       	jmpq   110 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x110>
		{
		case Position::current:
			std::cout << "TimeSeparation::getIntervalStatus() current." << std::endl;
  2d:	be 00 00 00 00       	mov    $0x0,%esi
  32:	bf 00 00 00 00       	mov    $0x0,%edi
  37:	e8 00 00 00 00       	callq  3c <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x3c>
  3c:	be 00 00 00 00       	mov    $0x0,%esi
  41:	48 89 c7             	mov    %rax,%rdi
  44:	e8 00 00 00 00       	callq  49 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x49>
			start = timeSequence[currentIndex    ];
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	8b 40 30             	mov    0x30(%rax),%eax
  50:	89 c0                	mov    %eax,%eax
  52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  56:	48 83 c2 18          	add    $0x18,%rdx
  5a:	48 89 c6             	mov    %rax,%rsi
  5d:	48 89 d7             	mov    %rdx,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x65>
  65:	48 8b 10             	mov    (%rax),%rdx
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 89 10             	mov    %rdx,(%rax)
			end   = timeSequence[currentIndex + 1];
  6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  73:	8b 40 30             	mov    0x30(%rax),%eax
  76:	83 c0 01             	add    $0x1,%eax
  79:	89 c0                	mov    %eax,%eax
  7b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  7f:	48 83 c2 18          	add    $0x18,%rdx
  83:	48 89 c6             	mov    %rax,%rsi
  86:	48 89 d7             	mov    %rdx,%rdi
  89:	e8 00 00 00 00       	callq  8e <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x8e>
  8e:	48 8b 10             	mov    (%rax),%rdx
  91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  95:	48 89 10             	mov    %rdx,(%rax)
			break;
  98:	eb 76                	jmp    110 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x110>
		case Position::next:
			std::cout << "TimeSeparation::getIntervalStatus() next." << std::endl;
  9a:	be 00 00 00 00       	mov    $0x0,%esi
  9f:	bf 00 00 00 00       	mov    $0x0,%edi
  a4:	e8 00 00 00 00       	callq  a9 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xa9>
  a9:	be 00 00 00 00       	mov    $0x0,%esi
  ae:	48 89 c7             	mov    %rax,%rdi
  b1:	e8 00 00 00 00       	callq  b6 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xb6>
			start = timeSequence[getNextIndex()    ];
  b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  ba:	48 89 c7             	mov    %rax,%rdi
  bd:	e8 00 00 00 00       	callq  c2 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xc2>
  c2:	89 c0                	mov    %eax,%eax
  c4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  c8:	48 83 c2 18          	add    $0x18,%rdx
  cc:	48 89 c6             	mov    %rax,%rsi
  cf:	48 89 d7             	mov    %rdx,%rdi
  d2:	e8 00 00 00 00       	callq  d7 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xd7>
  d7:	48 8b 10             	mov    (%rax),%rdx
  da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  de:	48 89 10             	mov    %rdx,(%rax)
			end   = timeSequence[getNextIndex() + 1];
  e1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  e5:	48 89 c7             	mov    %rax,%rdi
  e8:	e8 00 00 00 00       	callq  ed <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0xed>
  ed:	83 c0 01             	add    $0x1,%eax
  f0:	89 c0                	mov    %eax,%eax
  f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f6:	48 83 c2 18          	add    $0x18,%rdx
  fa:	48 89 c6             	mov    %rax,%rsi
  fd:	48 89 d7             	mov    %rdx,%rdi
 100:	e8 00 00 00 00       	callq  105 <_ZN14TimeSeparation17getIntervalStatusENS_8PositionERlS1_+0x105>
 105:	48 8b 10             	mov    (%rax),%rdx
 108:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 10c:	48 89 10             	mov    %rdx,(%rax)
			break;
 10f:	90                   	nop
		}
	}
 110:	c9                   	leaveq 
 111:	c3                   	retq   

セクション .text._ZN14TimeSeparation15setNextIntervalEv の逆アセンブル:

0000000000000000 <_ZN14TimeSeparation15setNextIntervalEv>:
	void setNextInterval()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparation15setNextIntervalEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{
		currentIndex = getNextIndex();
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZN14TimeSeparation15setNextIntervalEv+0x1d>
  1d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  21:	89 42 30             	mov    %eax,0x30(%rdx)
	}
  24:	c9                   	leaveq 
  25:	c3                   	retq   

セクション .text._ZN14TimeSeparationD2Ev の逆アセンブル:

0000000000000000 <_ZN14TimeSeparationD1Ev>:
#pragma once

#include <vector>


class TimeSeparation
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparationD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 18          	add    $0x18,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN14TimeSeparationD1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZN9PathPointC2EOS_ の逆アセンブル:

0000000000000000 <_ZN9PathPointC1EOS_>:

#include <vector>
#include <string>
#include <ctime>

struct PathPoint
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9PathPointC1EOS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  20:	48 89 02             	mov    %rax,(%rdx)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8b 40 08          	mov    0x8(%rax),%rax
  2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2f:	48 89 42 08          	mov    %rax,0x8(%rdx)
  33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  37:	8b 50 10             	mov    0x10(%rax),%edx
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	89 50 10             	mov    %edx,0x10(%rax)
  41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  45:	48 8b 50 18          	mov    0x18(%rax),%rdx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  55:	48 8d 50 20          	lea    0x20(%rax),%rdx
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 83 c0 20          	add    $0x20,%rax
  61:	48 89 d6             	mov    %rdx,%rsi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN9PathPointC1EOS_+0x6c>
  6c:	c9                   	leaveq 
  6d:	c3                   	retq   

セクション .text._ZN9__gnu_cxx14__alloc_traitsISaIlEE27_S_propagate_on_move_assignEv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx14__alloc_traitsISaIlEE27_S_propagate_on_move_assignEv>:
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZN9__gnu_cxx14__alloc_traitsISaIlEE27_S_propagate_on_move_assignEv+0x9>
    { return _Base_type::propagate_on_container_move_assignment::value; }
   9:	b8 01 00 00 00       	mov    $0x1,%eax
   e:	5d                   	pop    %rbp
   f:	c3                   	retq   

セクション .text._ZN14TimeSeparationaSEOS_ の逆アセンブル:

0000000000000000 <_ZN14TimeSeparationaSEOS_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN14TimeSeparationaSEOS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8b 50 08          	mov    0x8(%rax),%rdx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  37:	48 8b 50 10          	mov    0x10(%rax),%rdx
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	48 89 50 10          	mov    %rdx,0x10(%rax)
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	48 83 c0 18          	add    $0x18,%rax
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZN14TimeSeparationaSEOS_+0x5e>
  5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  62:	8b 50 30             	mov    0x30(%rax),%edx
  65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  69:	89 50 30             	mov    %edx,0x30(%rax)
  6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  70:	c9                   	leaveq 
  71:	c3                   	retq   

セクション .text._ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRNSt6thread2idEEONSt16remove_referenceIT_E4typeEOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapINSt6thread2idEEvRT_S3_ の逆アセンブル:

0000000000000000 <_ZSt4swapINSt6thread2idEEvRT_S3_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapINSt6thread2idEEvRT_S3_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapINSt6thread2idEEvRT_S3_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapINSt6thread2idEEvRT_S3_+0x34>
  34:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  38:	48 8b 00             	mov    (%rax),%rax
  3b:	48 89 02             	mov    %rax,(%rdx)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapINSt6thread2idEEvRT_S3_+0x4a>
  4a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4e:	48 8b 00             	mov    (%rax),%rax
  51:	48 89 02             	mov    %rax,(%rdx)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev>:
	}

      // Throw bad_weak_ptr when __r._M_get_use_count() == 0.
      explicit __shared_count(const __weak_count<_Lp>& __r);

      ~__shared_count() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (_M_pi != nullptr)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 85 c0             	test   %rax,%rax
  1b:	74 0f                	je     2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x2c>
	  _M_pi->_M_release();
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x2c>
      }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt10lock_guardISt5mutexEC2ERS0_ の逆アセンブル:

0000000000000000 <_ZNSt10lock_guardISt5mutexEC1ERS0_>:
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10lock_guardISt5mutexEC1ERS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
      { _M_device.lock(); }
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZNSt10lock_guardISt5mutexEC1ERS0_+0x2f>
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZNSt10lock_guardISt5mutexED2Ev の逆アセンブル:

0000000000000000 <_ZNSt10lock_guardISt5mutexED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10lock_guardISt5mutexED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_device.unlock(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNSt10lock_guardISt5mutexED1Ev+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERS3_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERS4_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERS4_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERS4_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS5_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      // Destructor.
      ~unique_ptr() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	auto& __ptr = std::get<0>(_M_t);
  12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  16:	48 89 c7             	mov    %rax,%rdi
  19:	e8 00 00 00 00       	callq  1e <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev+0x1e>
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
  29:	48 85 c0             	test   %rax,%rax
  2c:	74 1e                	je     4c <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev+0x4c>
	  get_deleter()(__ptr);
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8b 18             	mov    (%rax),%rbx
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev+0x41>
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEED1Ev+0x4c>
	__ptr = pointer();
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  57:	48 83 c4 28          	add    $0x28,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	retq   

セクション .text._ZNSt11unique_lockISt5mutexEC2ERS0_ の逆アセンブル:

0000000000000000 <_ZNSt11unique_lockISt5mutexEC1ERS0_>:

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      explicit unique_lock(mutex_type& __m)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11unique_lockISt5mutexEC1ERS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_device(&__m), _M_owns(false)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	c6 40 08 00          	movb   $0x0,0x8(%rax)
      {
	lock();
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt11unique_lockISt5mutexEC1ERS0_+0x34>
	_M_owns = true;
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	c6 40 08 01          	movb   $0x1,0x8(%rax)
      }
  3c:	c9                   	leaveq 
  3d:	c3                   	retq   

セクション .text._ZNSt11unique_lockISt5mutexED2Ev の逆アセンブル:

0000000000000000 <_ZNSt11unique_lockISt5mutexED1Ev>:
	unique_lock(mutex_type& __m,
		    const chrono::duration<_Rep, _Period>& __rtime)
	: _M_device(&__m), _M_owns(_M_device->try_lock_for(__rtime))
	{ }

      ~unique_lock()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11unique_lockISt5mutexED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (_M_owns)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  19:	84 c0                	test   %al,%al
  1b:	74 0c                	je     29 <_ZNSt11unique_lockISt5mutexED1Ev+0x29>
	  unlock();
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt11unique_lockISt5mutexED1Ev+0x29>
      }
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_ の逆アセンブル:

0000000000000000 <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_>:
    void
    wait(unique_lock<mutex>& __lock);

    template<typename _Predicate>
      void
      wait(unique_lock<mutex>& __lock, _Predicate __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
      {
	while (!__p())
  19:	eb 13                	jmp    2e <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_+0x2e>
	  wait(__lock);
  1b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 89 d6             	mov    %rdx,%rsi
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_+0x2e>

    template<typename _Predicate>
      void
      wait(unique_lock<mutex>& __lock, _Predicate __p)
      {
	while (!__p())
  2e:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_+0x3a>
  3a:	83 f0 01             	xor    $0x1,%eax
  3d:	84 c0                	test   %al,%al
  3f:	75 da                	jne    1b <_ZNSt18condition_variable4waitIZNSt13__future_base11_State_base4waitEvEUlvE_EEvRSt11unique_lockISt5mutexET_+0x1b>
	  wait(__lock);
      }
  41:	c9                   	leaveq 
  42:	c3                   	retq   

セクション .text._ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEdeEv の逆アセンブル:

0000000000000000 <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEdeEv>:
	return *this;
      }

      // Observers.
      typename add_lvalue_reference<element_type>::type
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
	return *get();
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEdeEv+0x1d>
      }
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3refISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEESt17reference_wrapperIT_ERS9_ の逆アセンブル:

0000000000000000 <_ZSt3refISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEESt17reference_wrapperIT_ERS9_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3refISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEESt17reference_wrapperIT_ERS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt3refISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEESt17reference_wrapperIT_ERS9_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZSt3refIbESt17reference_wrapperIT_ERS1_ の逆アセンブル:

0000000000000000 <_ZSt3refIbESt17reference_wrapperIT_ERS1_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3refIbESt17reference_wrapperIT_ERS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt3refIbESt17reference_wrapperIT_ERS1_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZSt7forwardIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEOT_RNSt16remove_referenceISD_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEOT_RNSt16remove_referenceISD_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEOT_RNSt16remove_referenceISD_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardIKPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS4_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIKPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIKPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS4_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEEOT_RNSt16remove_referenceISA_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEEOT_RNSt16remove_referenceISA_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEEOT_RNSt16remove_referenceISA_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardISt17reference_wrapperIbEEOT_RNSt16remove_referenceIS2_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt17reference_wrapperIbEEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt17reference_wrapperIbEEOT_RNSt16remove_referenceIS2_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EE7_M_headERS2_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EE7_M_headERS2_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EE7_M_headERS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEE7_M_headERS2_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEE7_M_headERS2_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEE7_M_headERS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEE7_M_headERS2_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EEC2IS1_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EEC1IS1_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EEC1IS1_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EEC1IS1_EEOT_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt10_Head_baseILm3ESt17reference_wrapperIbELb0EEC1IS1_EEOT_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EE7_M_headERSA_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EE7_M_headERSA_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EE7_M_headERSA_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEE7_M_headERSB_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEE7_M_headERSB_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEE7_M_headERSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEE7_M_headERSB_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EEC2IS9_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EEC1IS9_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EEC1IS9_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EEC1IS9_EEOT_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt10_Head_baseILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEELb0EEC1IS9_EEOT_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EE7_M_headERS3_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEE7_M_headERSD_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEE7_M_headERSD_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEE7_M_headERSD_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 10          	add    $0x10,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEE7_M_headERSD_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZSt7forwardIPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIPNSt13__future_base11_State_baseEEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EE7_M_headERSF_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EE7_M_headERSF_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EE7_M_headERSF_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE7_M_headERSJ_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE7_M_headERSJ_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE7_M_headERSJ_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 18          	add    $0x18,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE7_M_headERSJ_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZSt7forwardISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEOT_RNSt16remove_referenceISF_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEOT_RNSt16remove_referenceISF_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEOT_RNSt16remove_referenceISF_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EEC2ISE_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EEC1ISE_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EEC1ISE_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEELb0EEC1ISE_EEOT_+0x21>
  21:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  25:	48 8b 50 08          	mov    0x8(%rax),%rdx
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 89 01             	mov    %rax,(%rcx)
  2f:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_>:
  extern "C" void __once_proxy(void);

  /// call_once
  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 78          	sub    $0x78,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x12>
  12:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  16:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  1a:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  1e:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  22:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
    {
#ifdef _GLIBCXX_HAVE_TLS
      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
          std::forward<_Args>(__args)...);
  29:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x38>
  38:	49 89 c5             	mov    %rax,%r13
  3b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  3f:	48 89 c7             	mov    %rax,%rdi
  42:	e8 00 00 00 00       	callq  47 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x47>
  47:	49 89 c4             	mov    %rax,%r12
  4a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x56>
  56:	48 89 c3             	mov    %rax,%rbx
  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {
#ifdef _GLIBCXX_HAVE_TLS
      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
  59:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x65>
  65:	48 89 c6             	mov    %rax,%rsi
          std::forward<_Args>(__args)...);
  68:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  6c:	4d 89 e8             	mov    %r13,%r8
  6f:	4c 89 e1             	mov    %r12,%rcx
  72:	48 89 da             	mov    %rbx,%rdx
  75:	48 89 c7             	mov    %rax,%rdi
  78:	e8 00 00 00 00       	callq  7d <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x7d>
      __once_callable = &__bound_functor;
  7d:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 84 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x84>
  84:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  88:	64 48 89 10          	mov    %rdx,%fs:(%rax)
      __once_call = &__once_call_impl<decltype(__bound_functor)>;
  8c:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 93 <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0x93>
  93:	64 48 c7 00 00 00 00 	movq   $0x0,%fs:(%rax)
  9a:	00 
          std::forward<_Args>(__args)...);
      __once_functor = [&]() { __callable(); };
      __set_once_functor_lock_ptr(&__functor_lock);
#endif

      int __e = __gthread_once(&(__once._M_once), &__once_proxy);
  9b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  9f:	be 00 00 00 00       	mov    $0x0,%esi
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	callq  ac <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0xac>
  ac:	89 45 ac             	mov    %eax,-0x54(%rbp)
#ifndef _GLIBCXX_HAVE_TLS
      if (__functor_lock)
        __set_once_functor_lock_ptr(0);
#endif

      if (__e)
  af:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  b3:	74 0a                	je     bf <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0xbf>
	__throw_system_error(__e);
  b5:	8b 45 ac             	mov    -0x54(%rbp),%eax
  b8:	89 c7                	mov    %eax,%edi
  ba:	e8 00 00 00 00       	callq  bf <_ZSt9call_onceIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEEvRSt9once_flagOT_DpOT0_+0xbf>
    }
  bf:	48 83 c4 78          	add    $0x78,%rsp
  c3:	5b                   	pop    %rbx
  c4:	41 5c                	pop    %r12
  c6:	41 5d                	pop    %r13
  c8:	5d                   	pop    %rbp
  c9:	c3                   	retq   

セクション .text._ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEcvbEv の逆アセンブル:

0000000000000000 <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEcvbEv>:

      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }

      explicit operator bool() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEcvbEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return get() == pointer() ? false : true; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEcvbEv+0x1d>
  1d:	48 85 c0             	test   %rax,%rax
  20:	0f 95 c0             	setne  %al
  23:	c9                   	leaveq 
  24:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_tailERS4_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_tailERS4_>:

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_tailERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_tailERS3_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_tailERS3_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_tailERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE4swapERS3_ の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE4swapERS3_>:
	if (__p != pointer())
	  get_deleter()(__p);
      }

      void
      swap(unique_ptr& __u) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE4swapERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	using std::swap;
	swap(_M_t, __u._M_t);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE4swapERS3_+0x28>
      }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv の逆アセンブル:

0000000000000000 <_ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv+0x21>
  21:	84 c0                	test   %al,%al
  23:	74 05                	je     2a <_ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv+0x2a>
	__throw_bad_function_call();
  25:	e8 00 00 00 00       	callq  2a <_ZNKSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEclEv+0x2a>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2e:	48 8b 40 18          	mov    0x18(%rax),%rax
  32:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3a:	48 89 ce             	mov    %rcx,%rsi
  3d:	48 89 d7             	mov    %rdx,%rdi
  40:	ff d0                	callq  *%rax
    }
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	c9                   	leaveq 
  47:	c3                   	retq   

セクション .text._ZSt7forwardINSt13__future_base12_Result_base8_DeleterEEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardINSt13__future_base12_Result_base8_DeleterEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardINSt13__future_base12_Result_base8_DeleterEEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC2IS2_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC1IS2_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC1IS2_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Head(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EEC1IS2_EEOT_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC2IS2_IEvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC1IS2_IEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC1IS2_IEvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC1IS2_IEvEEOT_DpOT0_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC1IS2_IEvEEOT_DpOT0_+0x2d>
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEEC1IS2_IEvEEOT_DpOT0_+0x3f>
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

セクション .text._ZNSt14__basic_futureIvEC2ERKSt10shared_ptrINSt13__future_base11_State_baseEE の逆アセンブル:

0000000000000000 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE>:
        _M_state.swap(__that._M_state);
      }

      // Construction of a future by promise::get_future()
      explicit
      __basic_future(const __state_type& __state) : _M_state(__state)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x22>
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  2a:	48 89 d6             	mov    %rdx,%rsi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x35>
      {
        _State_base::_S_check(_M_state);
  35:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x41>
        _M_state->_M_set_retrieved_flag();
  41:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x4d>
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x55>
      }
  55:	eb 1a                	jmp    71 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x71>
  57:	48 89 c3             	mov    %rax,%rbx
        _M_state.swap(__that._M_state);
      }

      // Construction of a future by promise::get_future()
      explicit
      __basic_future(const __state_type& __state) : _M_state(__state)
  5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x66>
  66:	48 89 d8             	mov    %rbx,%rax
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	callq  71 <_ZNSt14__basic_futureIvEC1ERKSt10shared_ptrINSt13__future_base11_State_baseEE+0x71>
      {
        _State_base::_S_check(_M_state);
        _M_state->_M_set_retrieved_flag();
      }
  71:	48 83 c4 18          	add    $0x18,%rsp
  75:	5b                   	pop    %rbx
  76:	5d                   	pop    %rbp
  77:	c3                   	retq   

セクション .text._ZNSt14__basic_futureIvEC2EOSt6futureIvE の逆アセンブル:

0000000000000000 <_ZNSt14__basic_futureIvEC1EOSt6futureIvE>:
    __basic_future(shared_future<_Res>&& __sf) noexcept
    : _M_state(std::move(__sf._M_state))
    { }

  template<typename _Res>
    inline __basic_future<_Res>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__basic_futureIvEC1EOSt6futureIvE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    __basic_future(future<_Res>&& __uf) noexcept
    : _M_state(std::move(__uf._M_state))
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt14__basic_futureIvEC1EOSt6futureIvE+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt14__basic_futureIvEC1EOSt6futureIvE+0x2d>
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt14__basic_futureIvEC1EOSt6futureIvE+0x3f>
    { }
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

セクション .text._ZNSt14__basic_futureIvE7_M_swapERS0_ の逆アセンブル:

0000000000000000 <_ZNSt14__basic_futureIvE7_M_swapERS0_>:
        if (!(__res._M_error == 0))
          rethrow_exception(__res._M_error);
        return static_cast<__result_type>(__res);
      }

      void _M_swap(__basic_future& __that) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__basic_futureIvE7_M_swapERS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
        _M_state.swap(__that._M_state);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt14__basic_futureIvE7_M_swapERS0_+0x28>
      }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt10shared_ptrINSt13__future_base11_State_baseEEC2EOS2_ の逆アセンブル:

0000000000000000 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1EOS2_>:
      /**
       *  @brief  Move-constructs a %shared_ptr instance from @a __r.
       *  @param  __r  A %shared_ptr rvalue.
       *  @post   *this contains the old value of @a __r, @a __r is empty.
       */
      shared_ptr(shared_ptr&& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1EOS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __shared_ptr<_Tp>(std::move(__r)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1EOS2_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEC1EOS2_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZSt7forwardIRPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS5_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS5_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC2IRS3_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IRS3_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IRS3_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IRS3_EEOT_+0x21>
  21:	48 8b 10             	mov    (%rax),%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 10             	mov    %rdx,(%rax)
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC2IRS3_IS5_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_+0x37>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_+0x43>
  43:	48 89 c2             	mov    %rax,%rdx
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 89 d6             	mov    %rdx,%rsi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_IS5_EvEEOT_DpOT0_+0x55>
  55:	c9                   	leaveq 
  56:	c3                   	retq   

セクション .text._ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC2IRS3_S5_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_S5_vEEOT_OT0_>:

      template<typename _U1, typename _U2, typename = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_S5_vEEOT_OT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_S5_vEEOT_OT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_S5_vEEOT_OT0_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IRS3_S5_vEEOT_OT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC2EPS2_ の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EPS2_>:
      : _M_t()
      { static_assert(!is_pointer<deleter_type>::value,
		     "constructed with null function pointer deleter"); }

      explicit
      unique_ptr(pointer __p) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EPS2_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      : _M_t(__p, deleter_type())
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 8d 55 ff          	lea    -0x1(%rbp),%rdx
  1d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  21:	48 89 ce             	mov    %rcx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EPS2_+0x2c>
      { static_assert(!is_pointer<deleter_type>::value,
		     "constructed with null function pointer deleter"); }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERS4_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERS4_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERS6_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERS6_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERS6_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS7_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS7_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS7_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS7_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      // Destructor.
      ~unique_ptr() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
      {
	auto& __ptr = std::get<0>(_M_t);
  12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  16:	48 89 c7             	mov    %rax,%rdi
  19:	e8 00 00 00 00       	callq  1e <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev+0x1e>
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (__ptr != nullptr)
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 8b 00             	mov    (%rax),%rax
  29:	48 85 c0             	test   %rax,%rax
  2c:	74 1e                	je     4c <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev+0x4c>
	  get_deleter()(__ptr);
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8b 18             	mov    (%rax),%rbx
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev+0x41>
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEED1Ev+0x4c>
	__ptr = pointer();
  4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  50:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  57:	48 83 c4 28          	add    $0x28,%rsp
  5b:	5b                   	pop    %rbx
  5c:	5d                   	pop    %rbp
  5d:	c3                   	retq   

セクション .text._ZSt7forwardIPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS4_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIPNSt13__future_base7_ResultIvEEEOT_RNSt16remove_referenceIS4_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC2IS3_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IS3_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IS3_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EEC1IS3_EEOT_+0x21>
  21:	48 8b 10             	mov    (%rax),%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 10             	mov    %rdx,(%rax)
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC2IS3_IS5_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_+0x37>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_+0x43>
  43:	48 89 c2             	mov    %rax,%rdx
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 89 d6             	mov    %rdx,%rsi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_IS5_EvEEOT_DpOT0_+0x55>
  55:	c9                   	leaveq 
  56:	c3                   	retq   

セクション .text._ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC2IS3_S5_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_S5_vEEOT_OT0_>:

      template<typename _U1, typename _U2, typename = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_S5_vEEOT_OT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_S5_vEEOT_OT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_S5_vEEOT_OT0_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt5tupleIIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEEC1IS3_S5_vEEOT_OT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC2EOS5_ の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_>:
		      "rvalue deleter bound to reference"); }

      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }

      // Move constructors.
      unique_ptr(unique_ptr&& __u) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }
  16:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_+0x22>
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_+0x39>
  39:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  45:	48 89 da             	mov    %rbx,%rdx
  48:	48 89 ce             	mov    %rcx,%rsi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEC1EOS5_+0x53>
  53:	48 83 c4 28          	add    $0x28,%rsp
  57:	5b                   	pop    %rbx
  58:	5d                   	pop    %rbp
  59:	c3                   	retq   

セクション .text._ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEcvbEv の逆アセンブル:

0000000000000000 <_ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEcvbEv>:

      _Tp*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const // never throws
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEcvbEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_ptr == 0 ? false : true; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 85 c0             	test   %rax,%rax
  1b:	0f 95 c0             	setne  %al
  1e:	c9                   	leaveq 
  1f:	c3                   	retq   

セクション .text._ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEptEv の逆アセンブル:

0000000000000000 <_ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEptEv>:
	_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);
	return *_M_ptr;
      }

      _Tp*
      operator->() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEptEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);
	return _M_ptr;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
      }
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC2IPNS0_7_ResultIvEEEEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC1IPNS0_7_ResultIvEEEEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC1IPNS0_7_ResultIvEEEEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EEC1IPNS0_7_ResultIvEEEEOT_+0x21>
  21:	48 8b 10             	mov    (%rax),%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 10             	mov    %rdx,(%rax)
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_+0x37>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_+0x43>
  43:	48 89 c2             	mov    %rax,%rdx
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 89 d6             	mov    %rdx,%rsi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEEIS3_EvEEOT_DpOT0_+0x55>
  55:	c9                   	leaveq 
  56:	c3                   	retq   

セクション .text._ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC2IPNS0_7_ResultIvEES3_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEES3_vEEOT_OT0_>:

      template<typename _U1, typename _U2, typename = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEES3_vEEOT_OT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEES3_vEEOT_OT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEES3_vEEOT_OT0_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEC1IPNS0_7_ResultIvEES3_vEEOT_OT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC2INS0_7_ResultIvEES2_vEEOS_IT_T0_E の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E>:
	       is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
	       __not_<is_array<_Up>>,
	       typename conditional<is_reference<_Dp>::value,
				    is_same<_Ep, _Dp>,
				    is_convertible<_Ep, _Dp>>::type>>
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
  16:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E+0x22>
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E+0x39>
  39:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  41:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  45:	48 89 da             	mov    %rbx,%rdx
  48:	48 89 ce             	mov    %rcx,%rsi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEEC1INS0_7_ResultIvEES2_vEEOS_IT_T0_E+0x53>
	{ }
  53:	48 83 c4 28          	add    $0x28,%rsp
  57:	5b                   	pop    %rbx
  58:	5d                   	pop    %rbp
  59:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EE4swapERS4_ の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EE4swapERS4_>:
      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EE4swapERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::swap(_M_ptr, __other._M_ptr);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EE4swapERS4_+0x28>
	_M_refcount._M_swap(__other._M_refcount);
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 83 c0 08          	add    $0x8,%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EE4swapERS4_+0x43>
      }
  43:	c9                   	leaveq 
  44:	c3                   	retq   

セクション .text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_>:
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_pi(__r._M_pi)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
      {
	if (_M_pi != 0)
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 8b 00             	mov    (%rax),%rax
  2a:	48 85 c0             	test   %rax,%rax
  2d:	74 0f                	je     3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_+0x3e>
	  _M_pi->_M_add_ref_copy();
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 8b 00             	mov    (%rax),%rax
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EEC1ERKS2_+0x3e>
      }
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt31_Maybe_unary_or_binary_functionISt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEIEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt31_Maybe_unary_or_binary_functionISt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEIEEC1Ev>:
   * Derives from @c unary_function or @c binary_function, or perhaps
   * nothing, depending on the number of arguments provided. The
   * primary template is the basis case, which derives nothing.
   */
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt31_Maybe_unary_or_binary_functionISt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEIEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E の逆アセンブル:

0000000000000000 <_ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E>:
      static _Setter<void, void>
      __setter(promise<void>* __prom);

      template<typename _Tp>
        static void
        _S_check(const shared_ptr<_Tp>& __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
        {
          if (!static_cast<bool>(__p))
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	84 c0                	test   %al,%al
  22:	74 0a                	je     2e <_ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E+0x2e>
            __throw_future_error((int)future_errc::no_state);
  24:	bf 03 00 00 00       	mov    $0x3,%edi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt13__future_base11_State_base8_S_checkIS0_EEvRKSt10shared_ptrIT_E+0x2e>
        }
  2e:	c9                   	leaveq 
  2f:	c3                   	retq   

セクション .text._ZSt3refISt6threadESt17reference_wrapperIT_ERS2_ の逆アセンブル:

0000000000000000 <_ZSt3refISt6threadESt17reference_wrapperIT_ERS2_>:


  /// Denotes a reference should be taken to a variable.
  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3refISt6threadESt17reference_wrapperIT_ERS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return reference_wrapper<_Tp>(__t); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt3refISt6threadESt17reference_wrapperIT_ERS2_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZSt7forwardIMSt6threadFvvEEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIMSt6threadFvvEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIMSt6threadFvvEEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardISt17reference_wrapperISt6threadEEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt17reference_wrapperISt6threadEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt17reference_wrapperISt6threadEEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EE7_M_headERS3_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEE7_M_headERS3_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEE7_M_headERS3_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EEC2IS2_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EEC1IS2_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EEC1IS2_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EEC1IS2_EEOT_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt10_Head_baseILm1ESt17reference_wrapperISt6threadELb0EEC1IS2_EEOT_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EE7_M_headERS5_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EE7_M_headERS5_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EE7_M_headERS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE7_M_headERS7_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE7_M_headERS7_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE7_M_headERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE7_M_headERS7_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZSt7forwardISt7_Mem_fnIMSt6threadFvvEEEOT_RNSt16remove_referenceIS5_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt7_Mem_fnIMSt6threadFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt7_Mem_fnIMSt6threadFvvEEEOT_RNSt16remove_referenceIS5_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EEC2IS4_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EEC1IS4_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EEC1IS4_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm0ESt7_Mem_fnIMSt6threadFvvEELb0EEC1IS4_EEOT_+0x21>
  21:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  25:	48 8b 50 08          	mov    0x8(%rax),%rdx
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 89 01             	mov    %rax,(%rcx)
  2f:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_>:
  extern "C" void __once_proxy(void);

  /// call_once
  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 58          	sub    $0x58,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0xe>
   e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  12:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  16:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    {
#ifdef _GLIBCXX_HAVE_TLS
      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
          std::forward<_Args>(__args)...);
  1a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {
#ifdef _GLIBCXX_HAVE_TLS
      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
  29:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
          std::forward<_Args>(__args)...);
  38:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x4a>
      __once_callable = &__bound_functor;
  4a:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 51 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x51>
  51:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  55:	64 48 89 10          	mov    %rdx,%fs:(%rax)
      __once_call = &__once_call_impl<decltype(__bound_functor)>;
  59:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 60 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x60>
  60:	64 48 c7 00 00 00 00 	movq   $0x0,%fs:(%rax)
  67:	00 
          std::forward<_Args>(__args)...);
      __once_functor = [&]() { __callable(); };
      __set_once_functor_lock_ptr(&__functor_lock);
#endif

      int __e = __gthread_once(&(__once._M_once), &__once_proxy);
  68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  6c:	be 00 00 00 00       	mov    $0x0,%esi
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	callq  79 <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x79>
  79:	89 45 cc             	mov    %eax,-0x34(%rbp)
#ifndef _GLIBCXX_HAVE_TLS
      if (__functor_lock)
        __set_once_functor_lock_ptr(0);
#endif

      if (__e)
  7c:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80:	74 0a                	je     8c <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x8c>
	__throw_system_error(__e);
  82:	8b 45 cc             	mov    -0x34(%rbp),%eax
  85:	89 c7                	mov    %eax,%edi
  87:	e8 00 00 00 00       	callq  8c <_ZSt9call_onceIMSt6threadFvvEISt17reference_wrapperIS0_EEEvRSt9once_flagOT_DpOT0_+0x8c>
    }
  8c:	48 83 c4 58          	add    $0x58,%rsp
  90:	5b                   	pop    %rbx
  91:	5d                   	pop    %rbp
  92:	c3                   	retq   

セクション .text._ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_ の逆アセンブル:

0000000000000000 <_ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs.compare(@a __rhs) != 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZStneIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_ の逆アセンブル:

0000000000000000 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_>:
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
  18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x24>
  24:	48 89 c3             	mov    %rax,%rbx
  27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x33>
	      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
						    __lhs.size())); }
  33:	48 39 c3             	cmp    %rax,%rbx
  36:	75 43                	jne    7b <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x7b>
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x44>
  44:	49 89 c4             	mov    %rax,%r12
  47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x53>
  53:	48 89 c3             	mov    %rax,%rbx
  56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5a:	48 89 c7             	mov    %rax,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x62>
  62:	4c 89 e2             	mov    %r12,%rdx
  65:	48 89 de             	mov    %rbx,%rsi
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x70>
  70:	85 c0                	test   %eax,%eax
  72:	75 07                	jne    7b <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x7b>
  74:	b8 01 00 00 00       	mov    $0x1,%eax
  79:	eb 05                	jmp    80 <_ZSteqIcEN9__gnu_cxx11__enable_ifIXsrSt9__is_charIT_E7__valueEbE6__typeERKSbIS3_St11char_traitsIS3_ESaIS3_EESC_+0x80>
  7b:	b8 00 00 00 00       	mov    $0x0,%eax
  80:	48 83 c4 10          	add    $0x10,%rsp
  84:	5b                   	pop    %rbx
  85:	41 5c                	pop    %r12
  87:	5d                   	pop    %rbp
  88:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE5beginEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI4PathSaIS0_EE5beginEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_start); }
  11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  15:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZNSt6vectorI4PathSaIS0_EE5beginEv+0x24>
  24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE3endEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI4PathSaIS0_EE3endEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8d 50 08          	lea    0x8(%rax),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt6vectorI4PathSaIS0_EE3endEv+0x28>
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorI9PathPointSaIS0_EEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorI9PathPointSaIS0_EED1Ev+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 48 08          	mov    0x8(%rax),%rcx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt6vectorI9PathPointSaIS0_EED1Ev+0x3a>
		      _M_get_Tp_allocator()); }
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt6vectorI9PathPointSaIS0_EED1Ev+0x46>
  46:	c9                   	leaveq 
  47:	c3                   	retq   

セクション .text._ZSt4moveIR4PathEONSt16remove_referenceIT_E4typeEOS3_ の逆アセンブル:

0000000000000000 <_ZSt4moveIR4PathEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIR4PathEONSt16remove_referenceIT_E4typeEOS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4moveIR9PathPointEONSt16remove_referenceIT_E4typeEOS3_ の逆アセンブル:

0000000000000000 <_ZSt4moveIR9PathPointEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIR9PathPointEONSt16remove_referenceIT_E4typeEOS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EE9push_backEOS0_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EE9push_backEOS0_>:
#endif
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EE9push_backEOS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorI9PathPointSaIS0_EE9push_backEOS0_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt6vectorI9PathPointSaIS0_EE9push_backEOS0_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE3endEv の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  pair in the %map.  Iteration is done in ascending order
       *  according to the keys.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE3endEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.end(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE3endEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEeqERKS4_ の逆アセンブル:

0000000000000000 <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEeqERKS4_>:
	_M_node = _Rb_tree_decrement(_M_node);
	return __tmp;
      }

      bool
      operator==(const _Self& __x) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEeqERKS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_node == __x._M_node; }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 39 c2             	cmp    %rax,%rdx
  26:	0f 94 c0             	sete   %al
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEptEv の逆アセンブル:

0000000000000000 <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEptEv>:
      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEptEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::__addressof(static_cast<_Link_type>
				(_M_node)->_M_value_field); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 83 c0 20          	add    $0x20,%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEptEv+0x24>
  24:	c9                   	leaveq 
  25:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4findERS4_ の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4findERS4_>:
       *  the key matches.  If successful the function returns an iterator
       *  pointing to the sought after %pair.  If unsuccessful it returns the
       *  past-the-end ( @c end() ) iterator.
       */
      iterator
      find(const key_type& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4findERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_t.find(__x); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4findERS4_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC1Ev>:

      typedef _Rb_tree_iterator<_Tp>        _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>*           _Link_type;

      _Rb_tree_iterator()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_node() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	c9                   	leaveq 
  1d:	c3                   	retq   

セクション .text._ZSt4moveIRSt6vectorI9PathPointSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt6vectorI9PathPointSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt6vectorI9PathPointSaIS1_EEEONSt16remove_referenceIT_E4typeEOS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EEC2EOS2_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EEC1EOS2_>:
       *  @param  __x  A %vector of identical element and allocator types.
       *
       *  The newly-created %vector contains the exact contents of @a __x.
       *  The contents of @a __x are a valid, but unspecified %vector.
       */
      vector(vector&& __x) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EEC1EOS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(std::move(__x)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorI9PathPointSaIS0_EEC1EOS2_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt6vectorI9PathPointSaIS0_EEC1EOS2_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZSt7forwardISt4pairISs4PathEEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt4pairISs4PathEEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt4pairISs4PathEEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE6insertIS3_ISsS0_EvEES3_ISt17_Rb_tree_iteratorIS5_EbEOT_ の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE6insertIS3_ISsS0_EvEES3_ISt17_Rb_tree_iteratorIS5_EbEOT_>:
#if __cplusplus >= 201103L
      template<typename _Pair, typename = typename
	       std::enable_if<std::is_constructible<value_type,
						    _Pair&&>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE6insertIS3_ISsS0_EvEES3_ISt17_Rb_tree_iteratorIS5_EbEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE6insertIS3_ISsS0_EvEES3_ISt17_Rb_tree_iteratorIS5_EbEOT_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE6insertIS3_ISsS0_EvEES3_ISt17_Rb_tree_iteratorIS5_EbEOT_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS6_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS6_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEaSEOS5_ の逆アセンブル:

0000000000000000 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEaSEOS5_>:
	second = __p.second;
	return *this;
      }

      pair&
      operator=(pair&& __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEaSEOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
	              is_nothrow_move_assignable<_T2>>::value)
      {
	first = std::forward<first_type>(__p.first);
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEaSEOS5_+0x21>
  21:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 89 02             	mov    %rax,(%rdx)
	second = std::forward<second_type>(__p.second);
  2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEaSEOS5_+0x3b>
  3b:	0f b6 10             	movzbl (%rax),%edx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	88 50 08             	mov    %dl,0x8(%rax)
	return *this;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  49:	c9                   	leaveq 
  4a:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE5clearEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE5clearEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase_at_end(this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 10             	mov    (%rax),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 d6             	mov    %rdx,%rsi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE5clearEv+0x27>
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1Ev>:
      // (get_allocator() is normally listed in this section, but seems to have
      // been accidentally omitted in the printed standard)
      /**
       *  @brief  Default constructor creates no elements.
       */
      map()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_t() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
      }

    protected:
      template<typename _Key_compare, 
	       bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED1Ev>:

#if __cplusplus >= 201103L
      _Rb_tree(_Rb_tree&& __x);
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase(_M_begin()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED1Ev+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 89 d6             	mov    %rdx,%rsi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED1Ev+0x2f>
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EED1Ev+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt4moveIRSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEONSt16remove_referenceIT_E4typeEOSB_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEONSt16remove_referenceIT_E4typeEOSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE9push_backEOS8_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE9push_backEOS8_>:
#endif
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE9push_backEOS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { emplace_back(std::move(__x)); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE9push_backEOS8_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE9push_backEOS8_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEixEm の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEixEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 08             	mov    (%rax),%rcx
  1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  20:	48 89 d0             	mov    %rdx,%rax
  23:	48 01 c0             	add    %rax,%rax
  26:	48 01 d0             	add    %rdx,%rax
  29:	48 c1 e0 04          	shl    $0x4,%rax
  2d:	48 01 c8             	add    %rcx,%rax
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 48 08          	mov    0x8(%rax),%rcx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0x3a>
		      _M_get_Tp_allocator()); }
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0x46>
  46:	c9                   	leaveq 
  47:	c3                   	retq   

セクション .text._ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 08          	mov    0x8(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 04          	sar    $0x4,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  37:	aa aa aa 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNKSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4sizeEv>:
      empty() const _GLIBCXX_NOEXCEPT
      { return _M_t.empty(); }

      /** Returns the size of the %map.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.size(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE4sizeEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE7reserveEm の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm>:
{
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    reserve(size_type __n)
    {
      if (__n > this->max_size())
  16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x22>
  22:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  26:	0f 92 c0             	setb   %al
  29:	84 c0                	test   %al,%al
  2b:	74 0a                	je     37 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x37>
	__throw_length_error(__N("vector::reserve"));
  2d:	bf 00 00 00 00       	mov    $0x0,%edi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x37>
      if (this->capacity() < __n)
  37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x43>
  43:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  47:	0f 92 c0             	setb   %al
  4a:	84 c0                	test   %al,%al
  4c:	0f 84 0f 01 00 00    	je     161 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x161>
	{
	  const size_type __old_size = size();
  52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x5e>
  5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	48 8b 40 08          	mov    0x8(%rax),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x72>
  72:	48 89 c3             	mov    %rax,%rbx
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	48 8b 00             	mov    (%rax),%rax
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	callq  84 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x84>
  84:	48 89 c2             	mov    %rax,%rdx
  87:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8f:	48 89 d9             	mov    %rbx,%rcx
  92:	48 89 c7             	mov    %rax,%rdi
  95:	e8 00 00 00 00       	callq  9a <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x9a>
  9a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
  9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a2:	48 89 c7             	mov    %rax,%rdi
  a5:	e8 00 00 00 00       	callq  aa <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0xaa>
  aa:	48 89 c2             	mov    %rax,%rdx
  ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b1:	48 8b 48 08          	mov    0x8(%rax),%rcx
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 8b 00             	mov    (%rax),%rax
	{
	  const size_type __old_size = size();
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  bc:	48 89 ce             	mov    %rcx,%rsi
  bf:	48 89 c7             	mov    %rax,%rdi
  c2:	e8 00 00 00 00       	callq  c7 <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0xc7>
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
  c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  cb:	48 8b 40 10          	mov    0x10(%rax),%rax
  cf:	48 89 c2             	mov    %rax,%rdx
  d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  d6:	48 8b 00             	mov    (%rax),%rax
  d9:	48 29 c2             	sub    %rax,%rdx
  dc:	48 89 d0             	mov    %rdx,%rax
  df:	48 c1 f8 03          	sar    $0x3,%rax
  e3:	48 89 c2             	mov    %rax,%rdx
  e6:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  ed:	cc cc cc 
  f0:	48 0f af c2          	imul   %rdx,%rax
  f4:	48 89 c2             	mov    %rax,%rdx
  f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  fb:	48 8b 08             	mov    (%rax),%rcx
  fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
	  pointer __tmp = _M_allocate_and_copy(__n,
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			_M_get_Tp_allocator());
	  _M_deallocate(this->_M_impl._M_start,
 102:	48 89 ce             	mov    %rcx,%rsi
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZNSt6vectorI4PathSaIS0_EE7reserveEm+0x10d>
			this->_M_impl._M_end_of_storage
			- this->_M_impl._M_start);
	  this->_M_impl._M_start = __tmp;
 10d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 111:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 115:	48 89 10             	mov    %rdx,(%rax)
	  this->_M_impl._M_finish = __tmp + __old_size;
 118:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 11c:	48 89 d0             	mov    %rdx,%rax
 11f:	48 c1 e0 02          	shl    $0x2,%rax
 123:	48 01 d0             	add    %rdx,%rax
 126:	48 c1 e0 03          	shl    $0x3,%rax
 12a:	48 89 c2             	mov    %rax,%rdx
 12d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 131:	48 01 c2             	add    %rax,%rdx
 134:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 138:	48 89 50 08          	mov    %rdx,0x8(%rax)
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 13c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 140:	48 8b 08             	mov    (%rax),%rcx
 143:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
 147:	48 89 d0             	mov    %rdx,%rax
 14a:	48 c1 e0 02          	shl    $0x2,%rax
 14e:	48 01 d0             	add    %rdx,%rax
 151:	48 c1 e0 03          	shl    $0x3,%rax
 155:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
 159:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
 15d:	48 89 50 10          	mov    %rdx,0x10(%rax)
	}
    }
 161:	48 83 c4 28          	add    $0x28,%rsp
 165:	5b                   	pop    %rbx
 166:	5d                   	pop    %rbp
 167:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE5beginEv の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE5beginEv>:
       *  Returns a read/write iterator that points to the first pair in the
       *  %map.
       *  Iteration is done in ascending order according to the keys.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE5beginEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_t.begin(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEE5beginEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEneERKS4_ の逆アセンブル:

0000000000000000 <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEneERKS4_>:
      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17_Rb_tree_iteratorISt4pairIKSs4PathEEneERKS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_node != __x._M_node; }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 39 c2             	cmp    %rax,%rdx
  26:	0f 95 c0             	setne  %al
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEppEi の逆アセンブル:

0000000000000000 <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEppEi>:
	_M_node = _Rb_tree_increment(_M_node);
	return *this;
      }

      _Self
      operator++(int)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEppEi+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	89 75 e4             	mov    %esi,-0x1c(%rbp)
      {
	_Self __tmp = *this;
  14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  18:	48 8b 00             	mov    (%rax),%rax
  1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	_M_node = _Rb_tree_increment(_M_node);
  1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEppEi+0x2e>
  2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  32:	48 89 02             	mov    %rax,(%rdx)
	return __tmp;
  35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

セクション .text._ZSt7forwardIRK4PathEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRK4PathEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRK4PathEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 10          	mov    0x10(%rax),%rax
  25:	48 39 c2             	cmp    %rax,%rdx
  28:	74 31                	je     5b <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_+0x5b>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  36:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  3a:	48 89 ce             	mov    %rcx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_+0x45>
	                             __x);
	    ++this->_M_impl._M_finish;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 40 08          	mov    0x8(%rax),%rax
  4d:	48 8d 50 28          	lea    0x28(%rax),%rdx
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 89 50 08          	mov    %rdx,0x8(%rax)
  59:	eb 13                	jmp    6e <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_+0x6e>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  5b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt6vectorI4PathSaIS0_EE9push_backERKS0_+0x6e>
#else
	  _M_insert_aux(end(), __x);
#endif
      }
  6e:	c9                   	leaveq 
  6f:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEEixEm の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorIlSaIlEEixEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  20:	48 c1 e2 03          	shl    $0x3,%rdx
  24:	48 01 d0             	add    %rdx,%rax
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNKSt6vectorIlSaIlEE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorIlSaIlEE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorIlSaIlEE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 08          	mov    0x8(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZSt7forwardIRKlEOT_RNSt16remove_referenceIS2_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRKlEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRKlEOT_RNSt16remove_referenceIS2_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEE9push_backERKl の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEE9push_backERKl>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorIlSaIlEE9push_backERKl+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 10          	mov    0x10(%rax),%rax
  25:	48 39 c2             	cmp    %rax,%rdx
  28:	74 31                	je     5b <_ZNSt6vectorIlSaIlEE9push_backERKl+0x5b>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
	                             __x);
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 48 08          	mov    0x8(%rax),%rcx
  32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  36:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  3a:	48 89 ce             	mov    %rcx,%rsi
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNSt6vectorIlSaIlEE9push_backERKl+0x45>
	                             __x);
	    ++this->_M_impl._M_finish;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	48 8b 40 08          	mov    0x8(%rax),%rax
  4d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  55:	48 89 50 08          	mov    %rdx,0x8(%rax)
  59:	eb 13                	jmp    6e <_ZNSt6vectorIlSaIlEE9push_backERKl+0x6e>
	  }
	else
#if __cplusplus >= 201103L
	  _M_emplace_back_aux(__x);
  5b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt6vectorIlSaIlEE9push_backERKl+0x6e>
#else
	  _M_insert_aux(end(), __x);
#endif
      }
  6e:	c9                   	leaveq 
  6f:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEEC1Ev>:
      // [23.2.4.1] construct/copy/destroy
      // (assign() and get_allocator() are also listed in this section)
      /**
       *  @brief  Default constructor creates no elements.
       */
      vector()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorIlSaIlEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _Base() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorIlSaIlEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorIlSaIlEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6vectorIlSaIlEED1Ev+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 48 08          	mov    0x8(%rax),%rcx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 8b 00             	mov    (%rax),%rax
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2f:	48 89 ce             	mov    %rcx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt6vectorIlSaIlEED1Ev+0x3a>
		      _M_get_Tp_allocator()); }
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt6vectorIlSaIlEED1Ev+0x46>
  46:	c9                   	leaveq 
  47:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE5clearEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE5clearEv>:
       *  elements, and that if the elements themselves are pointers, the
       *  pointed-to memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      void
      clear() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI4PathSaIS0_EE5clearEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_erase_at_end(this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 10             	mov    (%rax),%rdx
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 89 d6             	mov    %rdx,%rsi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNSt6vectorI4PathSaIS0_EE5clearEv+0x27>
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZSt4moveIRSt6vectorIlSaIlEEEONSt16remove_referenceIT_E4typeEOS5_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt6vectorIlSaIlEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt6vectorIlSaIlEEEONSt16remove_referenceIT_E4typeEOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEEaSEOS1_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEEaSEOS1_>:
       *  The contents of @a __x are moved into this %vector (without copying,
       *  if the allocators permit it).
       *  @a __x is a valid, but unspecified %vector.
       */
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorIlSaIlEEaSEOS1_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
  16:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
        _M_move_assign(std::move(__x),
  1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt6vectorIlSaIlEEaSEOS1_+0x26>
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	88 1c 24             	mov    %bl,(%rsp)
  30:	48 89 d6             	mov    %rdx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt6vectorIlSaIlEEaSEOS1_+0x3b>
                       integral_constant<bool, __move_storage>());
	return *this;
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
      }
  3f:	48 83 c4 38          	add    $0x38,%rsp
  43:	5b                   	pop    %rbx
  44:	5d                   	pop    %rbp
  45:	c3                   	retq   

セクション .text._ZN9__gnu_cxxneIP4PathSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxxneIP4PathSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxxneIP4PathSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN9__gnu_cxxneIP4PathSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_+0x22>
  22:	48 8b 18             	mov    (%rax),%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN9__gnu_cxxneIP4PathSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_+0x31>
  31:	48 8b 00             	mov    (%rax),%rax
  34:	48 39 c3             	cmp    %rax,%rbx
  37:	0f 95 c0             	setne  %al
  3a:	48 83 c4 18          	add    $0x18,%rsp
  3e:	5b                   	pop    %rbx
  3f:	5d                   	pop    %rbp
  40:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEppEv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEppEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 28          	lea    0x28(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEdeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNKSt6vectorI9PathPointSaIS0_EE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI9PathPointSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI9PathPointSaIS0_EE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 08          	mov    0x8(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  37:	cc cc cc 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EEixEm の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EEixEm>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EEixEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return *(this->_M_impl._M_start + __n); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 08             	mov    (%rax),%rcx
  1c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  20:	48 89 d0             	mov    %rdx,%rax
  23:	48 c1 e0 02          	shl    $0x2,%rax
  27:	48 01 d0             	add    %rdx,%rax
  2a:	48 c1 e0 03          	shl    $0x3,%rax
  2e:	48 01 c8             	add    %rcx,%rax
  31:	c9                   	leaveq 
  32:	c3                   	retq   

セクション .text._ZNKSt14__basic_futureIvE4waitEv の逆アセンブル:

0000000000000000 <_ZNKSt14__basic_futureIvE4waitEv>:

      bool
      valid() const noexcept { return static_cast<bool>(_M_state); }

      void
      wait() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt14__basic_futureIvE4waitEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        _State_base::_S_check(_M_state);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt14__basic_futureIvE4waitEv+0x1d>
        _M_state->wait();
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNKSt14__basic_futureIvE4waitEv+0x29>
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNKSt14__basic_futureIvE4waitEv+0x31>
      }
  31:	c9                   	leaveq 
  32:	c3                   	retq   

セクション .text._ZNKSt6vectorI4PathSaIS0_EE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI4PathSaIS0_EE4sizeEv>:
#endif

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI4PathSaIS0_EE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 08          	mov    0x8(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  37:	cc cc cc 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EE6rbeginEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EE6rbeginEv>:
       *  Returns a read/write reverse iterator that points to the
       *  last element in the %vector.  Iteration is done in reverse
       *  element order.
       */
      reverse_iterator
      rbegin() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EE6rbeginEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return reverse_iterator(end()); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorI9PathPointSaIS0_EE6rbeginEv+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt6vectorI9PathPointSaIS0_EE6rbeginEv+0x33>
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEptEv の逆アセンブル:

0000000000000000 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEptEv>:
       *  @return  A pointer to the value at @c --current
       *
       *  This requires that @c --current is dereferenceable.
      */
      pointer
      operator->() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEptEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return &(operator*()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEptEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv>:
  
      void
      _M_add_ref_lock();
      
      void
      _M_release() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
        // Be race-detector-friendly.  For more info see bits/c++config.
        _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_use_count);
	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	be ff ff ff ff       	mov    $0xffffffff,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x26>
  26:	83 f8 01             	cmp    $0x1,%eax
  29:	0f 94 c0             	sete   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 4d                	je     7d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x7d>
	  {
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_use_count);
	    _M_dispose();
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 00             	mov    (%rax),%rax
  37:	48 83 c0 10          	add    $0x10,%rax
  3b:	48 8b 00             	mov    (%rax),%rax
  3e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  42:	48 89 d7             	mov    %rdx,%rdi
  45:	ff d0                	callq  *%rax
	      }

            // Be race-detector-friendly.  For more info see bits/c++config.
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
						       -1) == 1)
  47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4b:	48 83 c0 0c          	add    $0xc,%rax
  4f:	be ff ff ff ff       	mov    $0xffffffff,%esi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x5c>
	        _GLIBCXX_WRITE_MEM_BARRIER;
	      }

            // Be race-detector-friendly.  For more info see bits/c++config.
            _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&_M_weak_count);
	    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
  5c:	83 f8 01             	cmp    $0x1,%eax
  5f:	0f 94 c0             	sete   %al
  62:	84 c0                	test   %al,%al
  64:	74 17                	je     7d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv+0x7d>
						       -1) == 1)
              {
                _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&_M_weak_count);
	        _M_destroy();
  66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6a:	48 8b 00             	mov    (%rax),%rax
  6d:	48 83 c0 18          	add    $0x18,%rax
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  78:	48 89 d7             	mov    %rdx,%rdi
  7b:	ff d0                	callq  *%rax
              }
	  }
      }
  7d:	c9                   	leaveq 
  7e:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EE7_M_headERS3_>:
      template<typename _Alloc, typename _UHead>
	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1ENSt13__future_base12_Result_base8_DeleterELb1EE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_headERS3_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_headERS3_>:

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_headERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_headERS3_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm1ENSt13__future_base12_Result_base8_DeleterEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm1ENSt13__future_base12_Result_base8_DeleterEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm1ENSt13__future_base12_Result_base8_DeleterEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm1ENSt13__future_base12_Result_base8_DeleterEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm1EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_ の逆アセンブル:

0000000000000000 <_ZSt3getILm1EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm1EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm1EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERS9_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE11get_deleterEv の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE11get_deleterEv>:
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }

      deleter_type&
      get_deleter() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE11get_deleterEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::get<1>(_M_t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE11get_deleterEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt11unique_lockISt5mutexE4lockEv の逆アセンブル:

0000000000000000 <_ZNSt11unique_lockISt5mutexE4lockEv>:

	return *this;
      }

      void
      lock()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11unique_lockISt5mutexE4lockEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (!_M_device)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 85 c0             	test   %rax,%rax
  1b:	75 0a                	jne    27 <_ZNSt11unique_lockISt5mutexE4lockEv+0x27>
	  __throw_system_error(int(errc::operation_not_permitted));
  1d:	bf 01 00 00 00       	mov    $0x1,%edi
  22:	e8 00 00 00 00       	callq  27 <_ZNSt11unique_lockISt5mutexE4lockEv+0x27>
	else if (_M_owns)
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2b:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  2f:	84 c0                	test   %al,%al
  31:	74 0a                	je     3d <_ZNSt11unique_lockISt5mutexE4lockEv+0x3d>
	  __throw_system_error(int(errc::resource_deadlock_would_occur));
  33:	bf 23 00 00 00       	mov    $0x23,%edi
  38:	e8 00 00 00 00       	callq  3d <_ZNSt11unique_lockISt5mutexE4lockEv+0x3d>
	else
	  {
	    _M_device->lock();
  3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  41:	48 8b 00             	mov    (%rax),%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZNSt11unique_lockISt5mutexE4lockEv+0x4c>
	    _M_owns = true;
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	c6 40 08 01          	movb   $0x1,0x8(%rax)
	  }
      }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt11unique_lockISt5mutexE6unlockEv の逆アセンブル:

0000000000000000 <_ZNSt11unique_lockISt5mutexE6unlockEv>:
	      return _M_owns;
	    }
	 }

      void
      unlock()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11unique_lockISt5mutexE6unlockEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	if (!_M_owns)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  19:	83 f0 01             	xor    $0x1,%eax
  1c:	84 c0                	test   %al,%al
  1e:	74 0a                	je     2a <_ZNSt11unique_lockISt5mutexE6unlockEv+0x2a>
	  __throw_system_error(int(errc::operation_not_permitted));
  20:	bf 01 00 00 00       	mov    $0x1,%edi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt11unique_lockISt5mutexE6unlockEv+0x2a>
	else if (_M_device)
  2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2e:	48 8b 00             	mov    (%rax),%rax
  31:	48 85 c0             	test   %rax,%rax
  34:	74 17                	je     4d <_ZNSt11unique_lockISt5mutexE6unlockEv+0x4d>
	  {
	    _M_device->unlock();
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8b 00             	mov    (%rax),%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZNSt11unique_lockISt5mutexE6unlockEv+0x45>
	    _M_owns = false;
  45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  49:	c6 40 08 00          	movb   $0x0,0x8(%rax)
	  }
      }
  4d:	c9                   	leaveq 
  4e:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERKS3_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERKS3_>:

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base12_Result_baseELb0EE7_M_headERKS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERKS4_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERKS4_>:

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERKS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_headERKS4_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS5_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS5_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0EPNSt13__future_base12_Result_baseEINS1_8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS5_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS9_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS9_>:

  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKS9_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE3getEv の逆アセンブル:

0000000000000000 <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE3getEv>:
	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
	return get();
      }

      pointer
      get() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE3getEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::get<0>(_M_t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt10unique_ptrINSt13__future_base12_Result_baseENS1_8_DeleterEE3getEv+0x1d>
  1d:	48 8b 00             	mov    (%rax),%rax
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt22_Maybe_get_result_typeILb1ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Maybe_get_result_typeILb1ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev>:
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Maybe_get_result_typeILb1ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt22_Weak_result_type_implISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Weak_result_type_implISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Weak_result_type_implISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt22_Weak_result_type_implISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17_Weak_result_typeISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt17_Weak_result_typeISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Weak_result_typeISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt17_Weak_result_typeISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt28_Reference_wrapper_base_implILb0ELb0ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt23_Reference_wrapper_baseISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt23_Reference_wrapper_baseISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt23_Reference_wrapper_baseISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt23_Reference_wrapper_baseISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2ERS7_ の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERS7_>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERS7_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERS7_+0x2d>
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	48 89 02             	mov    %rax,(%rdx)
      { }
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC2ERKS8_ の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERKS8_>:

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERKS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEC1ERKS8_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 8b 10             	mov    (%rax),%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 10             	mov    %rdx,(%rax)
      { }
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZNSt22_Maybe_get_result_typeILb0EbEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Maybe_get_result_typeILb0EbEC1Ev>:

_GLIBCXX_HAS_NESTED_TYPE(result_type)

  /// If we have found a result_type, extract it.
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Maybe_get_result_typeILb0EbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt22_Weak_result_type_implIbEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Weak_result_type_implIbEC1Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Weak_result_type_implIbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt22_Weak_result_type_implIbEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17_Weak_result_typeIbEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt17_Weak_result_typeIbEC1Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Weak_result_typeIbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt17_Weak_result_typeIbEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt28_Reference_wrapper_base_implILb0ELb0EbEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt28_Reference_wrapper_base_implILb0ELb0EbEC1Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt28_Reference_wrapper_base_implILb0ELb0EbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt28_Reference_wrapper_base_implILb0ELb0EbEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt23_Reference_wrapper_baseIbEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt23_Reference_wrapper_baseIbEC1Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt23_Reference_wrapper_baseIbEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt23_Reference_wrapper_baseIbEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperIbEC2ERb の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperIbEC1ERb>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperIbEC1ERb+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperIbEC1ERb+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt17reference_wrapperIbEC1ERb+0x2d>
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	48 89 02             	mov    %rax,(%rdx)
      { }
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperIbEC2ERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperIbEC1ERKS0_>:

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperIbEC1ERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperIbEC1ERKS0_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 8b 10             	mov    (%rax),%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 10             	mov    %rdx,(%rax)
      { }
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_ の逆アセンブル:

0000000000000000 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 48          	sub    $0x48,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x12>
  12:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  16:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  1a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  1e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  22:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
  26:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x32>
  32:	49 89 c5             	mov    %rax,%r13
  35:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x41>
  41:	49 89 c4             	mov    %rax,%r12
  44:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x50>
  50:	48 89 c3             	mov    %rax,%rbx
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
  53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x5f>
          std::forward<_Args>(__args)...);
  5f:	48 8b 10             	mov    (%rax),%rdx
  62:	48 8b 40 08          	mov    0x8(%rax),%rax
  66:	48 89 d7             	mov    %rdx,%rdi
  69:	48 89 c6             	mov    %rax,%rsi
  6c:	e8 00 00 00 00       	callq  71 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x71>
  71:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  75:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  79:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  81:	4d 89 e8             	mov    %r13,%r8
  84:	4c 89 e1             	mov    %r12,%rcx
  87:	48 89 da             	mov    %rbx,%rdx
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZSt13__bind_simpleIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEIKPS1_St17reference_wrapperIS8_ESF_IbEEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOSJ_DpOSK_+0x92>
    }
  92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  96:	48 83 c4 48          	add    $0x48,%rsp
  9a:	5b                   	pop    %rbx
  9b:	41 5c                	pop    %r12
  9d:	41 5d                	pop    %r13
  9f:	5d                   	pop    %rbp
  a0:	c3                   	retq   

セクション .text._ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS2_12_Result_baseENS6_8_DeleterEEvEERbEEPS3_St17reference_wrapperISA_ESH_IbEEEEvv の逆アセンブル:

0000000000000000 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS2_12_Result_baseENS6_8_DeleterEEvEERbEEPS3_St17reference_wrapperISA_ESH_IbEEEEvv>:
  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();

  template<typename _Callable>
    inline void
    __once_call_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS2_12_Result_baseENS6_8_DeleterEEvEERbEEPS3_St17reference_wrapperISA_ESH_IbEEEEvv+0x9>
    {
      (*(_Callable*)__once_callable)();
   9:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 10 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS2_12_Result_baseENS6_8_DeleterEEvEERbEEPS3_St17reference_wrapperISA_ESH_IbEEEEvv+0x10>
  10:	64 48 8b 00          	mov    %fs:(%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS2_12_Result_baseENS6_8_DeleterEEvEERbEEPS3_St17reference_wrapperISA_ESH_IbEEEEvv+0x1c>
    }
  1c:	5d                   	pop    %rbp
  1d:	c3                   	retq   

セクション .text._ZSt4swapIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEvRSt5tupleIIDpT_EES8_ の逆アセンブル:

0000000000000000 <_ZSt4swapIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEvRSt5tupleIIDpT_EES8_>:
    { return tuple<_Elements&...>(__args...); }

  /// swap
  template<typename... _Elements>
    inline void 
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEvRSt5tupleIIDpT_EES8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt4swapIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEEvRSt5tupleIIDpT_EES8_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC2EOS4_ の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1EOS4_>:
	       std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1EOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_ptr(__r._M_ptr), _M_refcount()
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  27:	48 83 c0 08          	add    $0x8,%rax
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1EOS4_+0x33>
      {
	_M_refcount._M_swap(__r._M_refcount);
  33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  37:	48 8d 50 08          	lea    0x8(%rax),%rdx
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	48 83 c0 08          	add    $0x8,%rax
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEC1EOS4_+0x4e>
	__r._M_ptr = 0;
  4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  52:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
      }
  59:	c9                   	leaveq 
  5a:	c3                   	retq   

セクション .text._ZSt3getILm1EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_ の逆アセンブル:

0000000000000000 <_ZSt3getILm1EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm1EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm1EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSB_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE11get_deleterEv の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE11get_deleterEv>:

      deleter_type&
      get_deleter() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE11get_deleterEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::get<1>(_M_t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE11get_deleterEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE7releaseEv の逆アセンブル:

0000000000000000 <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE7releaseEv>:
      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }

      // Modifiers.
      pointer
      release() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE7releaseEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	pointer __p = get();
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE7releaseEv+0x1d>
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	std::get<0>(_M_t) = pointer();
  21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE7releaseEv+0x2d>
  2d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	return __p;
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  38:	c9                   	leaveq 
  39:	c3                   	retq   

セクション .text._ZSt4moveIRPNSt13__future_base11_State_baseEEONSt16remove_referenceIT_E4typeEOS5_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRPNSt13__future_base11_State_baseEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRPNSt13__future_base11_State_baseEEONSt16remove_referenceIT_E4typeEOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_ の逆アセンブル:

0000000000000000 <_ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIPNSt13__future_base11_State_baseEEvRT_S4_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_ の逆アセンブル:

0000000000000000 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_>:
	  }
	return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE7_M_swapERS2_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__r._M_pi = _M_pi;
  20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  24:	48 8b 10             	mov    (%rax),%rdx
  27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2b:	48 89 10             	mov    %rdx,(%rax)
	_M_pi = __tmp;
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  36:	48 89 10             	mov    %rdx,(%rax)
      }
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv>:
      
      virtual void*
      _M_get_deleter(const std::type_info&) = 0;

      void
      _M_add_ref_copy()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	be 01 00 00 00       	mov    $0x1,%esi
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE15_M_add_ref_copyEv+0x26>
  26:	c9                   	leaveq 
  27:	c3                   	retq   

セクション .text._ZNSt22_Maybe_get_result_typeILb0ESt6threadEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Maybe_get_result_typeILb0ESt6threadEC1Ev>:

_GLIBCXX_HAS_NESTED_TYPE(result_type)

  /// If we have found a result_type, extract it.
  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Maybe_get_result_typeILb0ESt6threadEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt22_Weak_result_type_implISt6threadEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt22_Weak_result_type_implISt6threadEC1Ev>:
  /**
   *  Base class for any function object that has a weak result type, as
   *  defined in 3.3/3 of TR1.
  */
  template<typename _Functor>
    struct _Weak_result_type_impl
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt22_Weak_result_type_implISt6threadEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt22_Weak_result_type_implISt6threadEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17_Weak_result_typeISt6threadEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt17_Weak_result_typeISt6threadEC1Ev>:
  /**
   *  Strip top-level cv-qualifiers from the function object and let
   *  _Weak_result_type_impl perform the real work.
  */
  template<typename _Functor>
    struct _Weak_result_type
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Weak_result_typeISt6threadEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt17_Weak_result_typeISt6threadEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6threadEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6threadEC1Ev>:
  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;

  // None of the nested argument types.
  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6threadEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt28_Reference_wrapper_base_implILb0ELb0ESt6threadEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt23_Reference_wrapper_baseISt6threadEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt23_Reference_wrapper_baseISt6threadEC1Ev>:
   *  can. Specializations handle all of the easy cases. The primary
   *  template determines what to do with a class type, which may
   *  derive from both unary_function and binary_function.
  */
  template<typename _Tp>
    struct _Reference_wrapper_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt23_Reference_wrapper_baseISt6threadEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt23_Reference_wrapper_baseISt6threadEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperISt6threadEC2ERS0_ の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperISt6threadEC1ERS0_>:
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperISt6threadEC1ERS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(std::__addressof(__indata))
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperISt6threadEC1ERS0_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt17reference_wrapperISt6threadEC1ERS0_+0x2d>
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	48 89 02             	mov    %rax,(%rdx)
      { }
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt17reference_wrapperISt6threadEC2ERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt17reference_wrapperISt6threadEC1ERKS1_>:

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17reference_wrapperISt6threadEC1ERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_data(__inref._M_data)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17reference_wrapperISt6threadEC1ERKS1_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 8b 10             	mov    (%rax),%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 10             	mov    %rdx,(%rax)
      { }
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_ の逆アセンブル:

0000000000000000 <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_>:

  // Simplified version of std::bind for internal use, without support for
  // unbound arguments, placeholders or nested bind expressions.
  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
  1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
  29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_+0x35>
          std::forward<_Args>(__args)...);
  35:	48 8b 10             	mov    (%rax),%rdx
  38:	48 8b 40 08          	mov    0x8(%rax),%rax
  3c:	48 89 d7             	mov    %rdx,%rdi
  3f:	48 89 c6             	mov    %rax,%rsi
  42:	e8 00 00 00 00       	callq  47 <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_+0x47>
  47:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  4b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  4f:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  57:	48 89 da             	mov    %rbx,%rdx
  5a:	48 89 ce             	mov    %rcx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZSt13__bind_simpleIMSt6threadFvvEISt17reference_wrapperIS0_EEENSt19_Bind_simple_helperIT_IDpT0_EE6__typeEOS6_DpOS7_+0x65>
    }
  65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  69:	48 83 c4 38          	add    $0x38,%rsp
  6d:	5b                   	pop    %rbx
  6e:	5d                   	pop    %rbp
  6f:	c3                   	retq   

セクション .text._ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS2_EEEEvv の逆アセンブル:

0000000000000000 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS2_EEEEvv>:
  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();

  template<typename _Callable>
    inline void
    __once_call_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	e8 00 00 00 00       	callq  9 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS2_EEEEvv+0x9>
    {
      (*(_Callable*)__once_callable)();
   9:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 10 <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS2_EEEEvv+0x10>
  10:	64 48 8b 00          	mov    %fs:(%rax),%rax
  14:	48 89 c7             	mov    %rax,%rdi
  17:	e8 00 00 00 00       	callq  1c <_ZSt16__once_call_implISt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS2_EEEEvv+0x1c>
    }
  1c:	5d                   	pop    %rbp
  1d:	c3                   	retq   

セクション .text._ZNKSt6vectorI9PathPointSaIS0_EE5beginEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI9PathPointSaIS0_EE5beginEv>:
       *  Returns a read-only (constant) iterator that points to the
       *  first element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI9PathPointSaIS0_EE5beginEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_start); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1c:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  20:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  24:	48 89 d6             	mov    %rdx,%rsi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZNKSt6vectorI9PathPointSaIS0_EE5beginEv+0x2f>
  2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNKSt6vectorI9PathPointSaIS0_EE3endEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI9PathPointSaIS0_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %vector.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI9PathPointSaIS0_EE3endEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return const_iterator(this->_M_impl._M_finish); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8b 40 08          	mov    0x8(%rax),%rax
  19:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  1d:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
  21:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  25:	48 89 d6             	mov    %rdx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNKSt6vectorI9PathPointSaIS0_EE3endEv+0x30>
  30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEEC1ERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	c9                   	leaveq 
  24:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEE4baseEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx17__normal_iteratorIP4PathSt6vectorIS1_SaIS1_EEE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implD2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implD1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  37:	cc cc cc 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	48 89 c2             	mov    %rax,%rdx
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	callq  57 <_ZNSt12_Vector_baseI9PathPointSaIS0_EED1Ev+0x57>
		      - this->_M_impl._M_start); }
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNSt12_Vector_baseI9PathPointSaIS0_EED1Ev+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyIP9PathPointS0_EvT_S2_RSaIT0_E の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIP9PathPointS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIP9PathPointS0_EvT_S2_RSaIT0_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZSt8_DestroyIP9PathPointS0_EvT_S2_RSaIT0_E+0x2c>
    }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZSt7forwardI9PathPointEOT_RNSt16remove_referenceIS1_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardI9PathPointEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardI9PathPointEOT_RNSt16remove_referenceIS1_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 10          	mov    0x10(%rax),%rax
  25:	48 39 c2             	cmp    %rax,%rdx
  28:	74 3c                	je     66 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x66>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
  2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x50>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  54:	48 8b 40 08          	mov    0x8(%rax),%rax
  58:	48 8d 50 28          	lea    0x28(%rax),%rdx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	48 89 50 08          	mov    %rdx,0x8(%rax)
  64:	eb 1e                	jmp    84 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x84>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x72>
  72:	48 89 c2             	mov    %rax,%rdx
  75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  79:	48 89 d6             	mov    %rdx,%rsi
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	callq  84 <_ZNSt6vectorI9PathPointSaIS0_EE12emplace_backIIS0_EEEvDpOT_+0x84>
      }
  84:	c9                   	leaveq 
  85:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE3endEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE3endEv>:
	return const_iterator(static_cast<_Const_Link_type>
			      (this->_M_impl._M_header._M_left));
      }

      iterator
      end() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE3endEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8d 50 08          	lea    0x8(%rax),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE3endEv+0x28>
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZSt11__addressofISt4pairIKSs4PathEEPT_RS4_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofISt4pairIKSs4PathEEPT_RS4_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofISt4pairIKSs4PathEEPT_RS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
  16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x31>
  31:	48 89 c6             	mov    %rax,%rsi
  34:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  38:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  3c:	48 89 d1             	mov    %rdx,%rcx
  3f:	48 89 da             	mov    %rbx,%rdx
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x4a>
  4a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
      return (__j == end()
  4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x5a>
  5a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
  5e:	bb 01 00 00 00       	mov    $0x1,%ebx
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
  63:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  67:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  6b:	48 89 d6             	mov    %rdx,%rsi
  6e:	48 89 c7             	mov    %rax,%rdi
  71:	e8 00 00 00 00       	callq  76 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x76>
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
  76:	84 c0                	test   %al,%al
  78:	75 26                	jne    a0 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xa0>
  7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  7e:	48 89 c7             	mov    %rax,%rdi
  81:	e8 00 00 00 00       	callq  86 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x86>
  86:	48 89 c2             	mov    %rax,%rdx
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
  89:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  91:	48 89 ce             	mov    %rcx,%rsi
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0x9c>
					_S_key(__j._M_node))) ? end() : __j;
  9c:	84 c0                	test   %al,%al
  9e:	74 0e                	je     ae <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xae>
  a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	callq  ac <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xac>
  ac:	eb 04                	jmp    b2 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xb2>
  ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
  b2:	84 db                	test   %bl,%bl
  b4:	eb 0b                	jmp    c1 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xc1>
  b6:	84 db                	test   %bl,%bl
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
  b8:	90                   	nop
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4findERS1_+0xc1>
    }
  c1:	48 83 c4 38          	add    $0x38,%rsp
  c5:	5b                   	pop    %rbx
  c6:	5d                   	pop    %rbp
  c7:	c3                   	retq   

セクション .text._ZSt4moveIRSaI9PathPointEEONSt16remove_referenceIT_E4typeEOS4_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSaI9PathPointEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSaI9PathPointEEONSt16remove_referenceIT_E4typeEOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EEC2EOS2_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_>:

#if __cplusplus >= 201103L
      _Vector_base(_Tp_alloc_type&& __a)
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_+0x21>
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_+0x29>
  29:	48 89 c2             	mov    %rax,%rdx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 d6             	mov    %rdx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_+0x3b>
      { this->_M_impl._M_swap_data(__x._M_impl); }
  3b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	48 89 d6             	mov    %rdx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EOS2_+0x4e>
  4e:	c9                   	leaveq 
  4f:	c3                   	retq   

セクション .text._ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC2IS4_bvEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1IS4_bvEEOT_OT0_>:
	: first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1IS4_bvEEOT_OT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1IS4_bvEEOT_OT0_+0x25>
  25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 89 02             	mov    %rax,(%rdx)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt4pairISt17_Rb_tree_iteratorIS_IKSs4PathEEbEC1IS4_bvEEOT_OT0_+0x3b>
  3b:	0f b6 10             	movzbl (%rax),%edx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	88 50 08             	mov    %dl,0x8(%rax)
  45:	c9                   	leaveq 
  46:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_>:
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0xd>
   d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  11:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    _M_insert_unique(const _Val& __v)
#endif
    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
  15:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x28>
  28:	48 89 c2             	mov    %rax,%rdx
  2b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  2f:	48 89 d6             	mov    %rdx,%rsi
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x3a>
  3a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  3e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)

      if (__res.second)
  42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  46:	48 85 c0             	test   %rax,%rax
  49:	74 4c                	je     97 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x97>
	return _Res(_M_insert_(__res.first, __res.second,
			       _GLIBCXX_FORWARD(_Arg, __v)),
		    true);
  4b:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
      pair<_Base_ptr, _Base_ptr> __res
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
	return _Res(_M_insert_(__res.first, __res.second,
			       _GLIBCXX_FORWARD(_Arg, __v)),
  4f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x5b>
  5b:	48 89 c1             	mov    %rax,%rcx
  5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  62:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
		    true);
  66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x72>
  72:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  76:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
  7a:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  7e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  82:	48 89 ce             	mov    %rcx,%rsi
  85:	48 89 c7             	mov    %rax,%rdi
  88:	e8 00 00 00 00       	callq  8d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0x8d>
  8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  91:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  95:	eb 36                	jmp    cd <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0xcd>

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
  97:	c6 45 cf 00          	movb   $0x0,-0x31(%rbp)
  9b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  9f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  a3:	48 89 d6             	mov    %rdx,%rsi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0xae>
  ae:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
  b2:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  b6:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  ba:	48 89 ce             	mov    %rcx,%rsi
  bd:	48 89 c7             	mov    %rax,%rdi
  c0:	e8 00 00 00 00       	callq  c5 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE16_M_insert_uniqueIS0_ISsS2_EEES0_ISt17_Rb_tree_iteratorIS3_EbEOT_+0xc5>
  c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  c9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
  cd:	c9                   	leaveq 
  ce:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE15_M_erase_at_endEPS8_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE15_M_erase_at_endEPS8_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE15_M_erase_at_endEPS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE15_M_erase_at_endEPS8_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE15_M_erase_at_endEPS8_+0x3b>
	this->_M_impl._M_finish = __pos;
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  47:	c9                   	leaveq 
  48:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1Ev>:
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
		     const _Key& __k) const;

    public:
      // allocation/deallocation
      _Rb_tree() { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEED2Ev の逆アセンブル:

0000000000000000 <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEED1Ev>:

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
  15:	eb 49                	jmp    60 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x60>
	{
	  _M_erase(_S_right(__x));
  17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x23>
  23:	48 89 c2             	mov    %rax,%rdx
  26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  2a:	48 89 d6             	mov    %rdx,%rsi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x35>
	  _Link_type __y = _S_left(__x);
  35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x41>
  41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  _M_destroy_node(__x);
  45:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4d:	48 89 d6             	mov    %rdx,%rsi
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	callq  58 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x58>
	  __x = __y;
  58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
  60:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  65:	75 b0                	jne    17 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x17>
	  _M_erase(_S_right(__x));
	  _Link_type __y = _S_left(__x);
	  _M_destroy_node(__x);
	  __x = __y;
	}
    }
  67:	c9                   	leaveq 
  68:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_beginEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_beginEv>:
      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_M_beginEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZSt7forwardISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEOT_RNSt16remove_referenceIS9_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEOT_RNSt16remove_referenceIS9_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 50 08          	mov    0x8(%rax),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 8b 40 10          	mov    0x10(%rax),%rax
  25:	48 39 c2             	cmp    %rax,%rdx
  28:	74 3c                	je     66 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x66>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
  2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2e:	48 89 c7             	mov    %rax,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x36>
  36:	48 89 c2             	mov    %rax,%rdx
  39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  45:	48 89 ce             	mov    %rcx,%rsi
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x50>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
  50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  54:	48 8b 40 08          	mov    0x8(%rax),%rax
  58:	48 8d 50 30          	lea    0x30(%rax),%rdx
  5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  60:	48 89 50 08          	mov    %rdx,0x8(%rax)
  64:	eb 1e                	jmp    84 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x84>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x72>
  72:	48 89 c2             	mov    %rax,%rdx
  75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  79:	48 89 d6             	mov    %rdx,%rsi
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	callq  84 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12emplace_backIIS8_EEEvDpOT_+0x84>
      }
  84:	c9                   	leaveq 
  85:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implD2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implD1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 04          	sar    $0x4,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
  37:	aa aa aa 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	48 89 c2             	mov    %rax,%rdx
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4c:	48 89 ce             	mov    %rcx,%rsi
  4f:	48 89 c7             	mov    %rax,%rdi
  52:	e8 00 00 00 00       	callq  57 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0x57>
		      - this->_M_impl._M_start); }
  57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EED1Ev+0x63>
  63:	c9                   	leaveq 
  64:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES8_EvT_SA_RSaIT0_E の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES8_EvT_SA_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES8_EvT_SA_RSaIT0_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES8_EvT_SA_RSaIT0_E+0x2c>
    }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNKSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4sizeEv>:
      bool
      empty() const _GLIBCXX_NOEXCEPT
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const _GLIBCXX_NOEXCEPT 
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE4sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._M_node_count; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 28          	mov    0x28(%rax),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNKSt6vectorI4PathSaIS0_EE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI4PathSaIS0_EE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI4PathSaIS0_EE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt6vectorI4PathSaIS0_EE8max_sizeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNKSt6vectorI4PathSaIS0_EE8max_sizeEv+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZNKSt6vectorI4PathSaIS0_EE8capacityEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI4PathSaIS0_EE8capacityEv>:
      /**
       *  Returns the total number of elements that the %vector can
       *  hold before needing to allocate more memory.
       */
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI4PathSaIS0_EE8capacityEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
  37:	cc cc cc 
  3a:	48 0f af c2          	imul   %rdx,%rax
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZSt32__make_move_if_noexcept_iteratorIP4PathSt13move_iteratorIS1_EET0_T_ の逆アセンブル:

0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIP4PathSt13move_iteratorIS1_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt32__make_move_if_noexcept_iteratorIP4PathSt13move_iteratorIS1_EET0_T_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  15:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZSt32__make_move_if_noexcept_iteratorIP4PathSt13move_iteratorIS1_EET0_T_+0x24>
  24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_>:
       *  Memory expansion handler.  Uses the member allocation function to
       *  obtain @a n bytes of memory, and then copies [first,last) into it.
       */
      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  1a:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
			     _ForwardIterator __first, _ForwardIterator __last)
        {
	  pointer __result = this->_M_allocate(__n);
  1e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  22:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  26:	48 89 d6             	mov    %rdx,%rsi
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x31>
  31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
					  _M_get_Tp_allocator());
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x41>
  41:	48 89 c1             	mov    %rax,%rcx
			     _ForwardIterator __first, _ForwardIterator __last)
        {
	  pointer __result = this->_M_allocate(__n);
	  __try
	    {
	      std::__uninitialized_copy_a(__first, __last, __result,
  44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  48:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  4c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	callq  58 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x58>
					  _M_get_Tp_allocator());
	      return __result;
  58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5c:	eb 37                	jmp    95 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x95>
  5e:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  61:	e8 00 00 00 00       	callq  66 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x66>
  66:	48 89 d8             	mov    %rbx,%rax
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	callq  71 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x71>
  71:	48 89 c7             	mov    %rax,%rdi
  74:	e8 00 00 00 00       	callq  79 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x79>
	    {
	      _M_deallocate(__result, __n);
  79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  81:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  85:	48 89 ce             	mov    %rcx,%rsi
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	callq  90 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x90>
	      __throw_exception_again;
  90:	e8 00 00 00 00       	callq  95 <_ZNSt6vectorI4PathSaIS0_EE20_M_allocate_and_copyISt13move_iteratorIPS0_EEES5_mT_S7_+0x95>
	    }
	}
  95:	48 83 c4 48          	add    $0x48,%rsp
  99:	5b                   	pop    %rbx
  9a:	5d                   	pop    %rbp
  9b:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyIP4PathS0_EvT_S2_RSaIT0_E の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIP4PathS0_EvT_S2_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIP4PathS0_EvT_S2_RSaIT0_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZSt8_DestroyIP4PathS0_EvT_S2_RSaIT0_E+0x2c>
    }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI4PathSaIS0_EE13_M_deallocateEPS0_m の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI4PathSaIS0_EE13_M_deallocateEPS0_m>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI4PathSaIS0_EE13_M_deallocateEPS0_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  19:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1e:	74 17                	je     37 <_ZNSt12_Vector_baseI4PathSaIS0_EE13_M_deallocateEPS0_m+0x37>
	  _M_impl.deallocate(__p, __n);
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt12_Vector_baseI4PathSaIS0_EE13_M_deallocateEPS0_m+0x37>
      }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE5beginEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE5beginEv>:
      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE5beginEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { 
	return iterator(static_cast<_Link_type>
			(this->_M_impl._M_header._M_left));
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8b 50 18          	mov    0x18(%rax),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE5beginEv+0x28>
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
      }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE9constructIS0_IRKS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS6_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE9constructIS0_IRKS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS6_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE9constructIS0_IRKS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaI4PathEE9constructIS0_IRKS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS6_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaI4PathEE9constructIS0_IRKS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS6_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1a:	ba 00 00 00 00       	mov    $0x0,%edx
  1f:	be 01 00 00 00       	mov    $0x1,%esi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x2c>
  2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x43>
  43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x5b>
  5b:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x6a>
  6a:	48 89 c2             	mov    %rax,%rdx
				     std::forward<_Args>(__args)...);
  6d:	48 89 d0             	mov    %rdx,%rax
  70:	48 c1 e0 02          	shl    $0x2,%rax
  74:	48 01 d0             	add    %rdx,%rax
  77:	48 c1 e0 03          	shl    $0x3,%rax
  7b:	48 89 c2             	mov    %rax,%rdx
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  8a:	48 89 da             	mov    %rbx,%rdx
  8d:	48 89 ce             	mov    %rcx,%rsi
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x98>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  98:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  9f:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	callq  ac <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0xac>
  ac:	48 89 c1             	mov    %rax,%rcx
  af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b3:	48 8b 70 08          	mov    0x8(%rax),%rsi
  b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bb:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0xca>
  ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  ce:	48 83 45 d8 28       	addq   $0x28,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d7:	48 89 c7             	mov    %rax,%rdi
  da:	e8 00 00 00 00       	callq  df <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0xdf>
  df:	48 89 c2             	mov    %rax,%rdx
  e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ee:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  f1:	48 89 ce             	mov    %rcx,%rsi
  f4:	48 89 c7             	mov    %rax,%rdi
  f7:	e8 00 00 00 00       	callq  fc <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0xfc>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 100:	48 8b 40 10          	mov    0x10(%rax),%rax
 104:	48 89 c2             	mov    %rax,%rdx
 107:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 10b:	48 8b 00             	mov    (%rax),%rax
 10e:	48 29 c2             	sub    %rax,%rdx
 111:	48 89 d0             	mov    %rdx,%rax
 114:	48 c1 f8 03          	sar    $0x3,%rax
 118:	48 89 c2             	mov    %rax,%rdx
 11b:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
 122:	cc cc cc 
 125:	48 0f af c2          	imul   %rdx,%rax
 129:	48 89 c2             	mov    %rax,%rdx
 12c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 130:	48 8b 08             	mov    (%rax),%rcx
 133:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
 137:	48 89 ce             	mov    %rcx,%rsi
 13a:	48 89 c7             	mov    %rax,%rdi
 13d:	e8 00 00 00 00       	callq  142 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x142>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
 142:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 146:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 14a:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
 14d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 151:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 155:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
 159:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 15d:	48 89 d0             	mov    %rdx,%rax
 160:	48 c1 e0 02          	shl    $0x2,%rax
 164:	48 01 d0             	add    %rdx,%rax
 167:	48 c1 e0 03          	shl    $0x3,%rax
 16b:	48 89 c2             	mov    %rax,%rdx
 16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 172:	48 01 c2             	add    %rax,%rdx
 175:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 179:	48 89 50 10          	mov    %rdx,0x10(%rax)
 17d:	e9 98 00 00 00       	jmpq   21a <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x21a>
 182:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
 185:	e8 00 00 00 00       	callq  18a <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x18a>
 18a:	48 89 d8             	mov    %rbx,%rax
 18d:	48 89 c7             	mov    %rax,%rdi
 190:	e8 00 00 00 00       	callq  195 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x195>
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x19d>
	  {
	    if (!__new_finish)
 19d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
 1a2:	75 38                	jne    1dc <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1dc>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 1a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a8:	48 89 c7             	mov    %rax,%rdi
 1ab:	e8 00 00 00 00       	callq  1b0 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1b0>
 1b0:	48 89 c2             	mov    %rax,%rdx
 1b3:	48 89 d0             	mov    %rdx,%rax
 1b6:	48 c1 e0 02          	shl    $0x2,%rax
 1ba:	48 01 d0             	add    %rdx,%rax
 1bd:	48 c1 e0 03          	shl    $0x3,%rax
 1c1:	48 89 c2             	mov    %rax,%rdx
 1c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c8:	48 01 c2             	add    %rax,%rdx
 1cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1cf:	48 89 d6             	mov    %rdx,%rsi
 1d2:	48 89 c7             	mov    %rax,%rdi
 1d5:	e8 00 00 00 00       	callq  1da <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1da>
 1da:	eb 22                	jmp    1fe <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1fe>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 1dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1e0:	48 89 c7             	mov    %rax,%rdi
 1e3:	e8 00 00 00 00       	callq  1e8 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1e8>
 1e8:	48 89 c2             	mov    %rax,%rdx
 1eb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f3:	48 89 ce             	mov    %rcx,%rsi
 1f6:	48 89 c7             	mov    %rax,%rdi
 1f9:	e8 00 00 00 00       	callq  1fe <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x1fe>
	    _M_deallocate(__new_start, __len);
 1fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 202:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 206:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 20a:	48 89 ce             	mov    %rcx,%rsi
 20d:	48 89 c7             	mov    %rax,%rdi
 210:	e8 00 00 00 00       	callq  215 <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x215>
	    __throw_exception_again;
 215:	e8 00 00 00 00       	callq  21a <_ZNSt6vectorI4PathSaIS0_EE19_M_emplace_back_auxIIRKS0_EEEvDpOT_+0x21a>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
 21a:	48 83 c4 38          	add    $0x38,%rsp
 21e:	5b                   	pop    %rbx
 21f:	5d                   	pop    %rbp
 220:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE9constructIlIRKlEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE9constructIlIRKlEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE9constructIlIRKlEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaIlEE9constructIlIRKlEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaIlEE9constructIlIRKlEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS0_PT_DpOS5_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1a:	ba 00 00 00 00       	mov    $0x0,%edx
  1f:	be 01 00 00 00       	mov    $0x1,%esi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x2c>
  2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x43>
  43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x5b>
  5b:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x6a>
				     std::forward<_Args>(__args)...);
  6a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  71:	00 
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  7e:	48 89 da             	mov    %rbx,%rdx
  81:	48 89 ce             	mov    %rcx,%rsi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x8c>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  8c:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  93:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  94:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  98:	48 89 c7             	mov    %rax,%rdi
  9b:	e8 00 00 00 00       	callq  a0 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0xa0>
  a0:	48 89 c1             	mov    %rax,%rcx
  a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a7:	48 8b 70 08          	mov    0x8(%rax),%rsi
  ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  af:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  b2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  b6:	48 89 c7             	mov    %rax,%rdi
  b9:	e8 00 00 00 00       	callq  be <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0xbe>
  be:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  c2:	48 83 45 d8 08       	addq   $0x8,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  cb:	48 89 c7             	mov    %rax,%rdi
  ce:	e8 00 00 00 00       	callq  d3 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0xd3>
  d3:	48 89 c2             	mov    %rax,%rdx
  d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  da:	48 8b 48 08          	mov    0x8(%rax),%rcx
  de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e2:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  e5:	48 89 ce             	mov    %rcx,%rsi
  e8:	48 89 c7             	mov    %rax,%rdi
  eb:	e8 00 00 00 00       	callq  f0 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0xf0>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  f0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  f4:	48 8b 40 10          	mov    0x10(%rax),%rax
  f8:	48 89 c2             	mov    %rax,%rdx
  fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ff:	48 8b 00             	mov    (%rax),%rax
 102:	48 29 c2             	sub    %rax,%rdx
 105:	48 89 d0             	mov    %rdx,%rax
 108:	48 c1 f8 03          	sar    $0x3,%rax
 10c:	48 89 c2             	mov    %rax,%rdx
 10f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 113:	48 8b 08             	mov    (%rax),%rcx
 116:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
 11a:	48 89 ce             	mov    %rcx,%rsi
 11d:	48 89 c7             	mov    %rax,%rdi
 120:	e8 00 00 00 00       	callq  125 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x125>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
 125:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 129:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 12d:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
 130:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 134:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 138:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
 13c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 140:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 147:	00 
 148:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 14c:	48 01 c2             	add    %rax,%rdx
 14f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 153:	48 89 50 10          	mov    %rdx,0x10(%rax)
 157:	e9 8c 00 00 00       	jmpq   1e8 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1e8>
 15c:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
 15f:	e8 00 00 00 00       	callq  164 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x164>
 164:	48 89 d8             	mov    %rbx,%rax
 167:	48 89 c7             	mov    %rax,%rdi
 16a:	e8 00 00 00 00       	callq  16f <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x16f>
 16f:	48 89 c7             	mov    %rax,%rdi
 172:	e8 00 00 00 00       	callq  177 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x177>
	  {
	    if (!__new_finish)
 177:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
 17c:	75 2c                	jne    1aa <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1aa>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 17e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 182:	48 89 c7             	mov    %rax,%rdi
 185:	e8 00 00 00 00       	callq  18a <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x18a>
 18a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
 191:	00 
 192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 196:	48 01 c2             	add    %rax,%rdx
 199:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 19d:	48 89 d6             	mov    %rdx,%rsi
 1a0:	48 89 c7             	mov    %rax,%rdi
 1a3:	e8 00 00 00 00       	callq  1a8 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1a8>
 1a8:	eb 22                	jmp    1cc <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1cc>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 1aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ae:	48 89 c7             	mov    %rax,%rdi
 1b1:	e8 00 00 00 00       	callq  1b6 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1b6>
 1b6:	48 89 c2             	mov    %rax,%rdx
 1b9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c1:	48 89 ce             	mov    %rcx,%rsi
 1c4:	48 89 c7             	mov    %rax,%rdi
 1c7:	e8 00 00 00 00       	callq  1cc <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1cc>
	    _M_deallocate(__new_start, __len);
 1cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1d0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 1d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 1d8:	48 89 ce             	mov    %rcx,%rsi
 1db:	48 89 c7             	mov    %rax,%rdi
 1de:	e8 00 00 00 00       	callq  1e3 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1e3>
	    __throw_exception_again;
 1e3:	e8 00 00 00 00       	callq  1e8 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIRKlEEEvDpOT_+0x1e8>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
 1e8:	48 83 c4 38          	add    $0x38,%rsp
 1ec:	5b                   	pop    %rbx
 1ed:	5d                   	pop    %rbp
 1ee:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD1Ev>:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
       	pointer;

      struct _Vector_impl 
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEEC1Ev>:

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_impl() { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseIlSaIlEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEED1Ev>:
	    _M_create_storage(__n);
	  }
      }
#endif

      ~_Vector_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	48 89 c2             	mov    %rax,%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 29 c2             	sub    %rax,%rdx
  26:	48 89 d0             	mov    %rdx,%rax
  29:	48 c1 f8 03          	sar    $0x3,%rax
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 8b 08             	mov    (%rax),%rcx
	  }
      }
#endif

      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	48 89 ce             	mov    %rcx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt12_Vector_baseIlSaIlEED1Ev+0x46>
		      - this->_M_impl._M_start); }
  46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZNSt12_Vector_baseIlSaIlEED1Ev+0x52>
  52:	c9                   	leaveq 
  53:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv>:
      
    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyIPllEvT_S1_RSaIT0_E の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIPllEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIPllEvT_S1_RSaIT0_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZSt8_DestroyIPllEvT_S1_RSaIT0_E+0x2c>
    }
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt6vectorI4PathSaIS0_EE15_M_erase_at_endEPS0_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI4PathSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI4PathSaIS0_EE15_M_erase_at_endEPS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt6vectorI4PathSaIS0_EE15_M_erase_at_endEPS0_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 48 08          	mov    0x8(%rax),%rcx
  2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt6vectorI4PathSaIS0_EE15_M_erase_at_endEPS0_+0x3b>
	this->_M_impl._M_finish = __pos;
  3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  43:	48 89 50 08          	mov    %rdx,0x8(%rax)
      }
  47:	c9                   	leaveq 
  48:	c3                   	retq   

セクション .text._ZSt4moveIRSt11_Tuple_implILm1EIEEEONSt16remove_referenceIT_E4typeEOS4_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt11_Tuple_implILm1EIEEEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt11_Tuple_implILm1EIEEEONSt16remove_referenceIT_E4typeEOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt10shared_ptrINSt13__future_base11_State_baseEEaSEOS2_ の逆アセンブル:

0000000000000000 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEaSEOS2_>:
	  return *this;
	}
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEaSEOS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEaSEOS2_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt10shared_ptrINSt13__future_base11_State_baseEEaSEOS2_+0x33>
	return *this;
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 48          	sub    $0x48,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0xe>
   e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  12:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
      {
	vector __tmp(get_allocator());
  16:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  1a:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
  1e:	48 89 d6             	mov    %rdx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x29>
  29:	48 8d 55 cf          	lea    -0x31(%rbp),%rdx
  2d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  31:	48 89 d6             	mov    %rdx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x3c>
  3c:	48 8d 45 cf          	lea    -0x31(%rbp),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x48>
	this->_M_impl._M_swap_data(__tmp._M_impl);
  48:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4c:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  50:	48 89 d6             	mov    %rdx,%rsi
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x5b>
	this->_M_impl._M_swap_data(__x._M_impl);
  5b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x6e>
	if (_Alloc_traits::_S_propagate_on_move_assign())
  6e:	e8 00 00 00 00       	callq  73 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x73>
  73:	84 c0                	test   %al,%al
  75:	74 26                	je     9d <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x9d>
	  std::__alloc_on_move(_M_get_Tp_allocator(),
			       __x._M_get_Tp_allocator());
  77:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  7b:	48 89 c7             	mov    %rax,%rdi
  7e:	e8 00 00 00 00       	callq  83 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x83>
  83:	48 89 c3             	mov    %rax,%rbx
      {
	vector __tmp(get_allocator());
	this->_M_impl._M_swap_data(__tmp._M_impl);
	this->_M_impl._M_swap_data(__x._M_impl);
	if (_Alloc_traits::_S_propagate_on_move_assign())
	  std::__alloc_on_move(_M_get_Tp_allocator(),
  86:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8a:	48 89 c7             	mov    %rax,%rdi
  8d:	e8 00 00 00 00       	callq  92 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x92>
  92:	48 89 de             	mov    %rbx,%rsi
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	callq  9d <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0x9d>
			       __x._M_get_Tp_allocator());
  9d:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  a1:	48 89 c7             	mov    %rax,%rdi
  a4:	e8 00 00 00 00       	callq  a9 <_ZNSt6vectorIlSaIlEE14_M_move_assignEOS1_St17integral_constantIbLb1EE+0xa9>
      }
  a9:	48 83 c4 48          	add    $0x48,%rsp
  ad:	5b                   	pop    %rbx
  ae:	5d                   	pop    %rbp
  af:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EE3endEv の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorI9PathPointSaIS0_EE3endEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return iterator(this->_M_impl._M_finish); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8d 50 08          	lea    0x8(%rax),%rdx
  19:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt6vectorI9PathPointSaIS0_EE3endEv+0x28>
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt8iteratorISt26random_access_iterator_tag9PathPointlPS1_RS1_EC2Ev の逆アセンブル:

0000000000000000 <_ZNSt8iteratorISt26random_access_iterator_tag9PathPointlPS1_RS1_EC1Ev>:
   *  In particular, there are no default implementations of requirements
   *  such as @c operator++ and the like.  (How could there be?)
  */
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8iteratorISt26random_access_iterator_tag9PathPointlPS1_RS1_EC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEC2ES7_ の逆アセンブル:

0000000000000000 <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEC1ES7_>:

      /**
       *  This %iterator will move in the opposite direction that @p x does.
      */
      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEC1ES7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEC1ES7_+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  29:	48 89 10             	mov    %rdx,(%rax)
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEdeEv の逆アセンブル:

0000000000000000 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEdeEv>:
       *           underlying iterator type, @c x, a reference obtained by
       *           @c *x remains valid after @c x has been modified or
       *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
      */
      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEdeEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
	_Iterator __tmp = current;
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	return *--__tmp;
  1c:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEdeEv+0x28>
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNKSt16reverse_iteratorIN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS2_SaIS2_EEEEEdeEv+0x30>
      }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept = 0;
      
      // Called when _M_weak_count drops to zero.
      virtual void
      _M_destroy() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { delete this; }
  11:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  16:	74 17                	je     2f <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv+0x2f>
  18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1c:	48 8b 00             	mov    (%rax),%rax
  1f:	48 83 c0 08          	add    $0x8,%rax
  23:	48 8b 00             	mov    (%rax),%rax
  26:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2a:	48 89 d7             	mov    %rdx,%rdi
  2d:	ff d0                	callq  *%rax
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZSt11__addressofISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEPT_RS8_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEPT_RS8_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEPT_RS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt11__addressofIbEPT_RS0_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofIbEPT_RS0_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofIbEPT_RS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt26_Maybe_wrap_member_pointerIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEE9__do_wrapESC_ の逆アセンブル:

0000000000000000 <_ZNSt26_Maybe_wrap_member_pointerIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEE9__do_wrapESC_>:
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt26_Maybe_wrap_member_pointerIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEE9__do_wrapESC_+0xd>
   d:	48 89 f8             	mov    %rdi,%rax
  10:	48 89 f1             	mov    %rsi,%rcx
  13:	48 89 ca             	mov    %rcx,%rdx
  16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return type(__pm); }
  1e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  26:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2a:	48 89 ce             	mov    %rcx,%rsi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt26_Maybe_wrap_member_pointerIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEE9__do_wrapESC_+0x35>
  35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

セクション .text._ZSt4moveIRSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEONSt16remove_referenceIT_E4typeEOSH_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEONSt16remove_referenceIT_E4typeEOSH_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEEONSt16remove_referenceIT_E4typeEOSH_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm4EIEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm4EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm4EIEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC2IS1_IEvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC1IS1_IEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC1IS1_IEvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC1IS1_IEvEEOT_DpOT0_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC1IS1_IEvEEOT_DpOT0_+0x2d>
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt11_Tuple_implILm3EISt17reference_wrapperIbEEEC1IS1_IEvEEOT_DpOT0_+0x3f>
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC2IS9_ISA_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_+0x37>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	48 83 c2 08          	add    $0x8,%rdx
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	48 89 d7             	mov    %rdx,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt11_Tuple_implILm2EISt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEES0_IbEEEC1IS9_ISA_EvEEOT_DpOT0_+0x56>
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EEC2IKS2_EEOT_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EEC1IKS2_EEOT_>:

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EEC1IKS2_EEOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt10_Head_baseILm1EPNSt13__future_base11_State_baseELb0EEC1IKS2_EEOT_+0x21>
  21:	48 8b 10             	mov    (%rax),%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 10             	mov    %rdx,(%rax)
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC2IKS2_ISB_SC_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0x39>
  39:	48 89 c1             	mov    %rax,%rcx
	  _Base(std::forward<_UHead>(__head)) { }
  3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40:	48 89 da             	mov    %rbx,%rdx
  43:	48 89 ce             	mov    %rcx,%rsi
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0x4e>
  4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0x5a>
  5a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  5e:	48 83 c2 10          	add    $0x10,%rdx
  62:	48 89 c6             	mov    %rax,%rsi
  65:	48 89 d7             	mov    %rdx,%rdi
  68:	e8 00 00 00 00       	callq  6d <_ZNSt11_Tuple_implILm1EIPNSt13__future_base11_State_baseESt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEEC1IKS2_ISB_SC_EvEEOT_DpOT0_+0x6d>
  6d:	48 83 c4 28          	add    $0x28,%rsp
  71:	5b                   	pop    %rbx
  72:	5d                   	pop    %rbp
  73:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC2ISE_IKSF_SH_SI_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 30          	sub    $0x30,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  18:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  20:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  24:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x30>
  30:	49 89 c4             	mov    %rax,%r12
  33:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x3f>
  3f:	48 89 c3             	mov    %rax,%rbx
  42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x4e>
  4e:	48 89 c6             	mov    %rax,%rsi
	  _Base(std::forward<_UHead>(__head)) { }
  51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  55:	4c 89 e1             	mov    %r12,%rcx
  58:	48 89 da             	mov    %rbx,%rdx
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x63>
  63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x6f>
  6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  73:	48 83 c2 18          	add    $0x18,%rdx
  77:	48 89 c6             	mov    %rax,%rsi
  7a:	48 89 d7             	mov    %rdx,%rdi
  7d:	e8 00 00 00 00       	callq  82 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1ISE_IKSF_SH_SI_EvEEOT_DpOT0_+0x82>
  82:	48 83 c4 30          	add    $0x30,%rsp
  86:	5b                   	pop    %rbx
  87:	41 5c                	pop    %r12
  89:	5d                   	pop    %rbp
  8a:	c3                   	retq   

セクション .text._ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC2IISE_KSF_SH_SI_EvEEDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_>:

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
					_Elements>...>::value>::type>
	explicit
        constexpr tuple(_UElements&&... __elements)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x12>
  12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  16:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  1a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  1e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  22:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	: _Inherited(std::forward<_UElements>(__elements)...) {	}
  26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x32>
  32:	49 89 c5             	mov    %rax,%r13
  35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x41>
  41:	49 89 c4             	mov    %rax,%r12
  44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x50>
  50:	48 89 c3             	mov    %rax,%rbx
  53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x5f>
  5f:	48 89 c6             	mov    %rax,%rsi
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	4d 89 e8             	mov    %r13,%r8
  69:	4c 89 e1             	mov    %r12,%rcx
  6c:	48 89 da             	mov    %rbx,%rdx
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZNSt5tupleIISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IISE_KSF_SH_SI_EvEEDpOT_+0x77>
  77:	48 83 c4 38          	add    $0x38,%rsp
  7b:	5b                   	pop    %rbx
  7c:	41 5c                	pop    %r12
  7e:	41 5d                	pop    %r13
  80:	5d                   	pop    %rbp
  81:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC2IIKSF_SH_SI_EvEEOSE_DpOT_ の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_>:
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 38          	sub    $0x38,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x12>
  12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  16:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  1a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  1e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  22:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
  26:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x32>
  32:	49 89 c5             	mov    %rax,%r13
  35:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x41>
  41:	49 89 c4             	mov    %rax,%r12
  44:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x50>
  50:	48 89 c3             	mov    %rax,%rbx
  53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  57:	48 89 c7             	mov    %rax,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x5f>
  5f:	48 89 c6             	mov    %rax,%rsi
  62:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  66:	4d 89 e8             	mov    %r13,%r8
  69:	4c 89 e1             	mov    %r12,%rcx
  6c:	48 89 da             	mov    %rbx,%rdx
  6f:	48 89 c7             	mov    %rax,%rdi
  72:	e8 00 00 00 00       	callq  77 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEC1IIKSF_SH_SI_EvEEOSE_DpOT_+0x77>
        { }
  77:	48 83 c4 38          	add    $0x38,%rsp
  7b:	5b                   	pop    %rbx
  7c:	41 5c                	pop    %r12
  7e:	41 5d                	pop    %r13
  80:	5d                   	pop    %rbp
  81:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEclEv の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEclEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	88 14 24             	mov    %dl,(%rsp)
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEEclEv+0x20>
      }
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE4swapERS4_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE4swapERS4_>:
	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
	  return *this;
	}

      void
      swap(tuple& __in)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE4swapERS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt5tupleIIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE4swapERS4_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERKS4_ の逆アセンブル:

0000000000000000 <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERKS4_>:

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Head_baseILm0EPNSt13__future_base7_ResultIvEELb0EE7_M_headERKS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERKS6_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERKS6_>:

      static constexpr _Head&  
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERKS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt11_Tuple_implILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEE7_M_headERKS6_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS7_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS7_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS7_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0EPNSt13__future_base7_ResultIvEEINS0_12_Result_base8_DeleterEEENSt11__add_c_refIT0_E4typeERKSt11_Tuple_implIXT_EIS7_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKSB_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKSB_>:

  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EIPNSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEENSt11__add_c_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERKSB_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE3getEv の逆アセンブル:

0000000000000000 <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE3getEv>:
	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
	return get();
      }

      pointer
      get() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE3getEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::get<0>(_M_t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEE3getEv+0x1d>
  1d:	48 8b 00             	mov    (%rax),%rax
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v の逆アセンブル:

0000000000000000 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapISt9_Any_dataEvRT_S2_ の逆アセンブル:

0000000000000000 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapISt9_Any_dataEvRT_S2_+0xd>
   d:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  11:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  15:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  1c:	00 00 
  1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  22:	31 c0                	xor    %eax,%eax
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt4swapISt9_Any_dataEvRT_S2_+0x30>
  30:	48 8b 50 08          	mov    0x8(%rax),%rdx
  34:	48 8b 00             	mov    (%rax),%rax
  37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  3b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  3f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZSt4swapISt9_Any_dataEvRT_S2_+0x4b>
  4b:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  4f:	48 8b 50 08          	mov    0x8(%rax),%rdx
  53:	48 8b 00             	mov    (%rax),%rax
  56:	48 89 01             	mov    %rax,(%rcx)
  59:	48 89 51 08          	mov    %rdx,0x8(%rcx)
      __b = _GLIBCXX_MOVE(__tmp);
  5d:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZSt4swapISt9_Any_dataEvRT_S2_+0x69>
  69:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  6d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  71:	48 8b 00             	mov    (%rax),%rax
  74:	48 89 01             	mov    %rax,(%rcx)
  77:	48 89 51 08          	mov    %rdx,0x8(%rcx)
    }
  7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  7f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  86:	00 00 
  88:	74 05                	je     8f <_ZSt4swapISt9_Any_dataEvRT_S2_+0x8f>
  8a:	e8 00 00 00 00       	callq  8f <_ZSt4swapISt9_Any_dataEvRT_S2_+0x8f>
  8f:	c9                   	leaveq 
  90:	c3                   	retq   

セクション .text._ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_ の逆アセンブル:

0000000000000000 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEEvRT_S8_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZSt11__addressofISt6threadEPT_RS1_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofISt6threadEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofISt6threadEPT_RS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt26_Maybe_wrap_member_pointerIMSt6threadFvvEE9__do_wrapES2_ の逆アセンブル:

0000000000000000 <_ZNSt26_Maybe_wrap_member_pointerIMSt6threadFvvEE9__do_wrapES2_>:
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt26_Maybe_wrap_member_pointerIMSt6threadFvvEE9__do_wrapES2_+0xd>
   d:	48 89 f8             	mov    %rdi,%rax
  10:	48 89 f1             	mov    %rsi,%rcx
  13:	48 89 ca             	mov    %rcx,%rdx
  16:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return type(__pm); }
  1e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  22:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  26:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2a:	48 89 ce             	mov    %rcx,%rsi
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt26_Maybe_wrap_member_pointerIMSt6threadFvvEE9__do_wrapES2_+0x35>
  35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  39:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

セクション .text._ZSt4moveIRSt7_Mem_fnIMSt6threadFvvEEEONSt16remove_referenceIT_E4typeEOS7_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt7_Mem_fnIMSt6threadFvvEEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt7_Mem_fnIMSt6threadFvvEEEONSt16remove_referenceIT_E4typeEOS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC2IS2_IEvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC1IS2_IEvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC1IS2_IEvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
	  _Base(std::forward<_UHead>(__head)) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC1IS2_IEvEEOT_DpOT0_+0x21>
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC1IS2_IEvEEOT_DpOT0_+0x2d>
  2d:	48 89 c2             	mov    %rax,%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 d6             	mov    %rdx,%rsi
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt11_Tuple_implILm1EISt17reference_wrapperISt6threadEEEC1IS2_IEvEEOT_DpOT0_+0x3f>
  3f:	c9                   	leaveq 
  40:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC2IS4_IS6_EvEEOT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_>:
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type> 
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: _Inherited(std::forward<_UTail>(__tail)...),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	  _Base(std::forward<_UHead>(__head)) { }
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_+0x37>
  37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_+0x43>
  43:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  47:	48 83 c2 08          	add    $0x8,%rdx
  4b:	48 89 c6             	mov    %rax,%rsi
  4e:	48 89 d7             	mov    %rdx,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt11_Tuple_implILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_IS6_EvEEOT_DpOT0_+0x56>
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC2IS4_S6_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_S6_vEEOT_OT0_>:

      template<typename _U1, typename _U2, typename = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_S6_vEEOT_OT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_S6_vEEOT_OT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_S6_vEEOT_OT0_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt5tupleIISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IS4_S6_vEEOT_OT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC2IIS6_EvEEOS4_DpOT_ の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IIS6_EvEEOS4_DpOT_>:
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IIS6_EvEEOS4_DpOT_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IIS6_EvEEOS4_DpOT_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IIS6_EvEEOS4_DpOT_+0x35>
  35:	48 89 c1             	mov    %rax,%rcx
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 89 da             	mov    %rbx,%rdx
  3f:	48 89 ce             	mov    %rcx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEC1IIS6_EvEEOS4_DpOT_+0x4a>
        { }
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEclEv の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEclEv>:

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEclEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	88 14 24             	mov    %dl,(%rsp)
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEEclEv+0x20>
      }
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEC2ERKS3_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEC1ERKS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	c9                   	leaveq 
  24:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  33:	00 
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  3f:	00 
	{ }
  40:	c9                   	leaveq 
  41:	c3                   	retq   

セクション .text._ZNSaI9PathPointED2Ev の逆アセンブル:

0000000000000000 <_ZNSaI9PathPointED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaI9PathPointED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaI9PathPointED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE13_M_deallocateEPS0_m の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE13_M_deallocateEPS0_m>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE13_M_deallocateEPS0_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  19:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1e:	74 17                	je     37 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE13_M_deallocateEPS0_m+0x37>
	  _M_impl.deallocate(__p, __n);
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE13_M_deallocateEPS0_m+0x37>
      }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZSt8_DestroyIP9PathPointEvT_S2_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIP9PathPointEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIP9PathPointEvT_S2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt8_DestroyIP9PathPointEvT_S2_+0x28>
	__destroy(__first, __last);
    }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaI9PathPointEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaI9PathPointEE9constructIS0_IS0_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS1_PT_DpOS4_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1a:	ba 00 00 00 00       	mov    $0x0,%edx
  1f:	be 01 00 00 00       	mov    $0x1,%esi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x2c>
  2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x43>
  43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x5b>
  5b:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x6a>
  6a:	48 89 c2             	mov    %rax,%rdx
				     std::forward<_Args>(__args)...);
  6d:	48 89 d0             	mov    %rdx,%rax
  70:	48 c1 e0 02          	shl    $0x2,%rax
  74:	48 01 d0             	add    %rdx,%rax
  77:	48 c1 e0 03          	shl    $0x3,%rax
  7b:	48 89 c2             	mov    %rax,%rdx
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  8a:	48 89 da             	mov    %rbx,%rdx
  8d:	48 89 ce             	mov    %rcx,%rsi
  90:	48 89 c7             	mov    %rax,%rdi
  93:	e8 00 00 00 00       	callq  98 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x98>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  98:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  9f:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a4:	48 89 c7             	mov    %rax,%rdi
  a7:	e8 00 00 00 00       	callq  ac <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0xac>
  ac:	48 89 c1             	mov    %rax,%rcx
  af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b3:	48 8b 70 08          	mov    0x8(%rax),%rsi
  b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  bb:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  be:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c2:	48 89 c7             	mov    %rax,%rdi
  c5:	e8 00 00 00 00       	callq  ca <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0xca>
  ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  ce:	48 83 45 d8 28       	addq   $0x28,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  d3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d7:	48 89 c7             	mov    %rax,%rdi
  da:	e8 00 00 00 00       	callq  df <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0xdf>
  df:	48 89 c2             	mov    %rax,%rdx
  e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e6:	48 8b 48 08          	mov    0x8(%rax),%rcx
  ea:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ee:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  f1:	48 89 ce             	mov    %rcx,%rsi
  f4:	48 89 c7             	mov    %rax,%rdi
  f7:	e8 00 00 00 00       	callq  fc <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0xfc>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 100:	48 8b 40 10          	mov    0x10(%rax),%rax
 104:	48 89 c2             	mov    %rax,%rdx
 107:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 10b:	48 8b 00             	mov    (%rax),%rax
 10e:	48 29 c2             	sub    %rax,%rdx
 111:	48 89 d0             	mov    %rdx,%rax
 114:	48 c1 f8 03          	sar    $0x3,%rax
 118:	48 89 c2             	mov    %rax,%rdx
 11b:	48 b8 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rax
 122:	cc cc cc 
 125:	48 0f af c2          	imul   %rdx,%rax
 129:	48 89 c2             	mov    %rax,%rdx
 12c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 130:	48 8b 08             	mov    (%rax),%rcx
 133:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
 137:	48 89 ce             	mov    %rcx,%rsi
 13a:	48 89 c7             	mov    %rax,%rdi
 13d:	e8 00 00 00 00       	callq  142 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x142>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
 142:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 146:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 14a:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
 14d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 151:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 155:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
 159:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 15d:	48 89 d0             	mov    %rdx,%rax
 160:	48 c1 e0 02          	shl    $0x2,%rax
 164:	48 01 d0             	add    %rdx,%rax
 167:	48 c1 e0 03          	shl    $0x3,%rax
 16b:	48 89 c2             	mov    %rax,%rdx
 16e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 172:	48 01 c2             	add    %rax,%rdx
 175:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 179:	48 89 50 10          	mov    %rdx,0x10(%rax)
 17d:	e9 98 00 00 00       	jmpq   21a <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x21a>
 182:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
 185:	e8 00 00 00 00       	callq  18a <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x18a>
 18a:	48 89 d8             	mov    %rbx,%rax
 18d:	48 89 c7             	mov    %rax,%rdi
 190:	e8 00 00 00 00       	callq  195 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x195>
 195:	48 89 c7             	mov    %rax,%rdi
 198:	e8 00 00 00 00       	callq  19d <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x19d>
	  {
	    if (!__new_finish)
 19d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
 1a2:	75 38                	jne    1dc <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1dc>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 1a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a8:	48 89 c7             	mov    %rax,%rdi
 1ab:	e8 00 00 00 00       	callq  1b0 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1b0>
 1b0:	48 89 c2             	mov    %rax,%rdx
 1b3:	48 89 d0             	mov    %rdx,%rax
 1b6:	48 c1 e0 02          	shl    $0x2,%rax
 1ba:	48 01 d0             	add    %rdx,%rax
 1bd:	48 c1 e0 03          	shl    $0x3,%rax
 1c1:	48 89 c2             	mov    %rax,%rdx
 1c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c8:	48 01 c2             	add    %rax,%rdx
 1cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1cf:	48 89 d6             	mov    %rdx,%rsi
 1d2:	48 89 c7             	mov    %rax,%rdi
 1d5:	e8 00 00 00 00       	callq  1da <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1da>
 1da:	eb 22                	jmp    1fe <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1fe>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 1dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1e0:	48 89 c7             	mov    %rax,%rdi
 1e3:	e8 00 00 00 00       	callq  1e8 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1e8>
 1e8:	48 89 c2             	mov    %rax,%rdx
 1eb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f3:	48 89 ce             	mov    %rcx,%rsi
 1f6:	48 89 c7             	mov    %rax,%rdi
 1f9:	e8 00 00 00 00       	callq  1fe <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x1fe>
	    _M_deallocate(__new_start, __len);
 1fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 202:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 206:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 20a:	48 89 ce             	mov    %rcx,%rsi
 20d:	48 89 c7             	mov    %rax,%rdi
 210:	e8 00 00 00 00       	callq  215 <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x215>
	    __throw_exception_again;
 215:	e8 00 00 00 00       	callq  21a <_ZNSt6vectorI9PathPointSaIS0_EE19_M_emplace_back_auxIIS0_EEEvDpOT_+0x21a>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
 21a:	48 83 c4 38          	add    $0x38,%rsp
 21e:	5b                   	pop    %rbx
 21f:	5d                   	pop    %rbp
 220:	c3                   	retq   

セクション .text._ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC2EPSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC1EPSt13_Rb_tree_nodeIS3_E>:

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEC1EPSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_node(__x) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_M_endEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_M_endEv>:
	return static_cast<_Const_Link_type>
	  (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_M_endEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  19:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
  1d:	eb 53                	jmp    72 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x72>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x2b>
  2b:	48 89 c1             	mov    %rax,%rcx
  2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  32:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  36:	48 89 ce             	mov    %rcx,%rsi
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x41>
  41:	83 f0 01             	xor    $0x1,%eax
  44:	84 c0                	test   %al,%al
  46:	74 1a                	je     62 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x62>
	  __y = __x, __x = _S_left(__x);
  48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x5c>
  5c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  60:	eb 10                	jmp    72 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x72>
	else
	  __x = _S_right(__x);
  62:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x6e>
  6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
		   const _Key& __k)
    {
      while (__x != 0)
  72:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  77:	75 a6                	jne    1f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x1f>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
	  __y = __x, __x = _S_left(__x);
	else
	  __x = _S_right(__x);
      return iterator(__y);
  79:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  7d:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  81:	48 89 d6             	mov    %rdx,%rsi
  84:	48 89 c7             	mov    %rax,%rdi
  87:	e8 00 00 00 00       	callq  8c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_ESC_RS1_+0x8c>
  8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
    }
  90:	c9                   	leaveq 
  91:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _KeyOfValue()(_S_value(__x)); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  24:	48 89 d6             	mov    %rdx,%rsi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base+0x2f>
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZNKSt4lessISsEclERKSsS2_ の逆アセンブル:

0000000000000000 <_ZNKSt4lessISsEclERKSsS2_>:
  /// One of the @link comparison_functors comparison functors@endlink.
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt4lessISsEclERKSsS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { return __x < __y; }
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  21:	48 89 d6             	mov    %rdx,%rsi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNKSt4lessISsEclERKSsS2_+0x2c>
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC2EOS1_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1EOS1_>:
	_Vector_impl(_Tp_alloc_type const& __a)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

#if __cplusplus >= 201103L
	_Vector_impl(_Tp_alloc_type&& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1EOS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(std::move(__a)),
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1EOS1_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1EOS1_+0x33>
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  49:	00 
  4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4e:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  55:	00 
	{ }
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_>:
#endif

	void _M_swap_data(_Vector_impl& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  std::swap(_M_start, __x._M_start);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_+0x28>
	  std::swap(_M_finish, __x._M_finish);
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 83 c0 08          	add    $0x8,%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_+0x43>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 8d 50 10          	lea    0x10(%rax),%rdx
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	48 83 c0 10          	add    $0x10,%rax
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_impl12_M_swap_dataERS3_+0x5e>
	}
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

セクション .text._ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS8_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS8_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKSs4PathEEEOT_RNSt16remove_referenceIS8_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRPSt13_Rb_tree_nodeIS_IKSs4PathEESA_vEEOT_OT0_ の逆アセンブル:

0000000000000000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKSs4PathEESA_vEEOT_OT0_>:
	: first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
	       enable_if<__and_<is_convertible<_U1, _T1>,
				is_convertible<_U2, _T2>>::value>::type>
	constexpr pair(_U1&& __x, _U2&& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKSs4PathEESA_vEEOT_OT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKSs4PathEESA_vEEOT_OT0_+0x25>
  25:	48 8b 10             	mov    (%rax),%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 10             	mov    %rdx,(%rax)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKSs4PathEESA_vEEOT_OT0_+0x3b>
  3b:	48 8b 10             	mov    (%rax),%rdx
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	48 89 50 08          	mov    %rdx,0x8(%rax)
  46:	c9                   	leaveq 
  47:	c3                   	retq   

セクション .text._ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC2IRS1_vEEOT_RKS1_ の逆アセンブル:

0000000000000000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_vEEOT_RKS1_>:
      constexpr pair(pair&&) = default;

      // DR 811.
      template<class _U1, class = typename
	       enable_if<is_convertible<_U1, _T1>::value>::type>
	constexpr pair(_U1&& __x, const _T2& __y)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_vEEOT_RKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	: first(std::forward<_U1>(__x)), second(__y) { }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_vEEOT_RKS1_+0x25>
  25:	48 8b 10             	mov    (%rax),%rdx
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 10             	mov    %rdx,(%rax)
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 10             	mov    (%rax),%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 50 08          	mov    %rdx,0x8(%rax)
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_>:
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr,
	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
			   _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 50          	sub    $0x50,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xd>
   d:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  11:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
  15:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x21>
  21:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
      _Link_type __y = _M_end();
  25:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x31>
  31:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      bool __comp = true;
  35:	c6 45 cf 01          	movb   $0x1,-0x31(%rbp)
      while (__x != 0)
  39:	eb 51                	jmp    8c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x8c>
	{
	  __y = __x;
  3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
  43:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x4f>
  4f:	48 89 c2             	mov    %rax,%rdx
  52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  56:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  5a:	48 89 ce             	mov    %rcx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x65>
  65:	88 45 cf             	mov    %al,-0x31(%rbp)
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  68:	80 7d cf 00          	cmpb   $0x0,-0x31(%rbp)
  6c:	74 0e                	je     7c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x7c>
  6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	callq  7a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x7a>
  7a:	eb 0c                	jmp    88 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x88>
  7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x88>
  88:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
  8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  90:	48 85 c0             	test   %rax,%rax
  93:	75 a6                	jne    3b <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x3b>
	{
	  __y = __x;
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
	  __x = __comp ? _S_left(__x) : _S_right(__x);
	}
      iterator __j = iterator(__y);
  95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  99:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  9d:	48 89 d6             	mov    %rdx,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	callq  a8 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xa8>
      if (__comp)
  a8:	80 7d cf 00          	cmpb   $0x0,-0x31(%rbp)
  ac:	74 54                	je     102 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	{
	  if (__j == begin())
  ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	callq  ba <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xba>
  ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  be:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  c2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  c6:	48 89 d6             	mov    %rdx,%rsi
  c9:	48 89 c7             	mov    %rax,%rdi
  cc:	e8 00 00 00 00       	callq  d1 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xd1>
  d1:	84 c0                	test   %al,%al
  d3:	74 21                	je     f6 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xf6>
	    return _Res(__x, __y);
  d5:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  d9:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  dd:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  e1:	48 89 ce             	mov    %rcx,%rsi
  e4:	48 89 c7             	mov    %rax,%rdi
  e7:	e8 00 00 00 00       	callq  ec <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0xec>
  ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  f4:	eb 7a                	jmp    170 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x170>
	  else
	    --__j;
  f6:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  fa:	48 89 c7             	mov    %rax,%rdi
  fd:	e8 00 00 00 00       	callq  102 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	}
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 102:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
 106:	48 89 c7             	mov    %rax,%rdi
 109:	e8 00 00 00 00       	callq  10e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x10e>
 10e:	48 89 c1             	mov    %rax,%rcx
 111:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
 115:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
 119:	48 89 ce             	mov    %rcx,%rsi
 11c:	48 89 c7             	mov    %rax,%rdi
 11f:	e8 00 00 00 00       	callq  124 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x124>
 124:	84 c0                	test   %al,%al
 126:	74 21                	je     149 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x149>
	return _Res(__x, __y);
 128:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
 12c:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
 130:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
 134:	48 89 ce             	mov    %rcx,%rsi
 137:	48 89 c7             	mov    %rax,%rdi
 13a:	e8 00 00 00 00       	callq  13f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x13f>
 13f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 143:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
 147:	eb 27                	jmp    170 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x170>
      return _Res(__j._M_node, 0);
 149:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
 150:	00 
 151:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
 155:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
 159:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
 15d:	48 89 ce             	mov    %rcx,%rsi
 160:	48 89 c7             	mov    %rax,%rdi
 163:	e8 00 00 00 00       	callq  168 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE24_M_get_insert_unique_posERS1_+0x168>
 168:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
 16c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
    }
 170:	c9                   	leaveq 
 171:	c3                   	retq   

セクション .text._ZNKSt10_Select1stISt4pairIKSs4PathEEclIS0_ISsS2_EEERNT_10first_typeERS7_ の逆アセンブル:

0000000000000000 <_ZNKSt10_Select1stISt4pairIKSs4PathEEclIS0_ISsS2_EEERNT_10first_typeERS7_>:
      { return __x.first; }

#if __cplusplus >= 201103L
      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10_Select1stISt4pairIKSs4PathEEclIS0_ISsS2_EEERNT_10first_typeERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
        { return __x.first; }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_>:
           typename _Compare, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename _Arg>
#endif
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 40          	sub    $0x40,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x10>
  10:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  14:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  18:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  1c:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
#endif
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
						      _S_key(__p)));
  20:	bb 00 00 00 00       	mov    $0x0,%ebx
  25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  2a:	75 52                	jne    7e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x7e>
    _M_insert_(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)
#else
    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
#endif
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
  2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x38>
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
						      _S_key(__p)));
  38:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  3c:	74 40                	je     7e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x7e>
  3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x4a>
  4a:	49 89 c4             	mov    %rax,%r12
  4d:	bb 01 00 00 00       	mov    $0x1,%ebx
#else
    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
#endif
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
  52:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  56:	48 8d 45 de          	lea    -0x22(%rbp),%rax
  5a:	48 89 d6             	mov    %rdx,%rsi
  5d:	48 89 c7             	mov    %rax,%rdi
  60:	e8 00 00 00 00       	callq  65 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x65>
  65:	48 89 c1             	mov    %rax,%rcx
  68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6c:	4c 89 e2             	mov    %r12,%rdx
  6f:	48 89 ce             	mov    %rcx,%rsi
  72:	48 89 c7             	mov    %rax,%rdi
  75:	e8 00 00 00 00       	callq  7a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x7a>
						      _S_key(__p)));
  7a:	84 c0                	test   %al,%al
  7c:	74 07                	je     85 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x85>
  7e:	b8 01 00 00 00       	mov    $0x1,%eax
  83:	eb 05                	jmp    8a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x8a>
  85:	b8 00 00 00 00       	mov    $0x0,%eax
  8a:	88 45 df             	mov    %al,-0x21(%rbp)
#else
    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
#endif
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
  8d:	84 db                	test   %bl,%bl
						      _S_key(__p)));
  8f:	90                   	nop

      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
  90:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  94:	48 89 c7             	mov    %rax,%rdi
  97:	e8 00 00 00 00       	callq  9c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x9c>
  9c:	48 89 c2             	mov    %rax,%rdx
  9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a3:	48 89 d6             	mov    %rdx,%rsi
  a6:	48 89 c7             	mov    %rax,%rdi
  a9:	e8 00 00 00 00       	callq  ae <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0xae>
  ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
				    this->_M_impl._M_header);
  b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b6:	48 8d 48 08          	lea    0x8(%rax),%rcx
  ba:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
						      _S_key(__p)));

      _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  be:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  c2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  c6:	89 c7                	mov    %eax,%edi
  c8:	e8 00 00 00 00       	callq  cd <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0xcd>
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
  cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d1:	48 8b 40 28          	mov    0x28(%rax),%rax
  d5:	48 8d 50 01          	lea    0x1(%rax),%rdx
  d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  dd:	48 89 50 28          	mov    %rdx,0x28(%rax)
      return iterator(__z);
  e1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  e5:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  e9:	48 89 d6             	mov    %rdx,%rsi
  ec:	48 89 c7             	mov    %rax,%rdi
  ef:	e8 00 00 00 00       	callq  f4 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0xf4>
  f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f8:	eb 0b                	jmp    105 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x105>
#else
    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
#endif
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
			    || _M_impl._M_key_compare(_KeyOfValue()(__v),
  fa:	84 db                	test   %bl,%bl
						      _S_key(__p)));
  fc:	90                   	nop
  fd:	48 89 c7             	mov    %rax,%rdi
 100:	e8 00 00 00 00       	callq  105 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE10_M_insert_IS0_ISsS2_EEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSF_OT_+0x105>

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
				    this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }
 105:	48 83 c4 40          	add    $0x40,%rsp
 109:	5b                   	pop    %rbx
 10a:	41 5c                	pop    %r12
 10c:	5d                   	pop    %rbp
 10d:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
        {
	  _Key_compare		_M_key_compare;
	  _Rb_tree_node_base 	_M_header;
	  size_type 		_M_node_count; // Keeps track of size of tree.

	  _Rb_tree_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  : _Node_allocator(), _M_key_compare(), _M_header(),
	    _M_node_count(0)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  33:	00 
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  3f:	00 
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  4b:	00 
  4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  50:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  57:	00 
	  { _M_initialize(); }
  58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5c:	48 89 c7             	mov    %rax,%rdi
  5f:	e8 00 00 00 00       	callq  64 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev+0x64>
  64:	c9                   	leaveq 
  65:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEED2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_right); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 18          	mov    0x18(%rax),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Link_type>(__x->_M_left); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 40 10          	mov    0x10(%rax),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
	    }
	  return __tmp;
	}

      void
      _M_destroy_node(_Link_type __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	_M_get_Node_allocator().destroy(__p);
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E+0x21>
  21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  25:	48 89 d6             	mov    %rdx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E+0x30>
	_M_put_node(__p);
  30:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E+0x43>
      }
  43:	c9                   	leaveq 
  44:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE9constructIS8_IS8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE9constructIS8_IS8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE9constructIS8_IS8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE9constructIS8_IS8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE9constructIS8_IS8_EEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS9_PT_DpOSC_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0xe>
   e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      _M_emplace_back_aux(_Args&&... __args)
      {
	const size_type __len =
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
  16:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1a:	ba 00 00 00 00       	mov    $0x0,%edx
  1f:	be 01 00 00 00       	mov    $0x1,%esi
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x2c>
  2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	pointer __new_start(this->_M_allocate(__len));
  30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  34:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x43>
  43:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	pointer __new_finish(__new_start);
  47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
  4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  53:	48 89 c7             	mov    %rax,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x5b>
  5b:	48 89 c3             	mov    %rax,%rbx
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  5e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x6a>
  6a:	48 89 c2             	mov    %rax,%rdx
				     std::forward<_Args>(__args)...);
  6d:	48 89 d0             	mov    %rdx,%rax
  70:	48 01 c0             	add    %rax,%rax
  73:	48 01 d0             	add    %rdx,%rax
  76:	48 c1 e0 04          	shl    $0x4,%rax
  7a:	48 89 c2             	mov    %rax,%rdx
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  85:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	  _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
	pointer __new_start(this->_M_allocate(__len));
	pointer __new_finish(__new_start);
	__try
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
  89:	48 89 da             	mov    %rbx,%rdx
  8c:	48 89 ce             	mov    %rcx,%rsi
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	callq  97 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x97>
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;
  97:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  9e:	00 

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());
  9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0xab>
  ab:	48 89 c1             	mov    %rax,%rcx
  ae:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  b2:	48 8b 70 08          	mov    0x8(%rax),%rsi
  b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ba:	48 8b 00             	mov    (%rax),%rax
	  {
	    _Alloc_traits::construct(this->_M_impl, __new_start + size(),
				     std::forward<_Args>(__args)...);
	    __new_finish = 0;

	    __new_finish
  bd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  c1:	48 89 c7             	mov    %rax,%rdi
  c4:	e8 00 00 00 00       	callq  c9 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0xc9>
  c9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  cd:	48 83 45 d8 30       	addq   $0x30,-0x28(%rbp)
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
  d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d6:	48 89 c7             	mov    %rax,%rdi
  d9:	e8 00 00 00 00       	callq  de <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0xde>
  de:	48 89 c2             	mov    %rax,%rdx
  e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  e5:	48 8b 48 08          	mov    0x8(%rax),%rcx
  e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ed:	48 8b 00             	mov    (%rax),%rax
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  f0:	48 89 ce             	mov    %rcx,%rsi
  f3:	48 89 c7             	mov    %rax,%rdi
  f6:	e8 00 00 00 00       	callq  fb <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0xfb>
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
  fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  ff:	48 8b 40 10          	mov    0x10(%rax),%rax
 103:	48 89 c2             	mov    %rax,%rdx
 106:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 10a:	48 8b 00             	mov    (%rax),%rax
 10d:	48 29 c2             	sub    %rax,%rdx
 110:	48 89 d0             	mov    %rdx,%rax
 113:	48 c1 f8 04          	sar    $0x4,%rax
 117:	48 89 c2             	mov    %rax,%rdx
 11a:	48 b8 ab aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaab,%rax
 121:	aa aa aa 
 124:	48 0f af c2          	imul   %rdx,%rax
 128:	48 89 c2             	mov    %rax,%rdx
 12b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 12f:	48 8b 08             	mov    (%rax),%rcx
 132:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
 136:	48 89 ce             	mov    %rcx,%rsi
 139:	48 89 c7             	mov    %rax,%rdi
 13c:	e8 00 00 00 00       	callq  141 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x141>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
 141:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 145:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
 149:	48 89 10             	mov    %rdx,(%rax)
	this->_M_impl._M_finish = __new_finish;
 14c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 150:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
 154:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = __new_start + __len;
 158:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 15c:	48 89 d0             	mov    %rdx,%rax
 15f:	48 01 c0             	add    %rax,%rax
 162:	48 01 d0             	add    %rdx,%rax
 165:	48 c1 e0 04          	shl    $0x4,%rax
 169:	48 89 c2             	mov    %rax,%rdx
 16c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 170:	48 01 c2             	add    %rax,%rdx
 173:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 177:	48 89 50 10          	mov    %rdx,0x10(%rax)
 17b:	e9 97 00 00 00       	jmpq   217 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x217>
 180:	48 89 c3             	mov    %rax,%rbx
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
	  }
	__catch(...)
 183:	e8 00 00 00 00       	callq  188 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x188>
 188:	48 89 d8             	mov    %rbx,%rax
 18b:	48 89 c7             	mov    %rax,%rdi
 18e:	e8 00 00 00 00       	callq  193 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x193>
 193:	48 89 c7             	mov    %rax,%rdi
 196:	e8 00 00 00 00       	callq  19b <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x19b>
	  {
	    if (!__new_finish)
 19b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
 1a0:	75 37                	jne    1d9 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1d9>
	      _Alloc_traits::destroy(this->_M_impl, __new_start + size());
 1a2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1a6:	48 89 c7             	mov    %rax,%rdi
 1a9:	e8 00 00 00 00       	callq  1ae <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1ae>
 1ae:	48 89 c2             	mov    %rax,%rdx
 1b1:	48 89 d0             	mov    %rdx,%rax
 1b4:	48 01 c0             	add    %rax,%rax
 1b7:	48 01 d0             	add    %rdx,%rax
 1ba:	48 c1 e0 04          	shl    $0x4,%rax
 1be:	48 89 c2             	mov    %rax,%rdx
 1c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1c5:	48 01 c2             	add    %rax,%rdx
 1c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1cc:	48 89 d6             	mov    %rdx,%rsi
 1cf:	48 89 c7             	mov    %rax,%rdi
 1d2:	e8 00 00 00 00       	callq  1d7 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1d7>
 1d7:	eb 22                	jmp    1fb <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1fb>
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 1d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1dd:	48 89 c7             	mov    %rax,%rdi
 1e0:	e8 00 00 00 00       	callq  1e5 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1e5>
 1e5:	48 89 c2             	mov    %rax,%rdx
 1e8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
 1ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 1f0:	48 89 ce             	mov    %rcx,%rsi
 1f3:	48 89 c7             	mov    %rax,%rdi
 1f6:	e8 00 00 00 00       	callq  1fb <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x1fb>
	    _M_deallocate(__new_start, __len);
 1fb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
 1ff:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
 203:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
 207:	48 89 ce             	mov    %rcx,%rsi
 20a:	48 89 c7             	mov    %rax,%rdi
 20d:	e8 00 00 00 00       	callq  212 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x212>
	    __throw_exception_again;
 212:	e8 00 00 00 00       	callq  217 <_ZNSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_emplace_back_auxIIS8_EEEvDpOT_+0x217>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
      }
 217:	48 83 c4 38          	add    $0x38,%rsp
 21b:	5b                   	pop    %rbx
 21c:	5d                   	pop    %rbp
 21d:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_Vector_implC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  33:	00 
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  3f:	00 
	{ }
  40:	c9                   	leaveq 
  41:	c3                   	retq   

セクション .text._ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEED2Ev の逆アセンブル:

0000000000000000 <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE13_M_deallocateEPS8_m の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE13_M_deallocateEPS8_m>:
      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE13_M_deallocateEPS8_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  19:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1e:	74 17                	je     37 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE13_M_deallocateEPS8_m+0x37>
	  _M_impl.deallocate(__p, __n);
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE13_M_deallocateEPS8_m+0x37>
      }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvT_SA_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvT_SA_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvT_SA_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt8_DestroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvT_SA_+0x28>
	__destroy(__first, __last);
    }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE8max_sizeERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE8max_sizeERKS1_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE8max_sizeERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaI4PathEE8max_sizeERKS1_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNKSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12_Vector_baseI4PathSaIS0_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIP4PathEC2ES1_ の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIP4PathEC1ES1_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIP4PathEC1ES1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  15:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1a:	74 1a                	je     36 <_ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm+0x36>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  24:	ba 00 00 00 00       	mov    $0x0,%edx
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm+0x34>
  34:	eb 05                	jmp    3b <_ZNSt12_Vector_baseI4PathSaIS0_EE11_M_allocateEm+0x3b>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt22__uninitialized_copy_aISt13move_iteratorIP4PathES2_S1_ET0_T_S5_S4_RSaIT1_E の逆アセンブル:

0000000000000000 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP4PathES2_S1_ET0_T_S5_S4_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt22__uninitialized_copy_aISt13move_iteratorIP4PathES2_S1_ET0_T_S5_S4_RSaIT1_E+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  19:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP4PathES2_S1_ET0_T_S5_S4_RSaIT1_E+0x34>
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZSt8_DestroyIP4PathEvT_S2_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIP4PathEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIP4PathEvT_S2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt8_DestroyIP4PathEvT_S2_+0x28>
	__destroy(__first, __last);
    }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI4PathE10deallocateEPS1_m の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI4PathE10deallocateEPS1_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI4PathE10deallocateEPS1_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorI4PathE10deallocateEPS1_m+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE12_S_constructIS0_IRKS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS8_DpOS9_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE12_S_constructIS0_IRKS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS8_DpOS9_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE12_S_constructIS0_IRKS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS8_DpOS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaI4PathEE12_S_constructIS0_IRKS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS8_DpOS9_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaI4PathEE12_S_constructIS0_IRKS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS8_DpOS9_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x35>
  35:	48 29 c3             	sub    %rax,%rbx
  38:	48 89 da             	mov    %rbx,%rdx
  3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  3f:	48 39 c2             	cmp    %rax,%rdx
  42:	0f 92 c0             	setb   %al
  45:	84 c0                	test   %al,%al
  47:	74 0c                	je     55 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x55>
	  __throw_length_error(__N(__s));
  49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x55>

	const size_type __len = size() + std::max(size(), __n);
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x61>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x70>
  70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  74:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  7c:	48 89 d6             	mov    %rdx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x87>
  87:	48 8b 00             	mov    (%rax),%rax
  8a:	48 01 d8             	add    %rbx,%rax
  8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	callq  9d <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0x9d>
  9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  a1:	77 12                	ja     b5 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xb5>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	callq  af <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xaf>
  af:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  b3:	73 0e                	jae    c3 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xc3>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xc1>
  c1:	eb 04                	jmp    c7 <_ZNKSt6vectorI4PathSaIS0_EE12_M_check_lenEmPKc+0xc7>
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  c7:	48 83 c4 38          	add    $0x38,%rsp
  cb:	5b                   	pop    %rbx
  cc:	5d                   	pop    %rbp
  cd:	c3                   	retq   

セクション .text._ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_ の逆アセンブル:

0000000000000000 <_ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_+0x39>
  39:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  3d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZSt34__uninitialized_move_if_noexcept_aIP4PathS1_SaIS0_EET0_T_S4_S3_RT1_+0x4c>
    }
  4c:	48 83 c4 28          	add    $0x28,%rsp
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE7destroyIS0_EEvRS1_PT_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE7destroyIS0_EEvRS1_PT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI4PathEE7destroyIS0_EEvRS1_PT_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE12_S_constructIlIRKlEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE12_S_constructIlIRKlEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE12_S_constructIlIRKlEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaIlEE12_S_constructIlIRKlEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaIlEE12_S_constructIlIRKlEEENSt9enable_ifIXsrNS1_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS0_PS7_DpOS8_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc の逆アセンブル:

0000000000000000 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x35>
  35:	48 29 c3             	sub    %rax,%rbx
  38:	48 89 da             	mov    %rbx,%rdx
  3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  3f:	48 39 c2             	cmp    %rax,%rdx
  42:	0f 92 c0             	setb   %al
  45:	84 c0                	test   %al,%al
  47:	74 0c                	je     55 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x55>
	  __throw_length_error(__N(__s));
  49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x55>

	const size_type __len = size() + std::max(size(), __n);
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x61>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x70>
  70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  74:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  7c:	48 89 d6             	mov    %rdx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x87>
  87:	48 8b 00             	mov    (%rax),%rax
  8a:	48 01 d8             	add    %rbx,%rax
  8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	callq  9d <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0x9d>
  9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  a1:	77 12                	ja     b5 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xb5>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	callq  af <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xaf>
  af:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  b3:	73 0e                	jae    c3 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xc3>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xc1>
  c1:	eb 04                	jmp    c7 <_ZNKSt6vectorIlSaIlEE12_M_check_lenEmPKc+0xc7>
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  c7:	48 83 c4 38          	add    $0x38,%rsp
  cb:	5b                   	pop    %rbx
  cc:	5d                   	pop    %rbp
  cd:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  15:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1a:	74 1a                	je     36 <_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm+0x36>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  24:	ba 00 00 00 00       	mov    $0x0,%edx
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm+0x34>
  34:	eb 05                	jmp    3b <_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm+0x3b>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_ の逆アセンブル:

0000000000000000 <_ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_+0x39>
  39:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  3d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZSt34__uninitialized_move_if_noexcept_aIPlS0_SaIlEET0_T_S3_S2_RT1_+0x4c>
    }
  4c:	48 83 c4 28          	add    $0x28,%rsp
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE7destroyIlEEvRS0_PT_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE7destroyIlEEvRS0_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE7destroyIlEEvRS0_PT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaIlEE7destroyIlEEvRS0_PT_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm>:

      void
      _M_deallocate(pointer __p, size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      {
	if (__p)
  19:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1e:	74 17                	je     37 <_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm+0x37>
	  _M_impl.deallocate(__p, __n);
  20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  24:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 89 ce             	mov    %rcx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm+0x37>
      }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2Ev の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1Ev>:
      {
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  33:	00 
  34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  38:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  3f:	00 
	{ }
  40:	c9                   	leaveq 
  41:	c3                   	retq   

セクション .text._ZNSaIlED2Ev の逆アセンブル:

0000000000000000 <_ZNSaIlED1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaIlED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaIlED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt8_DestroyIPlEvT_S1_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyIPlEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyIPlEvT_S1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt8_DestroyIPlEvT_S1_+0x28>
	__destroy(__first, __last);
    }
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EIEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EIEEC1Ev>:
  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm1EIEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZSt4moveIRSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEEONSt16remove_referenceIT_E4typeEOS8_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEEONSt16remove_referenceIT_E4typeEOS8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_ の逆アセンブル:

0000000000000000 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_>:
	  return *this;
	}
#endif

      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	__shared_ptr(std::move(__r)).swap(*this);
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_+0x33>
  33:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  37:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_+0x46>
  46:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZNSt12__shared_ptrINSt13__future_base11_State_baseELN9__gnu_cxx12_Lock_policyE2EEaSEOS4_+0x52>
	return *this;
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNKSt12_Vector_baseIlSaIlEE13get_allocatorEv の逆アセンブル:

0000000000000000 <_ZNKSt12_Vector_baseIlSaIlEE13get_allocatorEv>:
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12_Vector_baseIlSaIlEE13get_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return allocator_type(_M_get_Tp_allocator()); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNKSt12_Vector_baseIlSaIlEE13get_allocatorEv+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNKSt12_Vector_baseIlSaIlEE13get_allocatorEv+0x33>
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNSt6vectorIlSaIlEEC2ERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorIlSaIlEEC1ERKS0_>:
      /**
       *  @brief  Creates a %vector with no elements.
       *  @param  __a  An allocator object.
       */
      explicit
      vector(const allocator_type& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6vectorIlSaIlEEC1ERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _Base(__a) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt6vectorIlSaIlEEC1ERKS0_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_>:
	: _Tp_alloc_type(std::move(__a)),
	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }
#endif

	void _M_swap_data(_Vector_impl& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  std::swap(_M_start, __x._M_start);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_+0x28>
	  std::swap(_M_finish, __x._M_finish);
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 83 c0 08          	add    $0x8,%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_+0x43>
	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 8d 50 10          	lea    0x10(%rax),%rdx
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	48 83 c0 10          	add    $0x10,%rax
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZNSt12_Vector_baseIlSaIlEE12_Vector_impl12_M_swap_dataERS2_+0x5e>
	}
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

セクション .text._ZSt15__alloc_on_moveISaIlEEvRT_S2_ の逆アセンブル:

0000000000000000 <_ZSt15__alloc_on_moveISaIlEEvRT_S2_>:
  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt15__alloc_on_moveISaIlEEvRT_S2_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
  15:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	88 0c 24             	mov    %cl,(%rsp)
  20:	48 89 d6             	mov    %rdx,%rsi
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZSt15__alloc_on_moveISaIlEEvRT_S2_+0x2b>
    }
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      typedef typename __traits_type::pointer   	pointer;

      _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEC1ERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	c9                   	leaveq 
  24:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEmmEv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEmmEv>:
      operator++(int)
      { return __normal_iterator(_M_current++); }

      // Bidirectional iterator requirements
      __normal_iterator&
      operator--()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEmmEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	--_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 d8          	lea    -0x28(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEdeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx17__normal_iteratorIP9PathPointSt6vectorIS1_SaIS1_EEEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED2Ev の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev>:
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
      
      virtual
      ~_Sp_counted_base() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	b8 00 00 00 00       	mov    $0x0,%eax
  21:	85 c0                	test   %eax,%eax
  23:	74 0c                	je     31 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x31>
  25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED1Ev+0x31>
  31:	c9                   	leaveq 
  32:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev>:
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
      
      virtual
      ~_Sp_counted_base() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EED0Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt31_Maybe_unary_or_binary_functionIvIPNSt13__future_base11_State_baseERSt8functionIFSt10unique_ptrINS0_12_Result_baseENS5_8_DeleterEEvEERbEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt31_Maybe_unary_or_binary_functionIvIPNSt13__future_base11_State_baseERSt8functionIFSt10unique_ptrINS0_12_Result_baseENS5_8_DeleterEEvEERbEEC1Ev>:
   * Derives from @c unary_function or @c binary_function, or perhaps
   * nothing, depending on the number of arguments provided. The
   * primary template is the basis case, which derives nothing.
   */
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt31_Maybe_unary_or_binary_functionIvIPNSt13__future_base11_State_baseERSt8functionIFSt10unique_ptrINS0_12_Result_baseENS5_8_DeleterEEvEERbEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEC2ESC_ の逆アセンブル:

0000000000000000 <_ZNSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEC1ESC_>:
		     _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEC1ESC_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 f0             	mov    %rsi,%rax
  14:	48 89 d1             	mov    %rdx,%rcx
  17:	48 89 ca             	mov    %rcx,%rdx
  1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEC1ESC_+0x2e>
  2e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3a:	48 89 01             	mov    %rax,(%rcx)
  3d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  41:	c9                   	leaveq 
  42:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEIPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISK_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEIPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISK_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEIPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISK_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0ESt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEIPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISK_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm1EPNSt13__future_base11_State_baseEISt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISE_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm1EPNSt13__future_base11_State_baseEISt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISE_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm1EPNSt13__future_base11_State_baseEISt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISE_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm1EPNSt13__future_base11_State_baseEISt17reference_wrapperISt8functionIFSt10unique_ptrINS0_12_Result_baseENS6_8_DeleterEEvEEES3_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISE_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm1EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_ の逆アセンブル:

0000000000000000 <_ZSt3getILm1EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm1EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm1EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEIS0_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISC_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEIS0_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISC_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEIS0_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISC_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm2ESt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS4_8_DeleterEEvEEEIS0_IbEEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EISC_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm2EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_ の逆アセンブル:

0000000000000000 <_ZSt3getILm2EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm2EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm2EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm3ESt17reference_wrapperIbEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS3_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm3ESt17reference_wrapperIbEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS3_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm3ESt17reference_wrapperIbEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS3_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm3ESt17reference_wrapperIbEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS3_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm3EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_ の逆アセンブル:

0000000000000000 <_ZSt3getILm3EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm3EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm3EISt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSO_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x12>
  12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x22>
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x2a>
  2a:	49 89 c5             	mov    %rax,%r13
  2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x39>
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x41>
  41:	49 89 c4             	mov    %rax,%r12
  44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x50>
  50:	48 89 c7             	mov    %rax,%rdi
  53:	e8 00 00 00 00       	callq  58 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x58>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  58:	48 8b 18             	mov    (%rax),%rbx
  5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  5f:	48 89 c7             	mov    %rax,%rdi
  62:	e8 00 00 00 00       	callq  67 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x67>
  67:	48 89 c7             	mov    %rax,%rdi
  6a:	e8 00 00 00 00       	callq  6f <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x6f>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  6f:	4c 89 e9             	mov    %r13,%rcx
  72:	4c 89 e2             	mov    %r12,%rdx
  75:	48 89 de             	mov    %rbx,%rsi
  78:	48 89 c7             	mov    %rax,%rdi
  7b:	e8 00 00 00 00       	callq  80 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS1_12_Result_baseENS5_8_DeleterEEvEERbEEPS2_St17reference_wrapperIS9_ESG_IbEEE9_M_invokeIILm0ELm1ELm2EEEEvSt12_Index_tupleIIXspT_EEE+0x80>
        }
  80:	48 83 c4 18          	add    $0x18,%rsp
  84:	5b                   	pop    %rbx
  85:	41 5c                	pop    %r12
  87:	41 5d                	pop    %r13
  89:	5d                   	pop    %rbp
  8a:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_>:
	  return *this;
	}

    protected:
      void
      _M_swap(_Tuple_impl& __in)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      noexcept(noexcept(swap(std::declval<_Head&>(),
			     std::declval<_Head&>()))
	       && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
	using std::swap;
	swap(_M_head(*this), _M_head(__in));
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0x31>
  31:	48 89 de             	mov    %rbx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0x3c>
	_Inherited::_M_swap(_M_tail(__in));
  3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0x48>
  48:	48 89 c2             	mov    %rax,%rdx
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	48 89 d6             	mov    %rdx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt11_Tuple_implILm0EIPNSt13__future_base12_Result_baseENS1_8_DeleterEEE7_M_swapERS4_+0x5a>
      }
  5a:	48 83 c4 18          	add    $0x18,%rsp
  5e:	5b                   	pop    %rbx
  5f:	5d                   	pop    %rbp
  60:	c3                   	retq   

セクション .text._ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEptEv の逆アセンブル:

0000000000000000 <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEptEv>:
	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
	return *get();
      }

      pointer
      operator->() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEptEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_GLIBCXX_DEBUG_ASSERT(get() != pointer());
	return get();
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt10unique_ptrINSt13__future_base7_ResultIvEENS0_12_Result_base8_DeleterEEptEv+0x1d>
      }
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt14unary_functionIPSt6threadvEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt14unary_functionIPSt6threadvEC1Ev>:
   */
  /**
   *  This is one of the @link functors functor base classes@endlink.
   */
  template<typename _Arg, typename _Result>
    struct unary_function
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14unary_functionIPSt6threadvEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC1Ev>:
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };

  /// Derives from @c unary_function, as appropriate.
  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt31_Maybe_unary_or_binary_functionIvIPSt6threadEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt7_Mem_fnIMSt6threadFvvEEC2ES2_ の逆アセンブル:

0000000000000000 <_ZNSt7_Mem_fnIMSt6threadFvvEEC1ES2_>:
		     _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt7_Mem_fnIMSt6threadFvvEEC1ES2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 f0             	mov    %rsi,%rax
  14:	48 89 d1             	mov    %rdx,%rcx
  17:	48 89 ca             	mov    %rcx,%rdx
  1a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  1e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt7_Mem_fnIMSt6threadFvvEEC1ES2_+0x2e>
  2e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  3a:	48 89 01             	mov    %rax,(%rcx)
  3d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  41:	c9                   	leaveq 
  42:	c3                   	retq   

セクション .text._ZSt12__get_helperILm0ESt7_Mem_fnIMSt6threadFvvEEISt17reference_wrapperIS1_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm0ESt7_Mem_fnIMSt6threadFvvEEISt17reference_wrapperIS1_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm0ESt7_Mem_fnIMSt6threadFvvEEISt17reference_wrapperIS1_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm0ESt7_Mem_fnIMSt6threadFvvEEISt17reference_wrapperIS1_EEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS8_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_ の逆アセンブル:

0000000000000000 <_ZSt3getILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm0EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__get_helperILm1ESt17reference_wrapperISt6threadEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE の逆アセンブル:

0000000000000000 <_ZSt12__get_helperILm1ESt17reference_wrapperISt6threadEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE>:
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__get_helperILm1ESt17reference_wrapperISt6threadEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__get_helperILm1ESt17reference_wrapperISt6threadEIEENSt9__add_refIT0_E4typeERSt11_Tuple_implIXT_EIS4_DpT1_EE+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt3getILm1EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_ の逆アセンブル:

0000000000000000 <_ZSt3getILm1EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_>:
  // original type.
  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3getILm1EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::__get_helper<__i>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt3getILm1EISt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEENSt9__add_refINSt13tuple_elementIXT_ESt5tupleIIDpT0_EEE4typeEE4typeERSC_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE の逆アセンブル:

0000000000000000 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE>:

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {
	  // std::bind always forwards bound arguments as lvalues,
	  // but this type can call functions which only accept rvalues.
          return std::forward<_Callable>(std::get<0>(_M_bound))(
  28:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x37>
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x43>
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x4b>
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
  4b:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  4f:	48 89 d6             	mov    %rdx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt12_Bind_simpleIFSt7_Mem_fnIMSt6threadFvvEESt17reference_wrapperIS1_EEE9_M_invokeIILm0EEEEvSt12_Index_tupleIIXspT_EEE+0x5a>
        }
  5a:	c9                   	leaveq 
  5b:	c3                   	retq   

セクション .text._ZNSaI9PathPointEC2Ev の逆アセンブル:

0000000000000000 <_ZNSaI9PathPointEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaI9PathPointEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaI9PathPointEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointED2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointE10deallocateEPS1_m の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointE10deallocateEPS1_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointE10deallocateEPS1_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorI9PathPointE10deallocateEPS1_m+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_ の逆アセンブル:

0000000000000000 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  for (; __first != __last; ++__first)
  15:	eb 19                	jmp    30 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_+0x30>
	    std::_Destroy(std::__addressof(*__first));
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_+0x23>
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_+0x2b>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  2b:	48 83 45 f8 28       	addq   $0x28,-0x8(%rbp)
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  38:	75 dd                	jne    17 <_ZNSt12_Destroy_auxILb0EE9__destroyIP9PathPointEEvT_S4_+0x17>
	    std::_Destroy(std::__addressof(*__first));
	}
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaI9PathPointEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaI9PathPointEE12_S_constructIS0_IS0_EEENSt9enable_ifIXsrNS2_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS1_PS6_DpOS7_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x35>
  35:	48 29 c3             	sub    %rax,%rbx
  38:	48 89 da             	mov    %rbx,%rdx
  3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  3f:	48 39 c2             	cmp    %rax,%rdx
  42:	0f 92 c0             	setb   %al
  45:	84 c0                	test   %al,%al
  47:	74 0c                	je     55 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x55>
	  __throw_length_error(__N(__s));
  49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x55>

	const size_type __len = size() + std::max(size(), __n);
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x61>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x70>
  70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  74:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  7c:	48 89 d6             	mov    %rdx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x87>
  87:	48 8b 00             	mov    (%rax),%rax
  8a:	48 01 d8             	add    %rbx,%rax
  8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	callq  9d <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0x9d>
  9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  a1:	77 12                	ja     b5 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xb5>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	callq  af <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xaf>
  af:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  b3:	73 0e                	jae    c3 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xc3>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xc1>
  c1:	eb 04                	jmp    c7 <_ZNKSt6vectorI9PathPointSaIS0_EE12_M_check_lenEmPKc+0xc7>
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  c7:	48 83 c4 38          	add    $0x38,%rsp
  cb:	5b                   	pop    %rbx
  cc:	5d                   	pop    %rbp
  cd:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  15:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1a:	74 1a                	je     36 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm+0x36>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  24:	ba 00 00 00 00       	mov    $0x0,%edx
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm+0x34>
  34:	eb 05                	jmp    3b <_ZNSt12_Vector_baseI9PathPointSaIS0_EE11_M_allocateEm+0x3b>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_ の逆アセンブル:

0000000000000000 <_ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_+0x39>
  39:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  3d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZSt34__uninitialized_move_if_noexcept_aIP9PathPointS1_SaIS0_EET0_T_S4_S3_RT1_+0x4c>
    }
  4c:	48 83 c4 28          	add    $0x28,%rsp
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE7destroyIS0_EEvRS1_PT_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE7destroyIS0_EEvRS1_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE7destroyIS0_EEvRS1_PT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI9PathPointEE7destroyIS0_EEvRS1_PT_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
      { return _KeyOfValue()(_S_value(__x)); }
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E+0x1d>
  1d:	48 89 c2             	mov    %rax,%rdx
  20:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  24:	48 89 d6             	mov    %rdx,%rsi
  27:	48 89 c7             	mov    %rax,%rdi
  2a:	e8 00 00 00 00       	callq  2f <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E+0x2f>
  2f:	c9                   	leaveq 
  30:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt18_Rb_tree_node_base の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt18_Rb_tree_node_base>:
      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt18_Rb_tree_node_base+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 20          	add    $0x20,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNKSt10_Select1stISt4pairIKSs4PathEEclERKS3_ の逆アセンブル:

0000000000000000 <_ZNKSt10_Select1stISt4pairIKSs4PathEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt10_Select1stISt4pairIKSs4PathEEclERKS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __x.first; }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_ の逆アセンブル:

0000000000000000 <_ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_>:
   *  @param __rhs  Second string.
   *  @return  True if @a __lhs precedes @a __rhs.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZStltIcSt11char_traitsIcESaIcEEbRKSbIT_T0_T1_ES8_+0x28>
  28:	c1 e8 1f             	shr    $0x1f,%eax
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSaI9PathPointEC2ERKS0_ の逆アセンブル:

0000000000000000 <_ZNSaI9PathPointEC1ERKS0_>:

      allocator(const allocator& __a) throw()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaI9PathPointEC1ERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSaI9PathPointEC1ERKS0_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt4moveIRP9PathPointEONSt16remove_referenceIT_E4typeEOS4_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRP9PathPointEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRP9PathPointEONSt16remove_referenceIT_E4typeEOS4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIP9PathPointEvRT_S3_ の逆アセンブル:

0000000000000000 <_ZSt4swapIP9PathPointEvRT_S3_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIP9PathPointEvRT_S3_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIP9PathPointEvRT_S3_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIP9PathPointEvRT_S3_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIP9PathPointEvRT_S3_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEmmEv の逆アセンブル:

0000000000000000 <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEmmEv>:
	_M_node = _Rb_tree_increment(_M_node);
	return __tmp;
      }

      _Self&
      operator--()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEmmEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	_M_node = _Rb_tree_decrement(_M_node);
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNSt17_Rb_tree_iteratorISt4pairIKSs4PathEEmmEv+0x20>
  20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  24:	48 89 02             	mov    %rax,(%rdx)
	return *this;
  27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_put_node(__p);
      }
#else
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	{
	  _Link_type __tmp = _M_get_node();
  16:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x22>
  22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      allocator_traits<_Node_allocator>::
		construct(_M_get_Node_allocator(), __tmp,
			  std::forward<_Args>(__args)...);
  26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  2a:	48 89 c7             	mov    %rax,%rdi
  2d:	e8 00 00 00 00       	callq  32 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x32>
  32:	48 89 c3             	mov    %rax,%rbx
	{
	  _Link_type __tmp = _M_get_node();
	  __try
	    {
	      allocator_traits<_Node_allocator>::
		construct(_M_get_Node_allocator(), __tmp,
  35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  39:	48 89 c7             	mov    %rax,%rdi
  3c:	e8 00 00 00 00       	callq  41 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x41>
        _M_create_node(_Args&&... __args)
	{
	  _Link_type __tmp = _M_get_node();
	  __try
	    {
	      allocator_traits<_Node_allocator>::
  41:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  45:	48 89 da             	mov    %rbx,%rdx
  48:	48 89 ce             	mov    %rcx,%rsi
  4b:	48 89 c7             	mov    %rax,%rdi
  4e:	e8 00 00 00 00       	callq  53 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x53>
	  __catch(...)
	    {
	      _M_put_node(__tmp);
	      __throw_exception_again;
	    }
	  return __tmp;
  53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  57:	eb 33                	jmp    8c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x8c>
  59:	48 89 c3             	mov    %rax,%rbx
	    {
	      allocator_traits<_Node_allocator>::
		construct(_M_get_Node_allocator(), __tmp,
			  std::forward<_Args>(__args)...);
	    }
	  __catch(...)
  5c:	e8 00 00 00 00       	callq  61 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x61>
  61:	48 89 d8             	mov    %rbx,%rax
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x6c>
  6c:	48 89 c7             	mov    %rax,%rdi
  6f:	e8 00 00 00 00       	callq  74 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x74>
	    {
	      _M_put_node(__tmp);
  74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  7c:	48 89 d6             	mov    %rdx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x87>
	      __throw_exception_again;
  87:	e8 00 00 00 00       	callq  8c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE14_M_create_nodeIIS0_ISsS2_EEEEPSt13_Rb_tree_nodeIS3_EDpOT_+0x8c>
	    }
	  return __tmp;
	}
  8c:	48 83 c4 28          	add    $0x28,%rsp
  90:	5b                   	pop    %rbx
  91:	5d                   	pop    %rbp
  92:	c3                   	retq   

セクション .text._ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EE13_M_initializeEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EE13_M_initializeEv>:
	  { _M_initialize(); }
#endif

	private:
	  void
	  _M_initialize()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EE13_M_initializeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  {
	    this->_M_header._M_color = _S_red;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
	    this->_M_header._M_parent = 0;
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  27:	00 
	    this->_M_header._M_left = &this->_M_header;
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 89 50 18          	mov    %rdx,0x18(%rax)
	    this->_M_header._M_right = &this->_M_header;
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	48 8d 50 08          	lea    0x8(%rax),%rdx
  40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  44:	48 89 50 20          	mov    %rdx,0x20(%rax)
	  }	    
  48:	c9                   	leaveq 
  49:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE21_M_get_Node_allocatorEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE21_M_get_Node_allocatorEv>:
      typedef size_t 				size_type;
      typedef ptrdiff_t 			difference_type;
      typedef _Alloc 				allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE21_M_get_Node_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt4pairIKSs4PathED2Ev の逆アセンブル:

0000000000000000 <_ZNSt4pairIKSs4PathED1Ev>:
   *
   *  @tparam _T1  Type of first object.
   *  @tparam _T2  Type of second object.
   */
  template<class _T1, class _T2>
    struct pair
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt4pairIKSs4PathED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt4pairIKSs4PathED1Ev+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt4pairIKSs4PathED1Ev+0x2d>
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEED1Ev>:
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 20          	add    $0x20,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEED1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE7destroyIS6_EEvPT_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE7destroyIS6_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE7destroyIS6_EEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE7destroyIS6_EEvPT_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { _M_impl._Node_allocator::deallocate(__p, 1); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  1d:	ba 01 00 00 00       	mov    $0x1,%edx
  22:	48 89 ce             	mov    %rcx,%rsi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E+0x2d>
  2d:	c9                   	leaveq 
  2e:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE12_S_constructIS8_IS8_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE12_S_constructIS8_IS8_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE12_S_constructIS8_IS8_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE12_S_constructIS8_IS8_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE12_S_constructIS8_IS8_EEENSt9enable_ifIXsrNSA_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS9_PSE_DpOSF_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc の逆アセンブル:

0000000000000000 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc>:
        _M_emplace_back_aux(_Args&&... __args);
#endif

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
      {
	if (max_size() - size() < __n)
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x35>
  35:	48 29 c3             	sub    %rax,%rbx
  38:	48 89 da             	mov    %rbx,%rdx
  3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  3f:	48 39 c2             	cmp    %rax,%rdx
  42:	0f 92 c0             	setb   %al
  45:	84 c0                	test   %al,%al
  47:	74 0c                	je     55 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x55>
	  __throw_length_error(__N(__s));
  49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x55>

	const size_type __len = size() + std::max(size(), __n);
  55:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  59:	48 89 c7             	mov    %rax,%rdi
  5c:	e8 00 00 00 00       	callq  61 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x61>
  61:	48 89 c3             	mov    %rax,%rbx
  64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  68:	48 89 c7             	mov    %rax,%rdi
  6b:	e8 00 00 00 00       	callq  70 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x70>
  70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  74:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  78:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  7c:	48 89 d6             	mov    %rdx,%rsi
  7f:	48 89 c7             	mov    %rax,%rdi
  82:	e8 00 00 00 00       	callq  87 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x87>
  87:	48 8b 00             	mov    (%rax),%rax
  8a:	48 01 d8             	add    %rbx,%rax
  8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  95:	48 89 c7             	mov    %rax,%rdi
  98:	e8 00 00 00 00       	callq  9d <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0x9d>
  9d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  a1:	77 12                	ja     b5 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xb5>
  a3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  a7:	48 89 c7             	mov    %rax,%rdi
  aa:	e8 00 00 00 00       	callq  af <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xaf>
  af:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  b3:	73 0e                	jae    c3 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xc3>
  b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xc1>
  c1:	eb 04                	jmp    c7 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE12_M_check_lenEmPKc+0xc7>
  c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
      }
  c7:	48 83 c4 38          	add    $0x38,%rsp
  cb:	5b                   	pop    %rbx
  cc:	5d                   	pop    %rbp
  cd:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm>:

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }
  15:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  1a:	74 1a                	je     36 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm+0x36>
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  24:	ba 00 00 00 00       	mov    $0x0,%edx
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm+0x34>
  34:	eb 05                	jmp    3b <_ZNSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE11_M_allocateEm+0x3b>
  36:	b8 00 00 00 00       	mov    $0x0,%eax
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_ の逆アセンブル:

0000000000000000 <_ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
  1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_+0x2a>
  2a:	48 89 c3             	mov    %rax,%rbx
  2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_+0x39>
  39:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  3d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  41:	48 89 de             	mov    %rbx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZSt34__uninitialized_move_if_noexcept_aIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEES9_SaIS8_EET0_T_SC_SB_RT1_+0x4c>
    }
  4c:	48 83 c4 28          	add    $0x28,%rsp
  50:	5b                   	pop    %rbx
  51:	5d                   	pop    %rbp
  52:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE7destroyIS8_EEvRS9_PT_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE7destroyIS8_EEvRS9_PT_>:
       *
       *  Calls @c __a.destroy(__p) if that expression is well-formed,
       *  otherwise calls @c __p->~_Tp()
      */
      template <class _Tp>
	static void destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE7destroyIS8_EEvRS9_PT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ _S_destroy(__a, __p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE7destroyIS8_EEvRS9_PT_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEED2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE10deallocateEPS9_m の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE10deallocateEPS9_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE10deallocateEPS9_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE10deallocateEPS9_m+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_ の逆アセンブル:

0000000000000000 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  for (; __first != __last; ++__first)
  15:	eb 19                	jmp    30 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_+0x30>
	    std::_Destroy(std::__addressof(*__first));
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_+0x23>
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_+0x2b>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  2b:	48 83 45 f8 30       	addq   $0x30,-0x8(%rbp)
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  38:	75 dd                	jne    17 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS3_EEEEEvT_SC_+0x17>
	    std::_Destroy(std::__addressof(*__first));
	}
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaI4PathEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv+0x25>
  25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  29:	0f 92 c0             	setb   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 05                	je     35 <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
  30:	e8 00 00 00 00       	callq  35 <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 c1 e0 02          	shl    $0x2,%rax
  40:	48 01 d0             	add    %rdx,%rax
  43:	48 c1 e0 03          	shl    $0x3,%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN9__gnu_cxx13new_allocatorI4PathE8allocateEmPKv+0x4f>
      }
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

セクション .text._ZSt18uninitialized_copyISt13move_iteratorIP4PathES2_ET0_T_S5_S4_ の逆アセンブル:

0000000000000000 <_ZSt18uninitialized_copyISt13move_iteratorIP4PathES2_ET0_T_S5_S4_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18uninitialized_copyISt13move_iteratorIP4PathES2_ET0_T_S5_S4_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt18uninitialized_copyISt13move_iteratorIP4PathES2_ET0_T_S5_S4_+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_ の逆アセンブル:

0000000000000000 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_>:
  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{
	  for (; __first != __last; ++__first)
  15:	eb 19                	jmp    30 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_+0x30>
	    std::_Destroy(std::__addressof(*__first));
  17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1b:	48 89 c7             	mov    %rax,%rdi
  1e:	e8 00 00 00 00       	callq  23 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_+0x23>
  23:	48 89 c7             	mov    %rax,%rdi
  26:	e8 00 00 00 00       	callq  2b <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_+0x2b>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  2b:	48 83 45 f8 28       	addq   $0x28,-0x8(%rbp)
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  38:	75 dd                	jne    17 <_ZNSt12_Destroy_auxILb0EE9__destroyIP4PathEEvT_S4_+0x17>
	    std::_Destroy(std::__addressof(*__first));
	}
  3a:	c9                   	leaveq 
  3b:	c3                   	retq   

セクション .text._ZN4PathC2ERKS_ の逆アセンブル:

0000000000000000 <_ZN4PathC1ERKS_>:
	{
		return !((*this) == p);
	}
};

struct Path
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN4PathC1ERKS_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 89 d6             	mov    %rdx,%rsi
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZN4PathC1ERKS_+0x29>
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 8d 50 08          	lea    0x8(%rax),%rdx
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 83 c0 08          	add    $0x8,%rax
  39:	48 89 d6             	mov    %rdx,%rsi
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZN4PathC1ERKS_+0x44>
  44:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  48:	8b 50 20             	mov    0x20(%rax),%edx
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	89 50 20             	mov    %edx,0x20(%rax)
  52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  56:	8b 50 24             	mov    0x24(%rax),%edx
  59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  5d:	89 50 24             	mov    %edx,0x24(%rax)
  60:	eb 1a                	jmp    7c <_ZN4PathC1ERKS_+0x7c>
  62:	48 89 c3             	mov    %rax,%rbx
  65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  69:	48 89 c7             	mov    %rax,%rdi
  6c:	e8 00 00 00 00       	callq  71 <_ZN4PathC1ERKS_+0x71>
  71:	48 89 d8             	mov    %rbx,%rax
  74:	48 89 c7             	mov    %rax,%rdi
  77:	e8 00 00 00 00       	callq  7c <_ZN4PathC1ERKS_+0x7c>
  7c:	48 83 c4 18          	add    $0x18,%rsp
  80:	5b                   	pop    %rbx
  81:	5d                   	pop    %rbp
  82:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x12>
  12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  16:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  1a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  1e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x2a>
  2a:	49 89 c5             	mov    %rax,%r13
  2d:	4c 8b 65 d0          	mov    -0x30(%rbp),%r12
  31:	4c 89 e6             	mov    %r12,%rsi
  34:	bf 28 00 00 00       	mov    $0x28,%edi
  39:	e8 00 00 00 00       	callq  3e <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x3e>
  3e:	48 89 c3             	mov    %rax,%rbx
  41:	48 85 db             	test   %rbx,%rbx
  44:	74 0d                	je     53 <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x53>
  46:	4c 89 ee             	mov    %r13,%rsi
  49:	48 89 df             	mov    %rbx,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x51>
  51:	eb 1b                	jmp    6e <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x6e>
  53:	eb 19                	jmp    6e <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x6e>
  55:	49 89 c5             	mov    %rax,%r13
  58:	4c 89 e6             	mov    %r12,%rsi
  5b:	48 89 df             	mov    %rbx,%rdi
  5e:	e8 00 00 00 00       	callq  63 <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x63>
  63:	4c 89 e8             	mov    %r13,%rax
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZN9__gnu_cxx13new_allocatorI4PathE9constructIS1_IRKS1_EEEvPT_DpOT0_+0x6e>
  6e:	48 83 c4 28          	add    $0x28,%rsp
  72:	5b                   	pop    %rbx
  73:	41 5c                	pop    %r12
  75:	41 5d                	pop    %r13
  77:	5d                   	pop    %rbp
  78:	c3                   	retq   

セクション .text._ZSt3maxImERKT_S2_S2_ の逆アセンブル:

0000000000000000 <_ZSt3maxImERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt3maxImERKT_S2_S2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  20:	48 8b 00             	mov    (%rax),%rax
  23:	48 39 c2             	cmp    %rax,%rdx
  26:	73 06                	jae    2e <_ZSt3maxImERKT_S2_S2_+0x2e>
	return __b;
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	eb 04                	jmp    32 <_ZSt3maxImERKT_S2_S2_+0x32>
      return __a;
  2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  32:	c9                   	leaveq 
  33:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI4PathEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI4PathEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI4PathEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI4PathEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_+0x26>
  26:	48 8b 18             	mov    (%rax),%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	bf 08 00 00 00       	mov    $0x8,%edi
  35:	e8 00 00 00 00       	callq  3a <_ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_+0x3a>
  3a:	48 85 c0             	test   %rax,%rax
  3d:	74 03                	je     42 <_ZN9__gnu_cxx13new_allocatorIlE9constructIlIRKlEEEvPT_DpOT0_+0x42>
  3f:	48 89 18             	mov    %rbx,(%rax)
  42:	48 83 c4 28          	add    $0x28,%rsp
  46:	5b                   	pop    %rbx
  47:	5d                   	pop    %rbp
  48:	c3                   	retq   

セクション .text._ZNKSt6vectorIlSaIlEE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorIlSaIlEE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorIlSaIlEE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt6vectorIlSaIlEE8max_sizeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNKSt6vectorIlSaIlEE8max_sizeEv+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv+0x25>
  25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  29:	0f 92 c0             	setb   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 05                	je     35 <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
  30:	e8 00 00 00 00       	callq  35 <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  39:	48 c1 e0 03          	shl    $0x3,%rax
  3d:	48 89 c7             	mov    %rax,%rdi
  40:	e8 00 00 00 00       	callq  45 <_ZN9__gnu_cxx13new_allocatorIlE8allocateEmPKv+0x45>
      }
  45:	c9                   	leaveq 
  46:	c3                   	retq   

セクション .text._ZSt32__make_move_if_noexcept_iteratorIPlSt13move_iteratorIS0_EET0_T_ の逆アセンブル:

0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIPlSt13move_iteratorIS0_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt32__make_move_if_noexcept_iteratorIPlSt13move_iteratorIS0_EET0_T_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  15:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZSt32__make_move_if_noexcept_iteratorIPlSt13move_iteratorIS0_EET0_T_+0x24>
  24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt22__uninitialized_copy_aISt13move_iteratorIPlES1_lET0_T_S4_S3_RSaIT1_E の逆アセンブル:

0000000000000000 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPlES1_lET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt22__uninitialized_copy_aISt13move_iteratorIPlES1_lET0_T_S4_S3_RSaIT1_E+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  19:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPlES1_lET0_T_S4_S3_RSaIT1_E+0x34>
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE10_S_destroyIlEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE10_S_destroyIlEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE10_S_destroyIlEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaIlEE10_S_destroyIlEENSt9enable_ifIXsrNS1_16__destroy_helperIT_EE5valueEvE4typeERS0_PS5_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorIlE10deallocateEPlm+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZNSaIlEC2Ev の逆アセンブル:

0000000000000000 <_ZNSaIlEC1Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaIlEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSaIlEC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlED2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_ の逆アセンブル:

0000000000000000 <_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_>:
  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNKSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNKSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSaIlEC2ERKS_ の逆アセンブル:

0000000000000000 <_ZNSaIlEC1ERKS_>:

      allocator(const allocator& __a) throw()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaIlEC1ERKS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSaIlEC1ERKS_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEEC2ERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEEC1ERKS0_>:
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEEC1ERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_impl(__a) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseIlSaIlEEC1ERKS0_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt4moveIRPlEONSt16remove_referenceIT_E4typeEOS3_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRPlEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRPlEONSt16remove_referenceIT_E4typeEOS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIPlEvRT_S2_ の逆アセンブル:

0000000000000000 <_ZSt4swapIPlEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIPlEvRT_S2_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIPlEvRT_S2_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIPlEvRT_S2_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIPlEvRT_S2_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZSt4moveIRSaIlEEONSt16remove_referenceIT_E4typeEOS3_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSaIlEEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSaIlEEONSt16remove_referenceIT_E4typeEOS3_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt18__do_alloc_on_moveISaIlEEvRT_S2_St17integral_constantIbLb1EE の逆アセンブル:

0000000000000000 <_ZSt18__do_alloc_on_moveISaIlEEvRT_S2_St17integral_constantIbLb1EE>:
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18__do_alloc_on_moveISaIlEEvRT_S2_St17integral_constantIbLb1EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { __one = std::move(__two); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt18__do_alloc_on_moveISaIlEEvRT_S2_St17integral_constantIbLb1EE+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_ の逆アセンブル:

0000000000000000 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_>:
	}

      // Handle pointers
      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
	_Res
	operator()(_Class* __object, _Args&&... __args) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  18:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  1c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	{ return (__object->*__pmf)(std::forward<_Args>(__args)...); }
  20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  24:	48 8b 00             	mov    (%rax),%rax
  27:	83 e0 01             	and    $0x1,%eax
  2a:	48 85 c0             	test   %rax,%rax
  2d:	75 09                	jne    38 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x38>
  2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  33:	48 8b 18             	mov    (%rax),%rbx
  36:	eb 26                	jmp    5e <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x5e>
  38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3c:	48 8b 40 08          	mov    0x8(%rax),%rax
  40:	48 89 c2             	mov    %rax,%rdx
  43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  47:	48 01 d0             	add    %rdx,%rax
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 8b 00             	mov    (%rax),%rax
  54:	48 83 e8 01          	sub    $0x1,%rax
  58:	48 01 d0             	add    %rdx,%rax
  5b:	48 8b 18             	mov    (%rax),%rbx
  5e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x6a>
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x72>
  72:	49 89 c4             	mov    %rax,%r12
  75:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  79:	48 89 c7             	mov    %rax,%rdi
  7c:	e8 00 00 00 00       	callq  81 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x81>
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZNKSt7_Mem_fnIMNSt13__future_base11_State_baseEFvRSt8functionIFSt10unique_ptrINS0_12_Result_baseENS4_8_DeleterEEvEERbEEclIISt17reference_wrapperIS8_ESF_IbEEvEEvPS1_DpOT_+0x89>
  89:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8d:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  91:	48 89 d1             	mov    %rdx,%rcx
  94:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  98:	48 01 d1             	add    %rdx,%rcx
  9b:	4c 89 e2             	mov    %r12,%rdx
  9e:	48 89 c6             	mov    %rax,%rsi
  a1:	48 89 cf             	mov    %rcx,%rdi
  a4:	ff d3                	callq  *%rbx
  a6:	48 83 c4 20          	add    $0x20,%rsp
  aa:	5b                   	pop    %rbx
  ab:	41 5c                	pop    %r12
  ad:	5d                   	pop    %rbp
  ae:	c3                   	retq   

セクション .text._ZSt4moveIRPNSt13__future_base12_Result_baseEEONSt16remove_referenceIT_E4typeEOS5_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRPNSt13__future_base12_Result_baseEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRPNSt13__future_base12_Result_baseEEONSt16remove_referenceIT_E4typeEOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_ の逆アセンブル:

0000000000000000 <_ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIPNSt13__future_base12_Result_baseEEvRT_S4_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_>:
	  return *this;
	}

    protected:
      void
      _M_swap(_Tuple_impl& __in)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      noexcept(noexcept(swap(std::declval<_Head&>(),
			     std::declval<_Head&>()))
	       && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
	using std::swap;
	swap(_M_head(*this), _M_head(__in));
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0x31>
  31:	48 89 de             	mov    %rbx,%rsi
  34:	48 89 c7             	mov    %rax,%rdi
  37:	e8 00 00 00 00       	callq  3c <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0x3c>
	_Inherited::_M_swap(_M_tail(__in));
  3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  40:	48 89 c7             	mov    %rax,%rdi
  43:	e8 00 00 00 00       	callq  48 <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0x48>
  48:	48 89 c2             	mov    %rax,%rdx
  4b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4f:	48 89 d6             	mov    %rdx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt11_Tuple_implILm1EINSt13__future_base12_Result_base8_DeleterEEE7_M_swapERS3_+0x5a>
      }
  5a:	48 83 c4 18          	add    $0x18,%rsp
  5e:	5b                   	pop    %rbx
  5f:	5d                   	pop    %rbp
  60:	c3                   	retq   

セクション .text._ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info の逆アセンブル:

0000000000000000 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info>:
      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : 0; }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 85 c0             	test   %rax,%rax
  1f:	74 26                	je     47 <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x47>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 8b 00             	mov    (%rax),%rax
  28:	48 8b 00             	mov    (%rax),%rax
  2b:	48 83 c0 20          	add    $0x20,%rax
  2f:	48 8b 00             	mov    (%rax),%rax
  32:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  36:	48 8b 12             	mov    (%rdx),%rdx
  39:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  3d:	48 89 ce             	mov    %rcx,%rsi
  40:	48 89 d7             	mov    %rdx,%rdi
  43:	ff d0                	callq  *%rax
  45:	eb 05                	jmp    4c <_ZNKSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info+0x4c>
  47:	b8 00 00 00 00       	mov    $0x0,%eax
  4c:	c9                   	leaveq 
  4d:	c3                   	retq   

セクション .text._ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz の逆アセンブル:

0000000000000000 <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz>:
				     const enable_shared_from_this<_Tp1>*,
				     const _Tp2*) noexcept;

  template<_Lock_policy _Lp>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 81 ec b8 00 00 00 	sub    $0xb8,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz+0x10>
  10:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  17:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  1e:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  25:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  2c:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  33:	84 c0                	test   %al,%al
  35:	74 20                	je     57 <_ZSt32__enable_shared_from_this_helperILN9__gnu_cxx12_Lock_policyE2EEvRKSt14__shared_countIXT_EEz+0x57>
  37:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  3b:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  3f:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  43:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  47:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  4b:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  4f:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  53:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  57:	48 89 bd 48 ff ff ff 	mov    %rdi,-0xb8(%rbp)
    { }
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

セクション .text._ZNKSt7_Mem_fnIMSt6threadFvvEEclIS0_IEvEEvSt17reference_wrapperIT_EDpOT0_ の逆アセンブル:

0000000000000000 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIS0_IEvEEvSt17reference_wrapperIT_EDpOT0_>:
	}

      template<typename _Tp, typename... _Args,
	       typename _Req = _RequireValidArgs3<_Tp, _Args...>>
	_Res
	operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIS0_IEvEEvSt17reference_wrapperIT_EDpOT0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return operator()(__ref.get(), std::forward<_Args>(__args)...); }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIS0_IEvEEvSt17reference_wrapperIT_EDpOT0_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIS0_IEvEEvSt17reference_wrapperIT_EDpOT0_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEE4baseEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEE4baseEv>:
      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointEC2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZSt11__addressofI9PathPointEPT_RS1_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofI9PathPointEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofI9PathPointEPT_RS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyI9PathPointEvPT_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyI9PathPointEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyI9PathPointEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt8_DestroyI9PathPointEvPT_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	bf 28 00 00 00       	mov    $0x28,%edi
  35:	e8 00 00 00 00       	callq  3a <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_+0x3a>
  3a:	48 85 c0             	test   %rax,%rax
  3d:	74 0b                	je     4a <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_+0x4a>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZN9__gnu_cxx13new_allocatorI9PathPointE9constructIS1_IS1_EEEvPT_DpOT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNKSt6vectorI9PathPointSaIS0_EE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorI9PathPointSaIS0_EE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorI9PathPointSaIS0_EE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt6vectorI9PathPointSaIS0_EE8max_sizeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNKSt6vectorI9PathPointSaIS0_EE8max_sizeEv+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv+0x25>
  25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  29:	0f 92 c0             	setb   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 05                	je     35 <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
  30:	e8 00 00 00 00       	callq  35 <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 c1 e0 02          	shl    $0x2,%rax
  40:	48 01 d0             	add    %rdx,%rax
  43:	48 c1 e0 03          	shl    $0x3,%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN9__gnu_cxx13new_allocatorI9PathPointE8allocateEmPKv+0x4f>
      }
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

セクション .text._ZSt32__make_move_if_noexcept_iteratorIP9PathPointSt13move_iteratorIS1_EET0_T_ の逆アセンブル:

0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIP9PathPointSt13move_iteratorIS1_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt32__make_move_if_noexcept_iteratorIP9PathPointSt13move_iteratorIS1_EET0_T_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  15:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZSt32__make_move_if_noexcept_iteratorIP9PathPointSt13move_iteratorIS1_EET0_T_+0x24>
  24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt22__uninitialized_copy_aISt13move_iteratorIP9PathPointES2_S1_ET0_T_S5_S4_RSaIT1_E の逆アセンブル:

0000000000000000 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP9PathPointES2_S1_ET0_T_S5_S4_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt22__uninitialized_copy_aISt13move_iteratorIP9PathPointES2_S1_ET0_T_S5_S4_RSaIT1_E+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  19:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP9PathPointES2_S1_ET0_T_S5_S4_RSaIT1_E+0x34>
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI9PathPointEE10_S_destroyIS0_EENSt9enable_ifIXsrNS2_16__destroy_helperIT_EE5valueEvE4typeERS1_PS6_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt13_Rb_tree_nodeIS3_E の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt13_Rb_tree_nodeIS3_E>:
      _Const_Link_type
      _M_end() const
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE8_S_valueEPKSt13_Rb_tree_nodeIS3_E+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __x->_M_value_field; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 20          	add    $0x20,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointEC1ERKS2_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointEC1ERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_get_nodeEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_get_nodeEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_get_nodeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_impl._Node_allocator::allocate(1); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	ba 00 00 00 00       	mov    $0x0,%edx
  1a:	be 01 00 00 00       	mov    $0x1,%esi
  1f:	48 89 c7             	mov    %rax,%rdi
  22:	e8 00 00 00 00       	callq  27 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_get_nodeEv+0x27>
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE9constructIS5_IS1_ISsS3_EEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS6_PT_DpOSA_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE9constructIS5_IS1_ISsS3_EEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS6_PT_DpOSA_>:
       *  if that expression is well-formed, otherwise uses placement-new
       *  to construct an object of type @a _Tp at location @a __p from the
       *  arguments @a __args...
      */
      template<typename _Tp, typename... _Args>
	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE9constructIS5_IS1_ISsS3_EEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS6_PT_DpOSA_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE9constructIS5_IS1_ISsS3_EEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS6_PT_DpOSA_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE9constructIS5_IS1_ISsS3_EEEEDTcl12_S_constructfp_fp0_spcl7forwardIT0_Efp1_EEERS6_PT_DpOSA_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE10deallocateEPS6_m の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE10deallocateEPS6_m>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE10deallocateEPS6_m+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { ::operator delete(__p); }
  19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE10deallocateEPS6_m+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	bf 30 00 00 00       	mov    $0x30,%edi
  35:	e8 00 00 00 00       	callq  3a <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_+0x3a>
  3a:	48 85 c0             	test   %rax,%rax
  3d:	74 0b                	je     4a <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_+0x4a>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE9constructIS9_IS9_EEEvPT_DpOT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE8max_sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }

      /**  Returns the size() of the largest possible %vector.  */
      size_type
      max_size() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE8max_sizeEv+0x1d>
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNKSt6vectorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE8max_sizeEv+0x25>
  25:	c9                   	leaveq 
  26:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv+0x25>
  25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  29:	0f 92 c0             	setb   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 05                	je     35 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
  30:	e8 00 00 00 00       	callq  35 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 01 c0             	add    %rax,%rax
  3f:	48 01 d0             	add    %rdx,%rax
  42:	48 c1 e0 04          	shl    $0x4,%rax
  46:	48 89 c7             	mov    %rax,%rdi
  49:	e8 00 00 00 00       	callq  4e <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8allocateEmPKv+0x4e>
      }
  4e:	c9                   	leaveq 
  4f:	c3                   	retq   

セクション .text._ZSt32__make_move_if_noexcept_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESt13move_iteratorIS9_EET0_T_ の逆アセンブル:

0000000000000000 <_ZSt32__make_move_if_noexcept_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESt13move_iteratorIS9_EET0_T_>:
  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt32__make_move_if_noexcept_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESt13move_iteratorIS9_EET0_T_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    { return _ReturnType(__i); }
  11:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  15:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  19:	48 89 d6             	mov    %rdx,%rsi
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZSt32__make_move_if_noexcept_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESt13move_iteratorIS9_EET0_T_+0x24>
  24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSt22__uninitialized_copy_aISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_S9_ET0_T_SD_SC_RSaIT1_E の逆アセンブル:

0000000000000000 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_S9_ET0_T_SD_SC_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_S9_ET0_T_SD_SC_RSaIT1_E+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  19:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_S9_ET0_T_SD_SC_RSaIT1_E+0x34>
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_>:
	  static const bool value = type::value;
	};

      template<typename _Tp>
	static typename enable_if<__destroy_helper<_Tp>::value, void>::type
       	_S_destroy(_Alloc& __a, _Tp* __p)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ __a.destroy(__p); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE10_S_destroyIS8_EENSt9enable_ifIXsrNSA_16__destroy_helperIT_EE5valueEvE4typeERS9_PSE_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEEC2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZSt11__addressofISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEPT_RS9_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEPT_RS9_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEPT_RS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvPT_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt8_DestroyISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEvPT_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx13new_allocatorI4PathE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx13new_allocatorI4PathE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx13new_allocatorI4PathE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  11:	48 b8 66 66 66 66 66 	movabs $0x666666666666666,%rax
  18:	66 66 06 
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_ の逆アセンブル:

0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0xe>
   e:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  22:	eb 37                	jmp    5b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x5b>
		std::_Construct(std::__addressof(*__cur), *__first);
  24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x30>
  30:	48 89 c3             	mov    %rax,%rbx
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x3f>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x4a>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x56>
  56:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
  5b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	75 b2                	jne    24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x24>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	eb 33                	jmp    ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0xab>
  78:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  7b:	e8 00 00 00 00       	callq  80 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x80>
  80:	48 89 d8             	mov    %rbx,%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	callq  8b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x8b>
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0x93>
	    {
	      std::_Destroy(__result, __cur);
  93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9b:	48 89 d6             	mov    %rdx,%rsi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0xa6>
	      __throw_exception_again;
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP4PathES4_EET0_T_S7_S6_+0xab>
	    }
	}
  ab:	48 83 c4 38          	add    $0x38,%rsp
  af:	5b                   	pop    %rbx
  b0:	5d                   	pop    %rbp
  b1:	c3                   	retq   

セクション .text._ZSt11__addressofI4PathEPT_RS1_ の逆アセンブル:

0000000000000000 <_ZSt11__addressofI4PathEPT_RS1_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt11__addressofI4PathEPT_RS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt8_DestroyI4PathEvPT_ の逆アセンブル:

0000000000000000 <_ZSt8_DestroyI4PathEvPT_>:
  /**
   * Destroy the object pointed to by a pointer type.
   */
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt8_DestroyI4PathEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { __pointer->~_Tp(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt8_DestroyI4PathEvPT_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt6vectorI9PathPointSaIS0_EEC2ERKS2_ の逆アセンブル:

0000000000000000 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_>:
       *  The newly-created %vector uses a copy of the allocation
       *  object used by @a __x.  All the elements of @a __x are copied,
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 28          	sub    $0x28,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x12>
  12:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  16:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  1a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x26>
  26:	48 89 c2             	mov    %rax,%rdx
  29:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  2d:	48 89 d6             	mov    %rdx,%rsi
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x38>
  38:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x44>
  44:	48 89 c1             	mov    %rax,%rcx
  47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4b:	48 8d 55 df          	lea    -0x21(%rbp),%rdx
  4f:	48 89 ce             	mov    %rcx,%rsi
  52:	48 89 c7             	mov    %rax,%rdi
  55:	e8 00 00 00 00       	callq  5a <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x5a>
  5a:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x66>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
  66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  6a:	48 89 c7             	mov    %rax,%rdi
  6d:	e8 00 00 00 00       	callq  72 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x72>
  72:	49 89 c5             	mov    %rax,%r13
  75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  79:	4c 8b 20             	mov    (%rax),%r12
  7c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80:	48 89 c7             	mov    %rax,%rdi
  83:	e8 00 00 00 00       	callq  88 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x88>
  88:	48 89 c3             	mov    %rax,%rbx
  8b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8f:	48 89 c7             	mov    %rax,%rdi
  92:	e8 00 00 00 00       	callq  97 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0x97>
  97:	4c 89 e9             	mov    %r13,%rcx
  9a:	4c 89 e2             	mov    %r12,%rdx
  9d:	48 89 de             	mov    %rbx,%rsi
  a0:	48 89 c7             	mov    %rax,%rdi
  a3:	e8 00 00 00 00       	callq  a8 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xa8>
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
  a8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  ac:	48 89 42 08          	mov    %rax,0x8(%rdx)
  b0:	eb 34                	jmp    e6 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xe6>
  b2:	48 89 c3             	mov    %rax,%rbx
       *  but any extra memory in
       *  @a __x (for fast expansion) will not be copied.
       */
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
  b5:	48 8d 45 df          	lea    -0x21(%rbp),%rax
  b9:	48 89 c7             	mov    %rax,%rdi
  bc:	e8 00 00 00 00       	callq  c1 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xc1>
  c1:	48 89 d8             	mov    %rbx,%rax
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xcc>
  cc:	48 89 c3             	mov    %rax,%rbx
  cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xdb>
  db:	48 89 d8             	mov    %rbx,%rax
  de:	48 89 c7             	mov    %rax,%rdi
  e1:	e8 00 00 00 00       	callq  e6 <_ZNSt6vectorI9PathPointSaIS0_EEC1ERKS2_+0xe6>
      { this->_M_impl._M_finish =
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
				      this->_M_impl._M_start,
				      _M_get_Tp_allocator());
      }
  e6:	48 83 c4 28          	add    $0x28,%rsp
  ea:	5b                   	pop    %rbx
  eb:	41 5c                	pop    %r12
  ed:	41 5d                	pop    %r13
  ef:	5d                   	pop    %rbp
  f0:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI4PathE7destroyIS1_EEvPT_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI4PathE7destroyIS1_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI4PathE7destroyIS1_EEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN9__gnu_cxx13new_allocatorI4PathE7destroyIS1_EEvPT_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx13new_allocatorIlE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx13new_allocatorIlE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx13new_allocatorIlE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  11:	48 b8 ff ff ff ff ff 	movabs $0x1fffffffffffffff,%rax
  18:	ff ff 1f 
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIPlEC2ES0_ の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIPlEC1ES0_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIPlEC1ES0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt18uninitialized_copyISt13move_iteratorIPlES1_ET0_T_S4_S3_ の逆アセンブル:

0000000000000000 <_ZSt18uninitialized_copyISt13move_iteratorIPlES1_ET0_T_S4_S3_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18uninitialized_copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt18uninitialized_copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlE7destroyIlEEvPT_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlE7destroyIlEEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlE7destroyIlEEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlEC2Ev の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorIlEC2ERKS1_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorIlEC1ERKS1_>:

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorIlEC1ERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1ERKS0_>:

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

	_Vector_impl(_Tp_alloc_type const& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1ERKS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC1ERKS0_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  3e:	00 
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4a:	00 
	{ }
  4b:	c9                   	leaveq 
  4c:	c3                   	retq   

セクション .text._ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEcvRS7_Ev の逆アセンブル:

0000000000000000 <_ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEcvRS7_Ev>:
      {
	_M_data = __inref._M_data;
	return *this;
      }

      operator _Tp&() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEcvRS7_Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->get(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEEcvRS7_Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt17reference_wrapperIbEcvRbEv の逆アセンブル:

0000000000000000 <_ZNKSt17reference_wrapperIbEcvRbEv>:
      {
	_M_data = __inref._M_data;
	return *this;
      }

      operator _Tp&() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17reference_wrapperIbEcvRbEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->get(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt17reference_wrapperIbEcvRbEv+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt4moveIRNSt13__future_base12_Result_base8_DeleterEEONSt16remove_referenceIT_E4typeEOS5_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRNSt13__future_base12_Result_base8_DeleterEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRNSt13__future_base12_Result_base8_DeleterEEONSt16remove_referenceIT_E4typeEOS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_ の逆アセンブル:

0000000000000000 <_ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_+0x21>
      __a = _GLIBCXX_MOVE(__b);
  21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_+0x2d>
      __b = _GLIBCXX_MOVE(__tmp);
  2d:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  31:	48 89 c7             	mov    %rax,%rdi
  34:	e8 00 00 00 00       	callq  39 <_ZSt4swapINSt13__future_base12_Result_base8_DeleterEEvRT_S4_+0x39>
    }
  39:	c9                   	leaveq 
  3a:	c3                   	retq   

セクション .text._ZNSt11_Tuple_implILm2EIEE7_M_swapERS0_ の逆アセンブル:

0000000000000000 <_ZNSt11_Tuple_implILm2EIEE7_M_swapERS0_>:

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&, _Tuple_impl&&) { }

    protected:
      void _M_swap(_Tuple_impl&) noexcept { /* no-op */ }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Tuple_implILm2EIEE7_M_swapERS0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNKSt17reference_wrapperISt6threadE3getEv の逆アセンブル:

0000000000000000 <_ZNKSt17reference_wrapperISt6threadE3getEv>:

      _Tp&
      get() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17reference_wrapperISt6threadE3getEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_ の逆アセンブル:

0000000000000000 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_>:
      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }

      // Handle objects
      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
	_Res
	operator()(_Class& __object, _Args&&... __args) const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return (__object.*__pmf)(std::forward<_Args>(__args)...); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	83 e0 01             	and    $0x1,%eax
  1f:	48 85 c0             	test   %rax,%rax
  22:	75 09                	jne    2d <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_+0x2d>
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 8b 00             	mov    (%rax),%rax
  2b:	eb 26                	jmp    53 <_ZNKSt7_Mem_fnIMSt6threadFvvEEclIIEvEEvRS0_DpOT_+0x53>
  2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  31:	48 8b 40 08          	mov    0x8(%rax),%rax
  35:	48 89 c2             	mov    %rax,%rdx
  38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  3c:	48 01 d0             	add    %rdx,%rax
  3f:	48 8b 10             	mov    (%rax),%rdx
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 8b 00             	mov    (%rax),%rax
  49:	48 83 e8 01          	sub    $0x1,%rax
  4d:	48 01 d0             	add    %rdx,%rax
  50:	48 8b 00             	mov    (%rax),%rax
  53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  57:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  5b:	48 89 d1             	mov    %rdx,%rcx
  5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  62:	48 01 ca             	add    %rcx,%rdx
  65:	48 89 d7             	mov    %rdx,%rdi
  68:	ff d0                	callq  *%rax
  6a:	c9                   	leaveq 
  6b:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE8max_sizeERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE8max_sizeERKS1_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE8max_sizeERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaI9PathPointEE8max_sizeERKS1_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNKSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12_Vector_baseI9PathPointSaIS0_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx13new_allocatorI9PathPointE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx13new_allocatorI9PathPointE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx13new_allocatorI9PathPointE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  11:	48 b8 66 66 66 66 66 	movabs $0x666666666666666,%rax
  18:	66 66 06 
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIP9PathPointEC2ES1_ の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIP9PathPointEC1ES1_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIP9PathPointEC1ES1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt18uninitialized_copyISt13move_iteratorIP9PathPointES2_ET0_T_S5_S4_ の逆アセンブル:

0000000000000000 <_ZSt18uninitialized_copyISt13move_iteratorIP9PathPointES2_ET0_T_S5_S4_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18uninitialized_copyISt13move_iteratorIP9PathPointES2_ET0_T_S5_S4_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt18uninitialized_copyISt13move_iteratorIP9PathPointES2_ET0_T_S5_S4_+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorI9PathPointE7destroyIS1_EEvPT_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorI9PathPointE7destroyIS1_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorI9PathPointE7destroyIS1_EEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN9__gnu_cxx13new_allocatorI9PathPointE7destroyIS1_EEvPT_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      { 
	if (__n > this->max_size())
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv+0x25>
  25:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  29:	0f 92 c0             	setb   %al
  2c:	84 c0                	test   %al,%al
  2e:	74 05                	je     35 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv+0x35>
	  std::__throw_bad_alloc();
  30:	e8 00 00 00 00       	callq  35 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv+0x35>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  35:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  39:	48 89 d0             	mov    %rdx,%rax
  3c:	48 c1 e0 02          	shl    $0x2,%rax
  40:	48 01 d0             	add    %rdx,%rax
  43:	48 c1 e0 04          	shl    $0x4,%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8allocateEmPKv+0x4f>
      }
  4f:	c9                   	leaveq 
  50:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE12_S_constructIS5_IS1_ISsS3_EEEENSt9enable_ifIXsrNS7_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS6_PSC_DpOSD_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE12_S_constructIS5_IS1_ISsS3_EEEENSt9enable_ifIXsrNS7_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS6_PSC_DpOSD_>:
	};

      template<typename _Tp, typename... _Args>
	static typename
       	enable_if<__construct_helper<_Tp, _Args...>::value, void>::type
       	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE12_S_constructIS5_IS1_ISsS3_EEEENSt9enable_ifIXsrNS7_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS6_PSC_DpOSD_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE12_S_constructIS5_IS1_ISsS3_EEEENSt9enable_ifIXsrNS7_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS6_PSC_DpOSD_+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
  28:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 ce             	mov    %rcx,%rsi
  33:	48 89 c7             	mov    %rax,%rdi
  36:	e8 00 00 00 00       	callq  3b <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEE12_S_constructIS5_IS1_ISsS3_EEEENSt9enable_ifIXsrNS7_18__construct_helperIT_IDpT0_EEE5valueEvE4typeERS6_PSC_DpOSD_+0x3b>
  3b:	c9                   	leaveq 
  3c:	c3                   	retq   

セクション .text._ZSt4moveIRSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS4_ESt4lessISsESaIS4_EEEONSt16remove_referenceIT_E4typeEOSD_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS4_ESt4lessISsESaIS4_EEEONSt16remove_referenceIT_E4typeEOSD_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS4_ESt4lessISsESaIS4_EEEONSt16remove_referenceIT_E4typeEOSD_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC2EOS7_ の逆アセンブル:

0000000000000000 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1EOS7_>:
       *  @param  __x  A %map of identical element and allocator types.
       *
       *  The newly-created %map contains the exact contents of @a __x.
       *  The contents of @a __x are a valid, but unspecified %map.
       */
      map(map&& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1EOS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1EOS7_+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt3mapISs4PathSt4lessISsESaISt4pairIKSsS0_EEEC1EOS7_+0x33>
  33:	c9                   	leaveq 
  34:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE8max_sizeERKS9_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE8max_sizeERKS9_>:
       *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
       *
       *  Returns @c __a.max_size() if that expression is well-formed,
       *  otherwise returns @c numeric_limits<size_type>::max()
      */
      static size_type max_size(const _Alloc& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE8max_sizeERKS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _S_max_size(__a); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE8max_sizeERKS9_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv の逆アセンブル:

0000000000000000 <_ZNKSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt12_Vector_baseISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEESaIS8_EE19_M_get_Tp_allocatorEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  11:	48 b8 55 55 55 55 55 	movabs $0x555555555555555,%rax
  18:	55 55 05 
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEC2ES9_ の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEC1ES9_>:

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEC1ES9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : _M_current(__i) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 10             	mov    %rdx,(%rax)
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt18uninitialized_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_ET0_T_SD_SC_ の逆アセンブル:

0000000000000000 <_ZSt18uninitialized_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_ET0_T_SD_SC_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18uninitialized_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_ET0_T_SD_SC_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt18uninitialized_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEESA_ET0_T_SD_SC_+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE7destroyIS9_EEvPT_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE7destroyIS9_EEvPT_>:
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE7destroyIS9_EEvPT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZN9__gnu_cxx13new_allocatorISt3mapISs4PathSt4lessISsESaISt4pairIKSsS2_EEEE7destroyIS9_EEvPT_+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZStneIP4PathEbRKSt13move_iteratorIT_ES6_ の逆アセンブル:

0000000000000000 <_ZStneIP4PathEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStneIP4PathEbRKSt13move_iteratorIT_ES6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZStneIP4PathEbRKSt13move_iteratorIT_ES6_+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIP4PathEppEv の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIP4PathEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIP4PathEppEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 28          	lea    0x28(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIP4PathEdeEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIP4PathEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIP4PathEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNKSt13move_iteratorIP4PathEdeEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	bf 28 00 00 00       	mov    $0x28,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_+0x36>
  36:	48 85 c0             	test   %rax,%rax
  39:	74 0b                	je     46 <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_+0x46>
  3b:	48 89 de             	mov    %rbx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZSt10_ConstructI4PathIS0_EEvPT_DpOT0_+0x46>
  46:	48 83 c4 18          	add    $0x18,%rsp
  4a:	5b                   	pop    %rbx
  4b:	5d                   	pop    %rbp
  4c:	c3                   	retq   

セクション .text._ZN9__gnu_cxx14__alloc_traitsISaI9PathPointEE17_S_select_on_copyERKS2_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx14__alloc_traitsISaI9PathPointEE17_S_select_on_copyERKS2_>:
    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx14__alloc_traitsISaI9PathPointEE17_S_select_on_copyERKS2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    { return _Base_type::select_on_container_copy_construction(__a); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZN9__gnu_cxx14__alloc_traitsISaI9PathPointEE17_S_select_on_copyERKS2_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EEC2EmRKS1_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_>:

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      : _M_impl(__a)
  1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  22:	48 89 d6             	mov    %rdx,%rsi
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0x2d>
      { _M_create_storage(__n); }
  2d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 89 d6             	mov    %rdx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0x40>
  40:	eb 1a                	jmp    5c <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0x5c>
  42:	48 89 c3             	mov    %rax,%rbx
      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
  45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  49:	48 89 c7             	mov    %rax,%rdi
  4c:	e8 00 00 00 00       	callq  51 <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0x51>
  51:	48 89 d8             	mov    %rbx,%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNSt12_Vector_baseI9PathPointSaIS0_EEC1EmRKS1_+0x5c>
      { _M_create_storage(__n); }
  5c:	48 83 c4 28          	add    $0x28,%rsp
  60:	5b                   	pop    %rbx
  61:	5d                   	pop    %rbp
  62:	c3                   	retq   

セクション .text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E の逆アセンブル:

0000000000000000 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  19:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
  1d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_S2_ET0_T_SB_SA_RSaIT1_E+0x34>
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaIlEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaIlEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaIlEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaIlEE11_S_max_sizeIKS0_EENSt9enable_ifIXsrNS1_16__maxsize_helperIT_EE5valueEmE4typeERS6_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPlES3_EET0_T_S6_S5_ の逆アセンブル:

0000000000000000 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPlES3_EET0_T_S6_S5_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPlES3_EET0_T_S6_S5_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPlES3_EET0_T_S6_S5_+0x30>
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEE3getEv の逆アセンブル:

0000000000000000 <_ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEE3getEv>:

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17reference_wrapperISt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS3_8_DeleterEEvEEE3getEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNKSt17reference_wrapperIbE3getEv の逆アセンブル:

0000000000000000 <_ZNKSt17reference_wrapperIbE3getEv>:

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt17reference_wrapperIbE3getEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_data; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaI9PathPointEE11_S_max_sizeIKS1_EENSt9enable_ifIXsrNS2_16__maxsize_helperIT_EE5valueEmE4typeERS7_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_ の逆アセンブル:

0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0xe>
   e:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  22:	eb 37                	jmp    5b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x5b>
		std::_Construct(std::__addressof(*__cur), *__first);
  24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x30>
  30:	48 89 c3             	mov    %rax,%rbx
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x3f>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x4a>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x56>
  56:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
  5b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	75 b2                	jne    24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x24>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	eb 33                	jmp    ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0xab>
  78:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  7b:	e8 00 00 00 00       	callq  80 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x80>
  80:	48 89 d8             	mov    %rbx,%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	callq  8b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x8b>
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0x93>
	    {
	      std::_Destroy(__result, __cur);
  93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9b:	48 89 d6             	mov    %rdx,%rsi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0xa6>
	      __throw_exception_again;
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP9PathPointES4_EET0_T_S7_S6_+0xab>
	    }
	}
  ab:	48 83 c4 38          	add    $0x38,%rsp
  af:	5b                   	pop    %rbx
  b0:	5d                   	pop    %rbp
  b1:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8max_sizeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE8max_sizeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return size_t(-1) / sizeof(_Tp); }
  11:	48 b8 33 33 33 33 33 	movabs $0x333333333333333,%rax
  18:	33 33 03 
  1b:	c9                   	leaveq 
  1c:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_>:

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  1a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c6             	mov    %rax,%rsi
  30:	bf 50 00 00 00       	mov    $0x50,%edi
  35:	e8 00 00 00 00       	callq  3a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_+0x3a>
  3a:	48 85 c0             	test   %rax,%rax
  3d:	74 0b                	je     4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_+0x4a>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEE9constructIS6_IS2_ISsS4_EEEEvPT_DpOT0_+0x4a>
  4a:	48 83 c4 28          	add    $0x28,%rsp
  4e:	5b                   	pop    %rbx
  4f:	5d                   	pop    %rbp
  50:	c3                   	retq   

セクション .text._ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEEONSt16remove_referenceIT_E4typeEOS9_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEEONSt16remove_referenceIT_E4typeEOS9_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEEONSt16remove_referenceIT_E4typeEOS9_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC2EOS9_ の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_>:
    { __x.swap(__y); }

#if __cplusplus >= 201103L
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    _Rb_tree(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&& __x)
    : _M_impl(__x._M_impl._M_key_compare,
	      std::move(__x._M_get_Node_allocator()))
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x22>
  22:	48 89 c7             	mov    %rax,%rdi
  25:	e8 00 00 00 00       	callq  2a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x2a>
  2a:	48 89 c2             	mov    %rax,%rdx
  2d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  35:	48 89 ce             	mov    %rcx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x40>
    {
      if (__x._M_root() != 0)
  40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	callq  4c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x4c>
  4c:	48 8b 00             	mov    (%rax),%rax
  4f:	48 85 c0             	test   %rax,%rax
  52:	0f 95 c0             	setne  %al
  55:	84 c0                	test   %al,%al
  57:	0f 84 ed 00 00 00    	je     14a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x14a>
	{
	  _M_root() = __x._M_root();
  5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  61:	48 89 c7             	mov    %rax,%rdi
  64:	e8 00 00 00 00       	callq  69 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x69>
  69:	48 89 c3             	mov    %rax,%rbx
  6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  70:	48 89 c7             	mov    %rax,%rdi
  73:	e8 00 00 00 00       	callq  78 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x78>
  78:	48 8b 00             	mov    (%rax),%rax
  7b:	48 89 03             	mov    %rax,(%rbx)
	  _M_leftmost() = __x._M_leftmost();
  7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x8a>
  8a:	48 89 c3             	mov    %rax,%rbx
  8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  91:	48 89 c7             	mov    %rax,%rdi
  94:	e8 00 00 00 00       	callq  99 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x99>
  99:	48 8b 00             	mov    (%rax),%rax
  9c:	48 89 03             	mov    %rax,(%rbx)
	  _M_rightmost() = __x._M_rightmost();
  9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  a3:	48 89 c7             	mov    %rax,%rdi
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xab>
  ab:	48 89 c3             	mov    %rax,%rbx
  ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  b2:	48 89 c7             	mov    %rax,%rdi
  b5:	e8 00 00 00 00       	callq  ba <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xba>
  ba:	48 8b 00             	mov    (%rax),%rax
  bd:	48 89 03             	mov    %rax,(%rbx)
	  _M_root()->_M_parent = _M_end();
  c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  c4:	48 89 c7             	mov    %rax,%rdi
  c7:	e8 00 00 00 00       	callq  cc <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xcc>
  cc:	48 8b 18             	mov    (%rax),%rbx
  cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  d3:	48 89 c7             	mov    %rax,%rdi
  d6:	e8 00 00 00 00       	callq  db <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xdb>
  db:	48 89 43 08          	mov    %rax,0x8(%rbx)

	  __x._M_root() = 0;
  df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  e3:	48 89 c7             	mov    %rax,%rdi
  e6:	e8 00 00 00 00       	callq  eb <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xeb>
  eb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	  __x._M_leftmost() = __x._M_end();
  f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  f6:	48 89 c7             	mov    %rax,%rdi
  f9:	e8 00 00 00 00       	callq  fe <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0xfe>
  fe:	48 89 c3             	mov    %rax,%rbx
 101:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 105:	48 89 c7             	mov    %rax,%rdi
 108:	e8 00 00 00 00       	callq  10d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x10d>
 10d:	48 89 03             	mov    %rax,(%rbx)
	  __x._M_rightmost() = __x._M_end();
 110:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 114:	48 89 c7             	mov    %rax,%rdi
 117:	e8 00 00 00 00       	callq  11c <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x11c>
 11c:	48 89 c3             	mov    %rax,%rbx
 11f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 123:	48 89 c7             	mov    %rax,%rdi
 126:	e8 00 00 00 00       	callq  12b <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EEC1EOS9_+0x12b>
 12b:	48 89 03             	mov    %rax,(%rbx)

	  this->_M_impl._M_node_count = __x._M_impl._M_node_count;
 12e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 132:	48 8b 50 28          	mov    0x28(%rax),%rdx
 136:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
 13a:	48 89 50 28          	mov    %rdx,0x28(%rax)
	  __x._M_impl._M_node_count = 0;
 13e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
 142:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
 149:	00 
	}
    }
 14a:	48 83 c4 18          	add    $0x18,%rsp
 14e:	5b                   	pop    %rbx
 14f:	5d                   	pop    %rbp
 150:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE11_S_max_sizeIKS9_EENSt9enable_ifIXsrNSA_16__maxsize_helperIT_EE5valueEmE4typeERSF_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE11_S_max_sizeIKS9_EENSt9enable_ifIXsrNSA_16__maxsize_helperIT_EE5valueEmE4typeERSF_>:
	};

      template<typename _Alloc2>
	static typename
       	enable_if<__maxsize_helper<_Alloc2>::value, size_type>::type
       	_S_max_size(_Alloc2& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE11_S_max_sizeIKS9_EENSt9enable_ifIXsrNSA_16__maxsize_helperIT_EE5valueEmE4typeERSF_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	{ return __a.max_size(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16allocator_traitsISaISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEE11_S_max_sizeIKS9_EENSt9enable_ifIXsrNSA_16__maxsize_helperIT_EE5valueEmE4typeERSF_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_ の逆アセンブル:

0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0xe>
   e:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  22:	eb 37                	jmp    5b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x5b>
		std::_Construct(std::__addressof(*__cur), *__first);
  24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x30>
  30:	48 89 c3             	mov    %rax,%rbx
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x3f>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x4a>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x56>
  56:	48 83 45 e8 30       	addq   $0x30,-0x18(%rbp)
  5b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	75 b2                	jne    24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x24>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	eb 33                	jmp    ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0xab>
  78:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  7b:	e8 00 00 00 00       	callq  80 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x80>
  80:	48 89 d8             	mov    %rbx,%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	callq  8b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x8b>
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0x93>
	    {
	      std::_Destroy(__result, __cur);
  93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9b:	48 89 d6             	mov    %rdx,%rsi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0xa6>
	      __throw_exception_again;
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS4_EEEESC_EET0_T_SF_SE_+0xab>
	    }
	}
  ab:	48 83 c4 38          	add    $0x38,%rsp
  af:	5b                   	pop    %rbx
  b0:	5d                   	pop    %rbp
  b1:	c3                   	retq   

セクション .text._ZSteqIP4PathEbRKSt13move_iteratorIT_ES6_ の逆アセンブル:

0000000000000000 <_ZSteqIP4PathEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSteqIP4PathEbRKSt13move_iteratorIT_ES6_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSteqIP4PathEbRKSt13move_iteratorIT_ES6_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZSteqIP4PathEbRKSt13move_iteratorIT_ES6_+0x31>
  31:	48 39 c3             	cmp    %rax,%rbx
  34:	0f 94 c0             	sete   %al
  37:	48 83 c4 18          	add    $0x18,%rsp
  3b:	5b                   	pop    %rbx
  3c:	5d                   	pop    %rbp
  3d:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE37select_on_container_copy_constructionERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE37select_on_container_copy_constructionERKS1_>:
       *
       *  Returns @c __rhs.select_on_container_copy_construction() if that
       *  expression is well-formed, otherwise returns @a __rhs
      */
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE37select_on_container_copy_constructionERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      { return _S_select(__rhs); }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI9PathPointEE37select_on_container_copy_constructionERKS1_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC2ERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1ERKS1_>:

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
	{ }

	_Vector_impl(_Tp_alloc_type const& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1ERKS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE12_Vector_implC1ERKS1_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  3e:	00 
  3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  43:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4a:	00 
	{ }
  4b:	c9                   	leaveq 
  4c:	c3                   	retq   

セクション .text._ZNSt12_Vector_baseI9PathPointSaIS0_EE17_M_create_storageEm の逆アセンブル:

0000000000000000 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE17_M_create_storageEm>:
	  _M_impl.deallocate(__p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt12_Vector_baseI9PathPointSaIS0_EE17_M_create_storageEm+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	this->_M_impl._M_start = this->_M_allocate(__n);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt12_Vector_baseI9PathPointSaIS0_EE17_M_create_storageEm+0x28>
  28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2c:	48 89 02             	mov    %rax,(%rdx)
	this->_M_impl._M_finish = this->_M_impl._M_start;
  2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  33:	48 8b 10             	mov    (%rax),%rdx
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 89 50 08          	mov    %rdx,0x8(%rax)
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  42:	48 8b 08             	mov    (%rax),%rcx
  45:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  49:	48 89 d0             	mov    %rdx,%rax
  4c:	48 c1 e0 02          	shl    $0x2,%rax
  50:	48 01 d0             	add    %rdx,%rax
  53:	48 c1 e0 03          	shl    $0x3,%rax
  57:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5f:	48 89 50 10          	mov    %rdx,0x10(%rax)
      }
  63:	c9                   	leaveq 
  64:	c3                   	retq   

セクション .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_ の逆アセンブル:

0000000000000000 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
					&& __is_trivial(_ValueType2))>::
	__uninit_copy(__first, __last, __result);
  19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  1d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  25:	48 89 ce             	mov    %rcx,%rsi
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_+0x30>
    }
  30:	c9                   	leaveq 
  31:	c3                   	retq   

セクション .text._ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_ の逆アセンブル:

0000000000000000 <_ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 28          	sub    $0x28,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0xe>
   e:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
  1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0x26>
  26:	48 89 c3             	mov    %rax,%rbx
  29:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2d:	48 89 c7             	mov    %rax,%rdi
  30:	e8 00 00 00 00       	callq  35 <_ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0x35>
  35:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  39:	48 89 de             	mov    %rbx,%rsi
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZSt4copyISt13move_iteratorIPlES1_ET0_T_S4_S3_+0x44>
    }
  44:	48 83 c4 28          	add    $0x28,%rsp
  48:	5b                   	pop    %rbx
  49:	5d                   	pop    %rbp
  4a:	c3                   	retq   

セクション .text._ZStneIP9PathPointEbRKSt13move_iteratorIT_ES6_ の逆アセンブル:

0000000000000000 <_ZStneIP9PathPointEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStneIP9PathPointEbRKSt13move_iteratorIT_ES6_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZStneIP9PathPointEbRKSt13move_iteratorIT_ES6_+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIP9PathPointEppEv の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIP9PathPointEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIP9PathPointEppEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 28          	lea    0x28(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIP9PathPointEdeEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIP9PathPointEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIP9PathPointEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNKSt13move_iteratorIP9PathPointEdeEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	bf 28 00 00 00       	mov    $0x28,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_+0x36>
  36:	48 85 c0             	test   %rax,%rax
  39:	74 0b                	je     46 <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_+0x46>
  3b:	48 89 de             	mov    %rbx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZSt10_ConstructI9PathPointIS0_EEvPT_DpOT0_+0x46>
  46:	48 83 c4 18          	add    $0x18,%rsp
  4a:	5b                   	pop    %rbx
  4b:	5d                   	pop    %rbp
  4c:	c3                   	retq   

セクション .text._ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEEC2IIS0_ISsS2_EEEEDpOT_ の逆アセンブル:

0000000000000000 <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEEC1IIS0_ISsS2_EEEEDpOT_>:
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;

#if __cplusplus >= 201103L
      template<typename... _Args>
        _Rb_tree_node(_Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEEC1IIS0_ISsS2_EEEEDpOT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	: _Rb_tree_node_base(),
	  _M_value_field(std::forward<_Args>(__args)...) { }
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  23:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  2a:	00 
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  36:	00 
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  42:	00 
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 89 c7             	mov    %rax,%rdi
  4a:	e8 00 00 00 00       	callq  4f <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEEC1IIS0_ISsS2_EEEEDpOT_+0x4f>
  4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  53:	48 83 c2 20          	add    $0x20,%rdx
  57:	48 89 c6             	mov    %rax,%rsi
  5a:	48 89 d7             	mov    %rdx,%rdi
  5d:	e8 00 00 00 00       	callq  62 <_ZNSt13_Rb_tree_nodeISt4pairIKSs4PathEEC1IIS0_ISsS2_EEEEDpOT_+0x62>
  62:	c9                   	leaveq 
  63:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC2ERKS7_OSaISt13_Rb_tree_nodeIS3_EE の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
	    _M_node_count(0)
	  { _M_initialize(); }

#if __cplusplus >= 201103L
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	  : _Node_allocator(std::move(__a)), _M_key_compare(__comp),
  19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE+0x25>
  25:	48 89 c2             	mov    %rax,%rdx
	    _M_header(), _M_node_count(0)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE+0x37>
  37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  46:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  4d:	00 
  4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  52:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  59:	00 
  5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5e:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  65:	00 
  66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  6a:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  71:	00 
	  { _M_initialize(); }
  72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  76:	48 89 c7             	mov    %rax,%rdi
  79:	e8 00 00 00 00       	callq  7e <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE+0x7e>
  7e:	c9                   	leaveq 
  7f:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_M_rootEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_M_rootEv>:

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE7_M_rootEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_parent; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 10          	add    $0x10,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_leftmostEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_leftmostEv>:
      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE11_M_leftmostEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_left; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 18          	add    $0x18,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE12_M_rightmostEv の逆アセンブル:

0000000000000000 <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE12_M_rightmostEv>:
      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8_Rb_treeISsSt4pairIKSs4PathESt10_Select1stIS3_ESt4lessISsESaIS3_EE12_M_rightmostEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return this->_M_impl._M_header._M_right; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 20          	add    $0x20,%rax
  19:	c9                   	leaveq 
  1a:	c3                   	retq   

セクション .text._ZStneIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_ の逆アセンブル:

0000000000000000 <_ZStneIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_>:
	       const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZStneIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZStneIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_+0x28>
  28:	83 f0 01             	xor    $0x1,%eax
  2b:	c9                   	leaveq 
  2c:	c3                   	retq   

セクション .text._ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEppEv の逆アセンブル:

0000000000000000 <_ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEppEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 30          	lea    0x30(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEdeEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEdeEv>:
      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return std::move(*_M_current); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 89 c7             	mov    %rax,%rdi
  1b:	e8 00 00 00 00       	callq  20 <_ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEdeEv+0x20>
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  16:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 c6             	mov    %rax,%rsi
  2c:	bf 30 00 00 00       	mov    $0x30,%edi
  31:	e8 00 00 00 00       	callq  36 <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_+0x36>
  36:	48 85 c0             	test   %rax,%rax
  39:	74 0b                	je     46 <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_+0x46>
  3b:	48 89 de             	mov    %rbx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZSt10_ConstructISt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEIS8_EEvPT_DpOT0_+0x46>
  46:	48 83 c4 18          	add    $0x18,%rsp
  4a:	5b                   	pop    %rbx
  4b:	5d                   	pop    %rbp
  4c:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIP4PathE4baseEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIP4PathE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIP4PathE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNSt16allocator_traitsISaI9PathPointEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_ の逆アセンブル:

0000000000000000 <_ZNSt16allocator_traitsISaI9PathPointEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_>:
	{ return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
	static typename
       	enable_if<!__select_helper<_Alloc2>::value, _Alloc2>::type
       	_S_select(_Alloc2& __a)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16allocator_traitsISaI9PathPointEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	{ return __a; }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt16allocator_traitsISaI9PathPointEE9_S_selectIKS1_EENSt9enable_ifIXntsrNS2_15__select_helperIT_EE5valueES7_E4typeERS7_+0x28>
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c9                   	leaveq 
  2d:	c3                   	retq   

セクション .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_ の逆アセンブル:

0000000000000000 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_>:
  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0xe>
   e:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
  12:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  16:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
  1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  1e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  22:	eb 37                	jmp    5b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x5b>
		std::_Construct(std::__addressof(*__cur), *__first);
  24:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  28:	48 89 c7             	mov    %rax,%rdi
  2b:	e8 00 00 00 00       	callq  30 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x30>
  30:	48 89 c3             	mov    %rax,%rbx
  33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  37:	48 89 c7             	mov    %rax,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x3f>
  3f:	48 89 de             	mov    %rbx,%rsi
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x4a>
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, ++__cur)
  4a:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  4e:	48 89 c7             	mov    %rax,%rdi
  51:	e8 00 00 00 00       	callq  56 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x56>
  56:	48 83 45 e8 28       	addq   $0x28,-0x18(%rbp)
  5b:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
  5f:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  63:	48 89 d6             	mov    %rdx,%rsi
  66:	48 89 c7             	mov    %rax,%rdi
  69:	e8 00 00 00 00       	callq  6e <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x6e>
  6e:	84 c0                	test   %al,%al
  70:	75 b2                	jne    24 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x24>
		std::_Construct(std::__addressof(*__cur), *__first);
	      return __cur;
  72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  76:	eb 33                	jmp    ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0xab>
  78:	48 89 c3             	mov    %rax,%rbx
	    }
	  __catch(...)
  7b:	e8 00 00 00 00       	callq  80 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x80>
  80:	48 89 d8             	mov    %rbx,%rax
  83:	48 89 c7             	mov    %rax,%rdi
  86:	e8 00 00 00 00       	callq  8b <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x8b>
  8b:	48 89 c7             	mov    %rax,%rdi
  8e:	e8 00 00 00 00       	callq  93 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0x93>
	    {
	      std::_Destroy(__result, __cur);
  93:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  9b:	48 89 d6             	mov    %rdx,%rsi
  9e:	48 89 c7             	mov    %rax,%rdi
  a1:	e8 00 00 00 00       	callq  a6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0xa6>
	      __throw_exception_again;
  a6:	e8 00 00 00 00       	callq  ab <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS4_SaIS4_EEEEPS4_EET0_T_SD_SC_+0xab>
	    }
	}
  ab:	48 83 c4 38          	add    $0x38,%rsp
  af:	5b                   	pop    %rbx
  b0:	5d                   	pop    %rbp
  b1:	c3                   	retq   

セクション .text._ZSt12__miter_baseISt13move_iteratorIPlEENSt11_Miter_baseIT_E13iterator_typeES4_ の逆アセンブル:

0000000000000000 <_ZSt12__miter_baseISt13move_iteratorIPlEENSt11_Miter_baseIT_E13iterator_typeES4_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__miter_baseISt13move_iteratorIPlEENSt11_Miter_baseIT_E13iterator_typeES4_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
  11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__miter_baseISt13move_iteratorIPlEENSt11_Miter_baseIT_E13iterator_typeES4_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_ の逆アセンブル:

0000000000000000 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 20          	sub    $0x20,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  18:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
  1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_+0x28>
  28:	49 89 c4             	mov    %rax,%r12
  2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_+0x37>
  37:	48 89 c3             	mov    %rax,%rbx
  3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_+0x46>
  46:	4c 89 e2             	mov    %r12,%rdx
  49:	48 89 de             	mov    %rbx,%rsi
  4c:	48 89 c7             	mov    %rax,%rdi
  4f:	e8 00 00 00 00       	callq  54 <_ZSt14__copy_move_a2ILb1EPlS0_ET1_T0_S2_S1_+0x54>
    }
  54:	48 83 c4 20          	add    $0x20,%rsp
  58:	5b                   	pop    %rbx
  59:	41 5c                	pop    %r12
  5b:	5d                   	pop    %rbp
  5c:	c3                   	retq   

セクション .text._ZSteqIP9PathPointEbRKSt13move_iteratorIT_ES6_ の逆アセンブル:

0000000000000000 <_ZSteqIP9PathPointEbRKSt13move_iteratorIT_ES6_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSteqIP9PathPointEbRKSt13move_iteratorIT_ES6_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSteqIP9PathPointEbRKSt13move_iteratorIT_ES6_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZSteqIP9PathPointEbRKSt13move_iteratorIT_ES6_+0x31>
  31:	48 39 c3             	cmp    %rax,%rbx
  34:	0f 94 c0             	sete   %al
  37:	48 83 c4 18          	add    $0x18,%rsp
  3b:	5b                   	pop    %rbx
  3c:	5d                   	pop    %rbp
  3d:	c3                   	retq   

セクション .text._ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC2ERKS5_ の逆アセンブル:

0000000000000000 <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1ERKS5_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1ERKS5_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      : __allocator_base<_Tp>(__a) { }
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSaISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1ERKS5_+0x28>
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZSteqIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_ の逆アセンブル:

0000000000000000 <_ZSteqIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_>:
	       const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZSteqIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZSteqIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_+0x22>
  22:	48 89 c3             	mov    %rax,%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZSteqIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEEbRKSt13move_iteratorIT_ESE_+0x31>
  31:	48 39 c3             	cmp    %rax,%rbx
  34:	0f 94 c0             	sete   %al
  37:	48 83 c4 18          	add    $0x18,%rsp
  3b:	5b                   	pop    %rbx
  3c:	5d                   	pop    %rbp
  3d:	c3                   	retq   

セクション .text._ZN9__gnu_cxxneIPK9PathPointSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxxneIPK9PathPointSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZN9__gnu_cxxneIPK9PathPointSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZN9__gnu_cxxneIPK9PathPointSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_+0x22>
  22:	48 8b 18             	mov    (%rax),%rbx
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 89 c7             	mov    %rax,%rdi
  2c:	e8 00 00 00 00       	callq  31 <_ZN9__gnu_cxxneIPK9PathPointSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_+0x31>
  31:	48 8b 00             	mov    (%rax),%rax
  34:	48 39 c3             	cmp    %rax,%rbx
  37:	0f 95 c0             	setne  %al
  3a:	48 83 c4 18          	add    $0x18,%rsp
  3e:	5b                   	pop    %rbx
  3f:	5d                   	pop    %rbp
  40:	c3                   	retq   

セクション .text._ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEppEv の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEppEv>:
      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEppEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      {
	++_M_current;
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	48 8d 50 28          	lea    0x28(%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
	return *this;
  23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
      }
  27:	c9                   	leaveq 
  28:	c3                   	retq   

セクション .text._ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEdeEv の逆アセンブル:

0000000000000000 <_ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEdeEv>:
		      _Container>::__type>& __i)
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      reference
      operator*() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNK9__gnu_cxx17__normal_iteratorIPK9PathPointSt6vectorIS1_SaIS1_EEEdeEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *_M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZSt7forwardIRK9PathPointEOT_RNSt16remove_referenceIS3_E4typeE の逆アセンブル:

0000000000000000 <_ZSt7forwardIRK9PathPointEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt7forwardIRK9PathPointEOT_RNSt16remove_referenceIS3_E4typeE+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<_Tp&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZN9PathPointC2ERKS_ の逆アセンブル:

0000000000000000 <_ZN9PathPointC1ERKS_>:

#include <vector>
#include <string>
#include <ctime>

struct PathPoint
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9PathPointC1ERKS_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 00             	mov    (%rax),%rax
  1c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  20:	48 89 02             	mov    %rax,(%rdx)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8b 40 08          	mov    0x8(%rax),%rax
  2b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  2f:	48 89 42 08          	mov    %rax,0x8(%rdx)
  33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  37:	8b 50 10             	mov    0x10(%rax),%edx
  3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3e:	89 50 10             	mov    %edx,0x10(%rax)
  41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  45:	48 8b 50 18          	mov    0x18(%rax),%rdx
  49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  55:	48 8d 50 20          	lea    0x20(%rax),%rdx
  59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  5d:	48 83 c0 20          	add    $0x20,%rax
  61:	48 89 d6             	mov    %rdx,%rsi
  64:	48 89 c7             	mov    %rax,%rdi
  67:	e8 00 00 00 00       	callq  6c <_ZN9PathPointC1ERKS_+0x6c>
  6c:	c9                   	leaveq 
  6d:	c3                   	retq   

セクション .text._ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_ の逆アセンブル:

0000000000000000 <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_>:
   * object's constructor with an initializer.
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 55                	push   %r13
   6:	41 54                	push   %r12
   8:	53                   	push   %rbx
   9:	48 83 ec 18          	sub    $0x18,%rsp
   d:	e8 00 00 00 00       	callq  12 <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x12>
  12:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  16:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1e:	48 89 c7             	mov    %rax,%rdi
  21:	e8 00 00 00 00       	callq  26 <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x26>
  26:	49 89 c5             	mov    %rax,%r13
  29:	4c 8b 65 d8          	mov    -0x28(%rbp),%r12
  2d:	4c 89 e6             	mov    %r12,%rsi
  30:	bf 28 00 00 00       	mov    $0x28,%edi
  35:	e8 00 00 00 00       	callq  3a <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x3a>
  3a:	48 89 c3             	mov    %rax,%rbx
  3d:	48 85 db             	test   %rbx,%rbx
  40:	74 0d                	je     4f <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x4f>
  42:	4c 89 ee             	mov    %r13,%rsi
  45:	48 89 df             	mov    %rbx,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x4d>
  4d:	eb 1b                	jmp    6a <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x6a>
  4f:	eb 19                	jmp    6a <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x6a>
  51:	49 89 c5             	mov    %rax,%r13
  54:	4c 89 e6             	mov    %r12,%rsi
  57:	48 89 df             	mov    %rbx,%rdi
  5a:	e8 00 00 00 00       	callq  5f <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x5f>
  5f:	4c 89 e8             	mov    %r13,%rax
  62:	48 89 c7             	mov    %rax,%rdi
  65:	e8 00 00 00 00       	callq  6a <_ZSt10_ConstructI9PathPointIRKS0_EEvPT_DpOT0_+0x6a>
  6a:	48 83 c4 18          	add    $0x18,%rsp
  6e:	5b                   	pop    %rbx
  6f:	41 5c                	pop    %r12
  71:	41 5d                	pop    %r13
  73:	5d                   	pop    %rbp
  74:	c3                   	retq   

セクション .text._ZNSt10_Iter_baseISt13move_iteratorIPlELb1EE7_S_baseES2_ の逆アセンブル:

0000000000000000 <_ZNSt10_Iter_baseISt13move_iteratorIPlELb1EE7_S_baseES2_>:

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Iter_baseISt13move_iteratorIPlELb1EE7_S_baseES2_+0xd>
   d:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
      { return __it.base(); }
  11:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt10_Iter_baseISt13move_iteratorIPlELb1EE7_S_baseES2_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt12__niter_baseIPlENSt11_Niter_baseIT_E13iterator_typeES2_ の逆アセンブル:

0000000000000000 <_ZSt12__niter_baseIPlENSt11_Niter_baseIT_E13iterator_typeES2_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt12__niter_baseIPlENSt11_Niter_baseIT_E13iterator_typeES2_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZSt12__niter_baseIPlENSt11_Niter_baseIT_E13iterator_typeES2_+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_ の逆アセンブル:

0000000000000000 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
  19:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
  1d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  29:	48 89 ce             	mov    %rcx,%rsi
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt13__copy_move_aILb1EPlS0_ET1_T0_S2_S1_+0x34>
    }
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;

  // Empty helper class except when the template argument is _S_mutex.
  template<_Lock_policy _Lp>
    class _Mutex_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev>:
  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      : _M_use_count(1), _M_weak_count(1) { }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EEC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%rax)
  33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  37:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%rax)
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIP9PathPointE4baseEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIP9PathPointE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIP9PathPointE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC2ERKS7_ の逆アセンブル:

0000000000000000 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1ERKS7_>:
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSs4PathEEEC1ERKS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEE4baseEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIPSt3mapISs4PathSt4lessISsESaISt4pairIKSsS1_EEEE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNKSt13move_iteratorIPlE4baseEv の逆アセンブル:

0000000000000000 <_ZNKSt13move_iteratorIPlE4baseEv>:
      template<typename _Iter>
	move_iterator(const move_iterator<_Iter>& __i)
	: _M_current(__i.base()) { }

      iterator_type
      base() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt13move_iteratorIPlE4baseEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return _M_current; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 8b 00             	mov    (%rax),%rax
  18:	c9                   	leaveq 
  19:	c3                   	retq   

セクション .text._ZNSt10_Iter_baseIPlLb0EE7_S_baseES0_ の逆アセンブル:

0000000000000000 <_ZNSt10_Iter_baseIPlLb0EE7_S_baseES0_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt10_Iter_baseIPlLb0EE7_S_baseES0_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return __it; }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_ の逆アセンブル:

0000000000000000 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 30          	sub    $0x30,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  15:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
        {
	  const ptrdiff_t _Num = __last - __first;
  19:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  1d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  21:	48 29 c2             	sub    %rax,%rdx
  24:	48 89 d0             	mov    %rdx,%rax
  27:	48 c1 f8 03          	sar    $0x3,%rax
  2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  if (_Num)
  2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  34:	74 1f                	je     55 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_+0x55>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  41:	00 
  42:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4a:	48 89 ce             	mov    %rcx,%rsi
  4d:	48 89 c7             	mov    %rax,%rdi
  50:	e8 00 00 00 00       	callq  55 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIlEEPT_PKS3_S6_S4_+0x55>
	  return __result + _Num;
  55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  59:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  60:	00 
  61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  65:	48 01 d0             	add    %rdx,%rax
	}
  68:	c9                   	leaveq 
  69:	c3                   	retq   

セクション .text._ZNSt6threadC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6threadC1Ev>:

  private:
    id				_M_id;

  public:
    thread() noexcept = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6threadC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt6threadC1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base19_Async_state_commonC2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base19_Async_state_commonC1Ev>:
        // safe to call multiple times so ignore failure
        _M_set_result(_S_task_setter(_M_result, _M_fn), true);
      }
    };

  class __future_base::_Async_state_common : public __future_base::_State_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base19_Async_state_commonC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base19_Async_state_commonC1Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 83 c0 70          	add    $0x70,%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZNSt13__future_base19_Async_state_commonC1Ev+0x38>
  38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  3c:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%rax)
  43:	c9                   	leaveq 
  44:	c3                   	retq   

セクション .text._ZNSt13__future_base19_Async_state_commonD2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base19_Async_state_commonD1Ev>:
  {
  protected:
#ifdef _GLIBCXX_ASYNC_ABI_COMPAT
    ~_Async_state_common();
#else
    ~_Async_state_common() = default;
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base19_Async_state_commonD1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 83 c0 70          	add    $0x70,%rax
  24:	48 89 c7             	mov    %rax,%rdi
  27:	e8 00 00 00 00       	callq  2c <_ZNSt13__future_base19_Async_state_commonD1Ev+0x2c>
  2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  30:	48 89 c7             	mov    %rax,%rdi
  33:	e8 00 00 00 00       	callq  38 <_ZNSt13__future_base19_Async_state_commonD1Ev+0x38>
  38:	b8 00 00 00 00       	mov    $0x0,%eax
  3d:	85 c0                	test   %eax,%eax
  3f:	74 0c                	je     4d <_ZNSt13__future_base19_Async_state_commonD1Ev+0x4d>
  41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  45:	48 89 c7             	mov    %rax,%rdi
  48:	e8 00 00 00 00       	callq  4d <_ZNSt13__future_base19_Async_state_commonD1Ev+0x4d>
  4d:	c9                   	leaveq 
  4e:	c3                   	retq   

セクション .text._ZNSt13__future_base19_Async_state_commonD0Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base19_Async_state_commonD0Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base19_Async_state_commonD0Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base19_Async_state_commonD0Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt13__future_base19_Async_state_commonD0Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   

セクション .text._ZNSt8functionIFvvEED2Ev の逆アセンブル:

0000000000000000 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8functionIFvvEED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt8functionIFvvEED1Ev+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvED2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvED1Ev>:
      _Ptr_type&                _M_result;
      std::function<_Res()>     _M_fn;
    };

  template<typename _Ptr_type>
    struct __future_base::_Task_setter<_Ptr_type, void>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 83 c0 08          	add    $0x8,%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvED1Ev+0x21>
  21:	c9                   	leaveq 
  22:	c3                   	retq   

セクション .text._ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC2EOS7_ の逆アセンブル:

0000000000000000 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1EOS7_>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1EOS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 d6             	mov    %rdx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1EOS7_+0x3e>
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt31_Maybe_unary_or_binary_functionIvIEEC2Ev の逆アセンブル:

0000000000000000 <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev>:
   * Derives from @c unary_function or @c binary_function, or perhaps
   * nothing, depending on the number of arguments provided. The
   * primary template is the basis case, which derives nothing.
   */
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt31_Maybe_unary_or_binary_functionIvIEEC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	c9                   	leaveq 
  12:	c3                   	retq   

セクション .text._ZNSt8functionIFvvEEC2EOS1_ の逆アセンブル:

0000000000000000 <_ZNSt8functionIFvvEEC1EOS1_>:
       *  @param __x A %function object rvalue with identical call signature.
       *
       *  The newly-created %function contains the target of @a __x
       *  (if it has one).
       */
      function(function&& __x) : _Function_base()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8functionIFvvEEC1EOS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt8functionIFvvEEC1EOS1_+0x21>
  21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  25:	48 89 c7             	mov    %rax,%rdi
  28:	e8 00 00 00 00       	callq  2d <_ZNSt8functionIFvvEEC1EOS1_+0x2d>
      {
	__x.swap(*this);
  2d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  35:	48 89 d6             	mov    %rdx,%rsi
  38:	48 89 c7             	mov    %rax,%rdi
  3b:	e8 00 00 00 00       	callq  40 <_ZNSt8functionIFvvEEC1EOS1_+0x40>
      }
  40:	c9                   	leaveq 
  41:	c3                   	retq   

セクション .text._ZSt4moveIRNSt13__future_base12_Task_setterISt10unique_ptrINS0_7_ResultIvEENS0_12_Result_base8_DeleterEEvEEEONSt16remove_referenceIT_E4typeEOSB_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRNSt13__future_base12_Task_setterISt10unique_ptrINS0_7_ResultIvEENS0_12_Result_base8_DeleterEEvEEEONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRNSt13__future_base12_Task_setterISt10unique_ptrINS0_7_ResultIvEENS0_12_Result_base8_DeleterEEvEEEONSt16remove_referenceIT_E4typeEOSB_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC2INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_ の逆アセンブル:

0000000000000000 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      function(_Functor __f)
      : _Function_base()
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x22>
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x2e>
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x3a>
  3a:	84 c0                	test   %al,%al
  3c:	74 52                	je     90 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x90>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
  3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x4a>
  4a:	48 89 c2             	mov    %rax,%rdx
  4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  51:	48 89 d6             	mov    %rdx,%rsi
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x5c>
	    _M_invoker = &_My_handler::_M_invoke;
  5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  60:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  67:	00 
	    _M_manager = &_My_handler::_M_manager;
  68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  6c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  73:	00 
  74:	eb 1a                	jmp    90 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x90>
  76:	48 89 c3             	mov    %rax,%rbx

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
  79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  7d:	48 89 c7             	mov    %rax,%rdi
  80:	e8 00 00 00 00       	callq  85 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x85>
  85:	48 89 d8             	mov    %rbx,%rax
  88:	48 89 c7             	mov    %rax,%rdi
  8b:	e8 00 00 00 00       	callq  90 <_ZNSt8functionIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvEEC1INS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEvEET_+0x90>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
	  }
      }
  90:	48 83 c4 18          	add    $0x18,%rsp
  94:	5b                   	pop    %rbx
  95:	5d                   	pop    %rbp
  96:	c3                   	retq   

セクション .text._ZNSt8functionIFvvEE4swapERS1_ の逆アセンブル:

0000000000000000 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt8functionIFvvEE4swapERS1_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
      {
	std::swap(_M_functor, __x._M_functor);
  15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  1d:	48 89 d6             	mov    %rdx,%rsi
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt8functionIFvvEE4swapERS1_+0x28>
	std::swap(_M_manager, __x._M_manager);
  28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  2c:	48 8d 50 10          	lea    0x10(%rax),%rdx
  30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  34:	48 83 c0 10          	add    $0x10,%rax
  38:	48 89 d6             	mov    %rdx,%rsi
  3b:	48 89 c7             	mov    %rax,%rdi
  3e:	e8 00 00 00 00       	callq  43 <_ZNSt8functionIFvvEE4swapERS1_+0x43>
	std::swap(_M_invoker, __x._M_invoker);
  43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  47:	48 8d 50 18          	lea    0x18(%rax),%rdx
  4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4f:	48 83 c0 18          	add    $0x18,%rax
  53:	48 89 d6             	mov    %rdx,%rsi
  56:	48 89 c7             	mov    %rax,%rdi
  59:	e8 00 00 00 00       	callq  5e <_ZNSt8functionIFvvEE4swapERS1_+0x5e>
      }
  5e:	c9                   	leaveq 
  5f:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE21_M_not_empty_functionIS9_EEbRKT_ の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE21_M_not_empty_functionIS9_EEbRKT_>:
	  _M_not_empty_function(_Tp _Class::* const& __mp)
	  { return __mp; }

	template<typename _Tp>
	  static bool
	  _M_not_empty_function(const _Tp&)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE21_M_not_empty_functionIS9_EEbRKT_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	  { return true; }
  11:	b8 01 00 00 00       	mov    $0x1,%eax
  16:	c9                   	leaveq 
  17:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_ の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_>:
	    }
	  return false;
	}

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
  16:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_+0x22>
  22:	48 89 c2             	mov    %rax,%rdx
  25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  29:	88 1c 24             	mov    %bl,(%rsp)
  2c:	48 89 d6             	mov    %rdx,%rsi
  2f:	48 89 c7             	mov    %rax,%rdi
  32:	e8 00 00 00 00       	callq  37 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_+0x37>
  37:	48 83 c4 38          	add    $0x38,%rsp
  3b:	5b                   	pop    %rbx
  3c:	5d                   	pop    %rbp
  3d:	c3                   	retq   

セクション .text._ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data の逆アセンブル:

0000000000000000 <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data+0x21>
  21:	48 89 c2             	mov    %rax,%rdx
  24:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  28:	48 89 d6             	mov    %rdx,%rsi
  2b:	48 89 c7             	mov    %rax,%rdi
  2e:	e8 00 00 00 00       	callq  33 <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data+0x33>
  33:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data+0x46>
  46:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  4a:	48 89 c7             	mov    %rax,%rdi
  4d:	e8 00 00 00 00       	callq  52 <_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_EvEEE9_M_invokeERKSt9_Any_data+0x52>
      }
  52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  56:	c9                   	leaveq 
  57:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 38          	sub    $0x38,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0xe>
   e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  12:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  16:	89 55 cc             	mov    %edx,-0x34(%rbp)
		   _Manager_operation __op)
	{
	  switch (__op)
  19:	8b 45 cc             	mov    -0x34(%rbp),%eax
  1c:	83 f8 01             	cmp    $0x1,%eax
  1f:	74 2c                	je     4d <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x4d>
  21:	83 f8 01             	cmp    $0x1,%eax
  24:	7f 06                	jg     2c <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
  26:	85 c0                	test   %eax,%eax
  28:	74 0e                	je     38 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x38>
  2a:	eb 6a                	jmp    96 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x96>
  2c:	83 f8 02             	cmp    $0x2,%eax
  2f:	74 3c                	je     6d <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x6d>
  31:	83 f8 03             	cmp    $0x3,%eax
  34:	74 50                	je     86 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x86>
  36:	eb 5e                	jmp    96 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x96>
	    {
#ifdef __GXX_RTTI
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
  38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  3c:	48 89 c7             	mov    %rax,%rdi
  3f:	e8 00 00 00 00       	callq  44 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x44>
  44:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	      break;
  4b:	eb 49                	jmp    96 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x96>
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
  4d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  51:	48 89 c7             	mov    %rax,%rdi
  54:	e8 00 00 00 00       	callq  59 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x59>
  59:	48 89 c3             	mov    %rax,%rbx
  5c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  60:	48 89 c7             	mov    %rax,%rdi
  63:	e8 00 00 00 00       	callq  68 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x68>
  68:	48 89 03             	mov    %rax,(%rbx)
	      break;
  6b:	eb 29                	jmp    96 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x96>

	    case __clone_functor:
	      _M_clone(__dest, __source, _Local_storage());
  6d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  75:	44 88 04 24          	mov    %r8b,(%rsp)
  79:	48 89 d6             	mov    %rdx,%rsi
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	callq  84 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x84>
	      break;
  84:	eb 10                	jmp    96 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x96>

	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
  86:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8a:	88 0c 24             	mov    %cl,(%rsp)
  8d:	48 89 c7             	mov    %rax,%rdi
  90:	e8 00 00 00 00       	callq  95 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x95>
	      break;
  95:	90                   	nop
	    }
	  return false;
  96:	b8 00 00 00 00       	mov    $0x0,%eax
	}
  9b:	48 83 c4 38          	add    $0x38,%rsp
  9f:	5b                   	pop    %rbx
  a0:	5d                   	pop    %rbp
  a1:	c3                   	retq   

セクション .text._ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_ の逆アセンブル:

0000000000000000 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	c9                   	leaveq 
  16:	c3                   	retq   

セクション .text._ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_ の逆アセンブル:

0000000000000000 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
  15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  19:	48 89 c7             	mov    %rax,%rdi
  1c:	e8 00 00 00 00       	callq  21 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_+0x21>
  21:	48 8b 00             	mov    (%rax),%rax
  24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
      __a = _GLIBCXX_MOVE(__b);
  28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_+0x34>
  34:	48 8b 10             	mov    (%rax),%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 10             	mov    %rdx,(%rax)
      __b = _GLIBCXX_MOVE(__tmp);
  3e:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  42:	48 89 c7             	mov    %rax,%rdi
  45:	e8 00 00 00 00       	callq  4a <_ZSt4swapIPFvRKSt9_Any_dataEEvRT_S6_+0x4a>
  4a:	48 8b 10             	mov    (%rax),%rdx
  4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  51:	48 89 10             	mov    %rdx,(%rax)
    }
  54:	c9                   	leaveq 
  55:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
  18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x24>
  24:	49 89 c4             	mov    %rax,%r12
  27:	bf 28 00 00 00       	mov    $0x28,%edi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x31>
  31:	48 89 c3             	mov    %rax,%rbx
  34:	4c 89 e6             	mov    %r12,%rsi
  37:	48 89 df             	mov    %rbx,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x3f>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x4b>
  4b:	48 89 18             	mov    %rbx,(%rax)
  4e:	eb 16                	jmp    66 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x66>
  50:	49 89 c4             	mov    %rax,%r12
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x5b>
  5b:	4c 89 e0             	mov    %r12,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE15_M_init_functorERSt9_Any_dataOS9_St17integral_constantIbLb0EE+0x66>
  66:	48 83 c4 10          	add    $0x10,%rsp
  6a:	5b                   	pop    %rbx
  6b:	41 5c                	pop    %r12
  6d:	5d                   	pop    %rbp
  6e:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE14_M_get_pointerERKSt9_Any_data の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE14_M_get_pointerERKSt9_Any_data>:

	typedef integral_constant<bool, __stored_locally> _Local_storage;

	// Retrieve a pointer to the function object
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE14_M_get_pointerERKSt9_Any_data+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
  11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE14_M_get_pointerERKSt9_Any_data+0x1d>
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
  1d:	48 8b 00             	mov    (%rax),%rax
  20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	  return const_cast<_Functor*>(__ptr);
  24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	}
  28:	c9                   	leaveq 
  29:	c3                   	retq   

セクション .text._ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv の逆アセンブル:

0000000000000000 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv>:
    {
      _Ptr_type operator()()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 20          	sub    $0x20,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0xd>
   d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  11:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
      {
	__try
	  {
	    _M_fn();
  15:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  19:	48 83 c0 08          	add    $0x8,%rax
  1d:	48 89 c7             	mov    %rax,%rdi
  20:	e8 00 00 00 00       	callq  25 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x25>
	  }
	__catch(...)
	  {
	    _M_result->_M_error = current_exception();
	  }
	return std::move(_M_result);
  25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  29:	48 8b 00             	mov    (%rax),%rax
  2c:	48 89 c7             	mov    %rax,%rdi
  2f:	e8 00 00 00 00       	callq  34 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x34>
  34:	48 89 c2             	mov    %rax,%rdx
  37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  3b:	48 89 d6             	mov    %rdx,%rsi
  3e:	48 89 c7             	mov    %rax,%rdi
  41:	e8 00 00 00 00       	callq  46 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x46>
  46:	eb 49                	jmp    91 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x91>
      {
	__try
	  {
	    _M_fn();
	  }
	__catch(...)
  48:	48 89 c7             	mov    %rax,%rdi
  4b:	e8 00 00 00 00       	callq  50 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x50>
	  {
	    _M_result->_M_error = current_exception();
  50:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  54:	48 89 c7             	mov    %rax,%rdi
  57:	e8 00 00 00 00       	callq  5c <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x5c>
  5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  60:	48 8b 00             	mov    (%rax),%rax
  63:	48 89 c7             	mov    %rax,%rdi
  66:	e8 00 00 00 00       	callq  6b <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x6b>
  6b:	48 8d 50 08          	lea    0x8(%rax),%rdx
  6f:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  73:	48 89 c6             	mov    %rax,%rsi
  76:	48 89 d7             	mov    %rdx,%rdi
  79:	e8 00 00 00 00       	callq  7e <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x7e>
  7e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  82:	48 89 c7             	mov    %rax,%rdi
  85:	e8 00 00 00 00       	callq  8a <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x8a>
      {
	__try
	  {
	    _M_fn();
	  }
	__catch(...)
  8a:	e8 00 00 00 00       	callq  8f <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x8f>
  8f:	eb 94                	jmp    25 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEclEv+0x25>
	  {
	    _M_result->_M_error = current_exception();
	  }
	return std::move(_M_result);
      }
  91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  95:	c9                   	leaveq 
  96:	c3                   	retq   

セクション .text._ZNSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERT_v の逆アセンブル:

0000000000000000 <_ZNSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERT_v>:
    void*       _M_access()       { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERT_v+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<_Tp*>(_M_access()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERT_v+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC2ERKS7_ の逆アセンブル:

0000000000000000 <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1ERKS7_>:
      _Ptr_type&                _M_result;
      std::function<_Res()>     _M_fn;
    };

  template<typename _Ptr_type>
    struct __future_base::_Task_setter<_Ptr_type, void>
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1ERKS7_+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  19:	48 8b 10             	mov    (%rax),%rdx
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  27:	48 8d 50 08          	lea    0x8(%rax),%rdx
  2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2f:	48 83 c0 08          	add    $0x8,%rax
  33:	48 89 d6             	mov    %rdx,%rsi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <_ZNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEEvEC1ERKS7_+0x3e>
  3e:	c9                   	leaveq 
  3f:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE>:
	}

	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	41 54                	push   %r12
   6:	53                   	push   %rbx
   7:	48 83 ec 10          	sub    $0x10,%rsp
   b:	e8 00 00 00 00       	callq  10 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x10>
  10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	{
	  __dest._M_access<_Functor*>() =
	    new _Functor(*__source._M_access<_Functor*>());
  18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  1c:	48 89 c7             	mov    %rax,%rdi
  1f:	e8 00 00 00 00       	callq  24 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x24>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
  24:	4c 8b 20             	mov    (%rax),%r12
  27:	bf 28 00 00 00       	mov    $0x28,%edi
  2c:	e8 00 00 00 00       	callq  31 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x31>
  31:	48 89 c3             	mov    %rax,%rbx
  34:	4c 89 e6             	mov    %r12,%rsi
  37:	48 89 df             	mov    %rbx,%rdi
  3a:	e8 00 00 00 00       	callq  3f <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x3f>
  3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  43:	48 89 c7             	mov    %rax,%rdi
  46:	e8 00 00 00 00       	callq  4b <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x4b>
  4b:	48 89 18             	mov    %rbx,(%rax)
  4e:	eb 16                	jmp    66 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x66>
  50:	49 89 c4             	mov    %rax,%r12
  53:	48 89 df             	mov    %rbx,%rdi
  56:	e8 00 00 00 00       	callq  5b <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x5b>
  5b:	4c 89 e0             	mov    %r12,%rax
  5e:	48 89 c7             	mov    %rax,%rdi
  61:	e8 00 00 00 00       	callq  66 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE8_M_cloneERSt9_Any_dataRKSB_St17integral_constantIbLb0EE+0x66>
	    new _Functor(*__source._M_access<_Functor*>());
	}
  66:	48 83 c4 10          	add    $0x10,%rsp
  6a:	5b                   	pop    %rbx
  6b:	41 5c                	pop    %r12
  6d:	5d                   	pop    %rbp
  6e:	c3                   	retq   

セクション .text._ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE の逆アセンブル:

0000000000000000 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE>:
	  __victim._M_access<_Functor>().~_Functor();
	}

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	{
	  delete __victim._M_access<_Functor*>();
  12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  16:	48 89 c7             	mov    %rax,%rdi
  19:	e8 00 00 00 00       	callq  1e <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x1e>
  1e:	48 8b 18             	mov    (%rax),%rbx
  21:	48 85 db             	test   %rbx,%rbx
  24:	74 10                	je     36 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x36>
  26:	48 89 df             	mov    %rbx,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x2e>
  2e:	48 89 df             	mov    %rbx,%rdi
  31:	e8 00 00 00 00       	callq  36 <_ZNSt14_Function_base13_Base_managerINSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb0EE+0x36>
	}
  36:	48 83 c4 18          	add    $0x18,%rsp
  3a:	5b                   	pop    %rbx
  3b:	5d                   	pop    %rbp
  3c:	c3                   	retq   

セクション .text._ZNKSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERKT_v の逆アセンブル:

0000000000000000 <_ZNKSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERKT_v>:
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERKT_v+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return *static_cast<const _Tp*>(_M_access()); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt9_Any_data9_M_accessIPNSt13__future_base12_Task_setterISt10unique_ptrINS1_7_ResultIvEENS1_12_Result_base8_DeleterEEvEEEERKT_v+0x1d>
  1d:	c9                   	leaveq 
  1e:	c3                   	retq   

セクション .text._ZNKSt8functionIFvvEEclEv の逆アセンブル:

0000000000000000 <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt8functionIFvvEEclEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt8functionIFvvEEclEv+0x1d>
  1d:	84 c0                	test   %al,%al
  1f:	74 05                	je     26 <_ZNKSt8functionIFvvEEclEv+0x26>
	__throw_bad_function_call();
  21:	e8 00 00 00 00       	callq  26 <_ZNKSt8functionIFvvEEclEv+0x26>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2a:	48 8b 40 18          	mov    0x18(%rax),%rax
  2e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  32:	48 89 d7             	mov    %rdx,%rdi
  35:	ff d0                	callq  *%rax
    }
  37:	c9                   	leaveq 
  38:	c3                   	retq   

セクション .text._ZNSt8functionIFvvEEC2ERKS1_ の逆アセンブル:

0000000000000000 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	53                   	push   %rbx
   5:	48 83 ec 18          	sub    $0x18,%rsp
   9:	e8 00 00 00 00       	callq  e <_ZNSt8functionIFvvEEC1ERKS1_+0xe>
   e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  12:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    function(const function& __x)
    : _Function_base()
  16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  1a:	48 89 c7             	mov    %rax,%rdi
  1d:	e8 00 00 00 00       	callq  22 <_ZNSt8functionIFvvEEC1ERKS1_+0x22>
  22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  26:	48 89 c7             	mov    %rax,%rdi
  29:	e8 00 00 00 00       	callq  2e <_ZNSt8functionIFvvEEC1ERKS1_+0x2e>
    {
      if (static_cast<bool>(__x))
  2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  32:	48 89 c7             	mov    %rax,%rdi
  35:	e8 00 00 00 00       	callq  3a <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
  3a:	84 c0                	test   %al,%al
  3c:	74 56                	je     94 <_ZNSt8functionIFvvEEC1ERKS1_+0x94>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
  3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  42:	48 8b 40 10          	mov    0x10(%rax),%rax
  46:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  4a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  4e:	ba 02 00 00 00       	mov    $0x2,%edx
  53:	48 89 cf             	mov    %rcx,%rdi
  56:	ff d0                	callq  *%rax
	  _M_invoker = __x._M_invoker;
  58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  5c:	48 8b 50 18          	mov    0x18(%rax),%rdx
  60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  64:	48 89 50 18          	mov    %rdx,0x18(%rax)
	  _M_manager = __x._M_manager;
  68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  74:	48 89 50 10          	mov    %rdx,0x10(%rax)
  78:	eb 1a                	jmp    94 <_ZNSt8functionIFvvEEC1ERKS1_+0x94>
  7a:	48 89 c3             	mov    %rax,%rbx

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
  7d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  81:	48 89 c7             	mov    %rax,%rdi
  84:	e8 00 00 00 00       	callq  89 <_ZNSt8functionIFvvEEC1ERKS1_+0x89>
  89:	48 89 d8             	mov    %rbx,%rax
  8c:	48 89 c7             	mov    %rax,%rdi
  8f:	e8 00 00 00 00       	callq  94 <_ZNSt8functionIFvvEEC1ERKS1_+0x94>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
	  _M_invoker = __x._M_invoker;
	  _M_manager = __x._M_manager;
	}
    }
  94:	48 83 c4 18          	add    $0x18,%rsp
  98:	5b                   	pop    %rbx
  99:	5d                   	pop    %rbp
  9a:	c3                   	retq   

セクション .text._ZNKSt8functionIFvvEEcvbEv の逆アセンブル:

0000000000000000 <_ZNKSt8functionIFvvEEcvbEv>:
       *  @return @c true when this %function object contains a target,
       *  or @c false when it is empty.
       *
       *  This function will not throw an %exception.
       */
      explicit operator bool() const noexcept
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNKSt8functionIFvvEEcvbEv+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
      { return !_M_empty(); }
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNKSt8functionIFvvEEcvbEv+0x1d>
  1d:	83 f0 01             	xor    $0x1,%eax
  20:	c9                   	leaveq 
  21:	c3                   	retq   

セクション .text._ZNSt6thread10_Impl_baseC2Ev の逆アセンブル:

0000000000000000 <_ZNSt6thread10_Impl_baseC1Ev>:
	operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };

    // Simple base type that the templatized, derived class containing
    // an arbitrary functor can be converted to and called.
    struct _Impl_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 08          	sub    $0x8,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt6thread10_Impl_baseC1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  27:	00 
  28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  2c:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  33:	00 
  34:	c9                   	leaveq 
  35:	c3                   	retq   

セクション .text._ZNSt13__future_base7_ResultIvED2Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base7_ResultIvED1Ev>:
      void _M_destroy() { delete this; }
    };

  /// Explicit specialization for void.
  template<>
    struct __future_base::_Result<void> : __future_base::_Result_base
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base7_ResultIvED1Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  20:	48 89 c7             	mov    %rax,%rdi
  23:	e8 00 00 00 00       	callq  28 <_ZNSt13__future_base7_ResultIvED1Ev+0x28>
  28:	b8 00 00 00 00       	mov    $0x0,%eax
  2d:	85 c0                	test   %eax,%eax
  2f:	74 0c                	je     3d <_ZNSt13__future_base7_ResultIvED1Ev+0x3d>
  31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  35:	48 89 c7             	mov    %rax,%rdi
  38:	e8 00 00 00 00       	callq  3d <_ZNSt13__future_base7_ResultIvED1Ev+0x3d>
  3d:	c9                   	leaveq 
  3e:	c3                   	retq   

セクション .text._ZNSt13__future_base7_ResultIvED0Ev の逆アセンブル:

0000000000000000 <_ZNSt13__future_base7_ResultIvED0Ev>:
   0:	55                   	push   %rbp
   1:	48 89 e5             	mov    %rsp,%rbp
   4:	48 83 ec 10          	sub    $0x10,%rsp
   8:	e8 00 00 00 00       	callq  d <_ZNSt13__future_base7_ResultIvED0Ev+0xd>
   d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  15:	48 89 c7             	mov    %rax,%rdi
  18:	e8 00 00 00 00       	callq  1d <_ZNSt13__future_base7_ResultIvED0Ev+0x1d>
  1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  21:	48 89 c7             	mov    %rax,%rdi
  24:	e8 00 00 00 00       	callq  29 <_ZNSt13__future_base7_ResultIvED0Ev+0x29>
  29:	c9                   	leaveq 
  2a:	c3                   	retq   
